
DccMasterStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800cea0  0800cea0  0001cea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1f8  0800d1f8  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1f8  0800d1f8  0001d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d200  0800d200  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d200  0800d200  0001d200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d204  0800d204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800d208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001758  20000350  0800d558  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa8  0800d558  00021aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_line   00019118  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000252e6  00000000  00000000  00039498  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004725  00000000  00000000  0005e77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b38  00000000  00000000  00062ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d1ff1  00000000  00000000  000649e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001920  00000000  00000000  001369d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023cde  00000000  00000000  001382f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bfd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad4  00000000  00000000  0015c054  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000000df  00000000  00000000  00163b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ce88 	.word	0x0800ce88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	0800ce88 	.word	0x0800ce88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0b      	ldr	r4, [pc, #44]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fa:	f00a fe0b 	bl	800b214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f00b fb07 	bl	800bc10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f009 ffdb 	bl	800a5bc <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8000614:	0800d208 	.word	0x0800d208
  ldr r2, =_sbss
 8000618:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800061c:	20001aa8 	.word	0x20001aa8

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>

08000622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 fabd 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f80e 	bl	8000654 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000644:	f00a fb52 	bl	800acec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	79fb      	ldrb	r3, [r7, #7]

}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d022      	beq.n	80006ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_InitTick+0x6c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_InitTick+0x68>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000674:	fbb1 f3f3 	udiv	r3, r1, r3
 8000678:	fbb2 f3f3 	udiv	r3, r2, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fac8 	bl	8000c12 <HAL_SYSTICK_Config>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10f      	bne.n	80006a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d809      	bhi.n	80006a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	2200      	movs	r2, #0
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000696:	f000 fa94 	bl	8000bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_InitTick+0x70>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e007      	b.n	80006b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e004      	b.n	80006b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e001      	b.n	80006b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000004 	.word	0x20000004
 80006c0:	20000118 	.word	0x20000118
 80006c4:	20000000 	.word	0x20000000

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <HAL_IncTick+0x1c>)
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	200005a4 	.word	0x200005a4
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200005a4 	.word	0x200005a4

08000704 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <LL_EXTI_EnableIT_0_31+0x20>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4904      	ldr	r1, [pc, #16]	; (8000724 <LL_EXTI_EnableIT_0_31+0x20>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	600b      	str	r3, [r1, #0]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40010400 	.word	0x40010400

08000728 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <LL_EXTI_DisableIT_0_31+0x24>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	43db      	mvns	r3, r3
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <LL_EXTI_DisableIT_0_31+0x24>)
 800073a:	4013      	ands	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40010400 	.word	0x40010400

08000750 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_EXTI_EnableEvent_0_31+0x20>)
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_EXTI_EnableEvent_0_31+0x20>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	604b      	str	r3, [r1, #4]

}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40010400 	.word	0x40010400

08000774 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_EXTI_DisableEvent_0_31+0x24>)
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	43db      	mvns	r3, r3
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000786:	4013      	ands	r3, r2
 8000788:	604b      	str	r3, [r1, #4]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40010400 	.word	0x40010400

0800079c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]

}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40010400 	.word	0x40010400

080007c0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80007d2:	4013      	ands	r3, r2
 80007d4:	608b      	str	r3, [r1, #8]

}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40010400 	.word	0x40010400

080007e8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	4904      	ldr	r1, [pc, #16]	; (8000808 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	60cb      	str	r3, [r1, #12]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40010400 	.word	0x40010400

0800080c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	43db      	mvns	r3, r3
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800081e:	4013      	ands	r3, r2
 8000820:	60cb      	str	r3, [r1, #12]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40010400 	.word	0x40010400

08000834 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6153      	str	r3, [r2, #20]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40010400 	.word	0x40010400

08000854 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	77fb      	strb	r3, [r7, #31]
 800086e:	e0bb      	b.n	80009e8 <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800087a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800087e:	d102      	bne.n	8000886 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	77fb      	strb	r3, [r7, #31]
 8000884:	e0b0      	b.n	80009e8 <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7f5b      	ldrb	r3, [r3, #29]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d108      	bne.n	80008a2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f00a fa49 	bl	800ad34 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ac:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <HAL_COMP_Init+0x1a0>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	6979      	ldr	r1, [r7, #20]
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d015      	beq.n	800091a <HAL_COMP_Init+0xc6>
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d112      	bne.n	800091a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80008f4:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <HAL_COMP_Init+0x1a4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	099b      	lsrs	r3, r3, #6
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <HAL_COMP_Init+0x1a8>)
 80008fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000900:	099a      	lsrs	r2, r3, #6
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800090c:	e002      	b.n	8000914 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3b01      	subs	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f9      	bne.n	800090e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <HAL_COMP_Init+0x1ac>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d012      	beq.n	800094a <HAL_COMP_Init+0xf6>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a36      	ldr	r2, [pc, #216]	; (8000a04 <HAL_COMP_Init+0x1b0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d00a      	beq.n	8000944 <HAL_COMP_Init+0xf0>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a35      	ldr	r2, [pc, #212]	; (8000a08 <HAL_COMP_Init+0x1b4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d102      	bne.n	800093e <HAL_COMP_Init+0xea>
 8000938:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800093c:	e007      	b.n	800094e <HAL_COMP_Init+0xfa>
 800093e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000942:	e004      	b.n	800094e <HAL_COMP_Init+0xfa>
 8000944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000948:	e001      	b.n	800094e <HAL_COMP_Init+0xfa>
 800094a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800094e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d037      	beq.n	80009cc <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8000968:	6938      	ldr	r0, [r7, #16]
 800096a:	f7ff ff17 	bl	800079c <LL_EXTI_EnableRisingTrig_0_31>
 800096e:	e002      	b.n	8000976 <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8000970:	6938      	ldr	r0, [r7, #16]
 8000972:	f7ff ff25 	bl	80007c0 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f7ff ff30 	bl	80007e8 <LL_EXTI_EnableFallingTrig_0_31>
 8000988:	e002      	b.n	8000990 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800098a:	6938      	ldr	r0, [r7, #16]
 800098c:	f7ff ff3e 	bl	800080c <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8000990:	6938      	ldr	r0, [r7, #16]
 8000992:	f7ff ff4f 	bl	8000834 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	f7ff fed4 	bl	8000750 <LL_EXTI_EnableEvent_0_31>
 80009a8:	e002      	b.n	80009b0 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	f7ff fee2 	bl	8000774 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d003      	beq.n	80009c4 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 80009bc:	6938      	ldr	r0, [r7, #16]
 80009be:	f7ff fea1 	bl	8000704 <LL_EXTI_EnableIT_0_31>
 80009c2:	e009      	b.n	80009d8 <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80009c4:	6938      	ldr	r0, [r7, #16]
 80009c6:	f7ff feaf 	bl	8000728 <LL_EXTI_DisableIT_0_31>
 80009ca:	e005      	b.n	80009d8 <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80009cc:	6938      	ldr	r0, [r7, #16]
 80009ce:	f7ff fed1 	bl	8000774 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80009d2:	6938      	ldr	r0, [r7, #16]
 80009d4:	f7ff fea8 	bl	8000728 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7f5b      	ldrb	r3, [r3, #29]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80009e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	ff007e0f 	.word	0xff007e0f
 80009f8:	20000118 	.word	0x20000118
 80009fc:	053e2d63 	.word	0x053e2d63
 8000a00:	40010200 	.word	0x40010200
 8000a04:	40010204 	.word	0x40010204
 8000a08:	40010208 	.word	0x40010208

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff29 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff40 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff33 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa4 	bl	8000b68 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e08d      	b.n	8000d5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_DMA_Init+0x138>)
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d80f      	bhi.n	8000c6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <HAL_DMA_Init+0x13c>)
 8000c52:	4413      	add	r3, r2
 8000c54:	4a45      	ldr	r2, [pc, #276]	; (8000d6c <HAL_DMA_Init+0x140>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	009a      	lsls	r2, r3, #2
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <HAL_DMA_Init+0x144>)
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
 8000c68:	e00e      	b.n	8000c88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <HAL_DMA_Init+0x148>)
 8000c72:	4413      	add	r3, r2
 8000c74:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_DMA_Init+0x140>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	009a      	lsls	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a3c      	ldr	r2, [pc, #240]	; (8000d78 <HAL_DMA_Init+0x14c>)
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a1b      	ldr	r3, [r3, #32]
 8000cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 fa1e 	bl	800111c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ce8:	d102      	bne.n	8000cf0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d010      	beq.n	8000d30 <HAL_DMA_Init+0x104>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d80c      	bhi.n	8000d30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fa3e 	bl	8001198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	e008      	b.n	8000d42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020407 	.word	0x40020407
 8000d68:	bffdfff8 	.word	0xbffdfff8
 8000d6c:	cccccccd 	.word	0xcccccccd
 8000d70:	40020000 	.word	0x40020000
 8000d74:	bffdfbf8 	.word	0xbffdfbf8
 8000d78:	40020400 	.word	0x40020400

08000d7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_DMA_Start_IT+0x20>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e066      	b.n	8000e6a <HAL_DMA_Start_IT+0xee>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d155      	bne.n	8000e5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f962 	bl	800109e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 020e 	orr.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00f      	b.n	8000e14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 020a 	orr.w	r2, r2, #10
 8000e12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0201 	orr.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e005      	b.n	8000e68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e64:	2302      	movs	r3, #2
 8000e66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e047      	b.n	8000f36 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 020e 	bic.w	r2, r2, #14
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f003 021f 	and.w	r2, r3, #31
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ef2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4798      	blx	r3
    }
  }
  return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	2204      	movs	r2, #4
 8000f62:	409a      	lsls	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d026      	beq.n	8000fba <HAL_DMA_IRQHandler+0x7a>
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d021      	beq.n	8000fba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d107      	bne.n	8000f94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d071      	beq.n	8001094 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fb8:	e06c      	b.n	8001094 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d02e      	beq.n	800102c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d029      	beq.n	800102c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10b      	bne.n	8000ffe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020a 	bic.w	r2, r2, #10
 8000ff4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f003 021f 	and.w	r2, r3, #31
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	2102      	movs	r1, #2
 800100c:	fa01 f202 	lsl.w	r2, r1, r2
 8001010:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	2b00      	cmp	r3, #0
 8001020:	d038      	beq.n	8001094 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800102a:	e033      	b.n	8001094 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2208      	movs	r2, #8
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d02a      	beq.n	8001096 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d025      	beq.n	8001096 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 020e 	bic.w	r2, r2, #14
 8001058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 021f 	and.w	r2, r3, #31
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001094:	bf00      	nop
 8001096:	bf00      	nop
}
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010b4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010c6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f202 	lsl.w	r2, r1, r2
 80010da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d108      	bne.n	80010fe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010fc:	e007      	b.n	800110e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	60da      	str	r2, [r3, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800112c:	429a      	cmp	r2, r3
 800112e:	d802      	bhi.n	8001136 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e001      	b.n	800113a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001138:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3b08      	subs	r3, #8
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	009a      	lsls	r2, r3, #2
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4413      	add	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001166:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2201      	movs	r2, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40020407 	.word	0x40020407
 8001188:	40020800 	.word	0x40020800
 800118c:	40020820 	.word	0x40020820
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	40020880 	.word	0x40020880

08001198 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a08      	ldr	r2, [pc, #32]	; (80011dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2201      	movs	r2, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	1000823f 	.word	0x1000823f
 80011dc:	40020940 	.word	0x40020940

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ee:	e15a      	b.n	80014a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 814c 	beq.w	80014a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x38>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b12      	cmp	r3, #18
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	6939      	ldr	r1, [r7, #16]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <HAL_GPIO_Init+0xd4>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80a6 	beq.w	80014a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001358:	4a5a      	ldr	r2, [pc, #360]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6613      	str	r3, [r2, #96]	; 0x60
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_GPIO_Init+0x2e4>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136c:	4a56      	ldr	r2, [pc, #344]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001396:	d01f      	beq.n	80013d8 <HAL_GPIO_Init+0x1f8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <HAL_GPIO_Init+0x2ec>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d019      	beq.n	80013d4 <HAL_GPIO_Init+0x1f4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4b      	ldr	r2, [pc, #300]	; (80014d0 <HAL_GPIO_Init+0x2f0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1f0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_GPIO_Init+0x2f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1ec>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <HAL_GPIO_Init+0x2f8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2fc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1e4>
 80013c0:	2305      	movs	r3, #5
 80013c2:	e00a      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013c4:	2306      	movs	r3, #6
 80013c6:	e008      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e006      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013cc:	2303      	movs	r3, #3
 80013ce:	e004      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_GPIO_Init+0x1fa>
 80013d8:	2300      	movs	r3, #0
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	f002 0203 	and.w	r2, r2, #3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ea:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_GPIO_Init+0x2e8>)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_GPIO_Init+0x300>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141c:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001446:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_GPIO_Init+0x300>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_GPIO_Init+0x300>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f ae9d 	bne.w	80011f0 <HAL_GPIO_Init+0x10>
  }
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	48001000 	.word	0x48001000
 80014dc:	48001400 	.word	0x48001400
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e002      	b.n	8001508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e081      	b.n	800162a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f009 fc3e 	bl	800adbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e006      	b.n	800159c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800159a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d104      	bne.n	80015ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	ea42 0103 	orr.w	r1, r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	021a      	lsls	r2, r3, #8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69d9      	ldr	r1, [r3, #28]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b20      	cmp	r3, #32
 8001646:	d138      	bne.n	80016ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001652:	2302      	movs	r3, #2
 8001654:	e032      	b.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2224      	movs	r2, #36	; 0x24
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001684:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d139      	bne.n	8001752 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e033      	b.n	8001754 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af06      	add	r7, sp, #24
 8001766:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0ad      	b.n	80018ce <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f009 fe4e 	bl	800b428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f005 fba7 	bl	8006eec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e035      	b.n	8001810 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	015b      	lsls	r3, r3, #5
 80017aa:	4413      	add	r3, r2
 80017ac:	3329      	adds	r3, #41	; 0x29
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	015b      	lsls	r3, r3, #5
 80017b8:	4413      	add	r3, r2
 80017ba:	3328      	adds	r3, #40	; 0x28
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	b291      	uxth	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
 80017cc:	3336      	adds	r3, #54	; 0x36
 80017ce:	460a      	mov	r2, r1
 80017d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	015b      	lsls	r3, r3, #5
 80017d8:	4413      	add	r3, r2
 80017da:	332b      	adds	r3, #43	; 0x2b
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	4413      	add	r3, r2
 80017e8:	3338      	adds	r3, #56	; 0x38
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	015b      	lsls	r3, r3, #5
 80017f4:	4413      	add	r3, r2
 80017f6:	333c      	adds	r3, #60	; 0x3c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	3302      	adds	r3, #2
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3c4      	bcc.n	80017a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e031      	b.n	8001884 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	4413      	add	r3, r2
 8001828:	f203 1329 	addw	r3, r3, #297	; 0x129
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	4413      	add	r3, r2
 8001838:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	015b      	lsls	r3, r3, #5
 8001846:	4413      	add	r3, r2
 8001848:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	015b      	lsls	r3, r3, #5
 8001856:	4413      	add	r3, r2
 8001858:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	4413      	add	r3, r2
 8001868:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	330a      	adds	r3, #10
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	4413      	add	r3, r2
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3c8      	bcc.n	8001820 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	687e      	ldr	r6, [r7, #4]
 8001896:	466d      	mov	r5, sp
 8001898:	f106 0410 	add.w	r4, r6, #16
 800189c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	602b      	str	r3, [r5, #0]
 80018a4:	1d33      	adds	r3, r6, #4
 80018a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f005 fb3c 	bl	8006f26 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d102      	bne.n	80018cc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fe41 	bl	800254e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_PCD_Start+0x16>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e012      	b.n	8001912 <HAL_PCD_Start+0x3c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f006 fb61 	bl	8007fc0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fada 	bl	8006ebc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fb61 	bl	8007fee <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001936:	d102      	bne.n	800193e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb3f 	bl	8001fbc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f006 fb53 	bl	8007fee <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	d112      	bne.n	800197a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195c:	b29a      	uxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001966:	b292      	uxth	r2, r2
 8001968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f009 fdd0 	bl	800b512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f929 	bl	8001bcc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f006 fb35 	bl	8007fee <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198e:	d10b      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 fb1e 	bl	8007fee <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019bc:	d10b      	bne.n	80019d6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d0:	b292      	uxth	r2, r2
 80019d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 fb07 	bl	8007fee <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ea:	d133      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0208 	bic.w	r2, r2, #8
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f009 ff5f 	bl	800b8f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f009 fda4 	bl	800b584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fac8 	bl	8007fee <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a68:	d131      	bne.n	8001ace <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0208 	orr.w	r2, r2, #8
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0204 	orr.w	r2, r2, #4
 8001aac:	b292      	uxth	r2, r2
 8001aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f006 fa99 	bl	8007fee <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac6:	d002      	beq.n	8001ace <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f009 fd41 	bl	800b550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 fa8b 	bl	8007fee <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	2b80      	cmp	r3, #128	; 0x80
 8001ae0:	d13f      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12b      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0204 	orr.w	r2, r2, #4
 8001b16:	b292      	uxth	r2, r2
 8001b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b52:	2101      	movs	r1, #1
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f009 fecd 	bl	800b8f4 <HAL_PCDEx_LPM_Callback>
 8001b5a:	e002      	b.n	8001b62 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f009 fcf7 	bl	800b550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fa41 	bl	8007fee <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b76:	d10e      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f009 fcb0 	bl	800b4f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f006 fa27 	bl	8007fee <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001baa:	d10b      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_SetAddress+0x1a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e013      	b.n	8001c0e <HAL_PCD_SetAddress+0x42>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f006 f9ca 	bl	8007f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	4608      	mov	r0, r1
 8001c20:	4611      	mov	r1, r2
 8001c22:	461a      	mov	r2, r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	70fb      	strb	r3, [r7, #3]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	803b      	strh	r3, [r7, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da0b      	bge.n	8001c54 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	3328      	adds	r3, #40	; 0x28
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	705a      	strb	r2, [r3, #1]
 8001c52:	e00b      	b.n	8001c6c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c78:	883a      	ldrh	r2, [r7, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	78ba      	ldrb	r2, [r7, #2]
 8001c82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d102      	bne.n	8001ca2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_EP_Open+0x9a>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e00e      	b.n	8001cce <HAL_PCD_EP_Open+0xb8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 f956 	bl	8006f70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da0b      	bge.n	8001d02 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	015b      	lsls	r3, r3, #5
 8001cf2:	3328      	adds	r3, #40	; 0x28
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00b      	b.n	8001d1a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	015b      	lsls	r3, r3, #5
 8001d0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_EP_Close+0x5e>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00e      	b.n	8001d52 <HAL_PCD_EP_Close+0x7c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 fc04 	bl	8007550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	460b      	mov	r3, r1
 8001d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fd63 	bl	800787c <USB_EPStartXfer>
 8001db6:	e005      	b.n	8001dc4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 fd5c 	bl	800787c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	330a      	adds	r3, #10
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	460b      	mov	r3, r1
 8001e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	3328      	adds	r3, #40	; 0x28
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6979      	ldr	r1, [r7, #20]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fd15 	bl	800787c <USB_EPStartXfer>
 8001e52:	e005      	b.n	8001e60 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6979      	ldr	r1, [r7, #20]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 fd0e 	bl	800787c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 0207 	and.w	r2, r3, #7
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d901      	bls.n	8001e88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e046      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da0b      	bge.n	8001ea8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	3328      	adds	r3, #40	; 0x28
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	705a      	strb	r2, [r3, #1]
 8001ea6:	e009      	b.n	8001ebc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	015b      	lsls	r3, r3, #5
 8001eac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_EP_SetStall+0x72>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e01c      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xac>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 ff7e 	bl	8007dec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f006 f881 	bl	800800e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d901      	bls.n	8001f3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e03a      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da0b      	bge.n	8001f5c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	3328      	adds	r3, #40	; 0x28
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	705a      	strb	r2, [r3, #1]
 8001f5a:	e00b      	b.n	8001f74 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_EP_ClrStall+0x76>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e00e      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0x94>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f005 ff64 	bl	8007e70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fc4:	e274      	b.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fce:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fd0:	8afb      	ldrh	r3, [r7, #22]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001fda:	7d7b      	ldrb	r3, [r7, #21]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 813c 	bne.w	800225a <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fe2:	8afb      	ldrh	r3, [r7, #22]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d14f      	bne.n	800208c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffc:	b29c      	uxth	r4, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800200a:	b29b      	uxth	r3, r3
 800200c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3328      	adds	r3, #40	; 0x28
 8002012:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4413      	add	r3, r2
 800202e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	441a      	add	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800204a:	2100      	movs	r1, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f009 fa3b 	bl	800b4c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8228 	beq.w	80024b0 <PCD_EP_ISR_Handler+0x4f4>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 8223 	bne.w	80024b0 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800208a:	e211      	b.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002092:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800209c:	8a7b      	ldrh	r3, [r7, #18]
 800209e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d031      	beq.n	800210a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f005 ffe1 	bl	80080a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020f2:	4013      	ands	r3, r2
 80020f4:	b29c      	uxth	r4, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020fe:	b292      	uxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f009 f9b6 	bl	800b474 <HAL_PCD_SetupStageCallback>
 8002108:	e1d2      	b.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800210a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f280 81ce 	bge.w	80024b0 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29a      	uxth	r2, r3
 800211c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002120:	4013      	ands	r3, r2
 8002122:	b29c      	uxth	r4, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800212c:	b292      	uxth	r2, r2
 800212e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4413      	add	r3, r2
 800214a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <PCD_EP_ISR_Handler+0x1d8>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6959      	ldr	r1, [r3, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002178:	b29b      	uxth	r3, r3
 800217a:	f005 ff95 	bl	80080a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	441a      	add	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800218c:	2100      	movs	r1, #0
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f009 f982 	bl	800b498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461c      	mov	r4, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	441c      	add	r4, r3
 80021a6:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80021aa:	461c      	mov	r4, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10e      	bne.n	80021d2 <PCD_EP_ISR_Handler+0x216>
 80021b4:	8823      	ldrh	r3, [r4, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8023      	strh	r3, [r4, #0]
 80021c0:	8823      	ldrh	r3, [r4, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8023      	strh	r3, [r4, #0]
 80021d0:	e02d      	b.n	800222e <PCD_EP_ISR_Handler+0x272>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b3e      	cmp	r3, #62	; 0x3e
 80021d8:	d812      	bhi.n	8002200 <PCD_EP_ISR_Handler+0x244>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <PCD_EP_ISR_Handler+0x238>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	3301      	adds	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	8023      	strh	r3, [r4, #0]
 80021fe:	e016      	b.n	800222e <PCD_EP_ISR_Handler+0x272>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <PCD_EP_ISR_Handler+0x25e>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	3b01      	subs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	b29b      	uxth	r3, r3
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	b29b      	uxth	r3, r3
 8002222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222a:	b29b      	uxth	r3, r3
 800222c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223e:	b29c      	uxth	r4, r3
 8002240:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002244:	b29c      	uxth	r4, r3
 8002246:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800224a:	b29c      	uxth	r4, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b9e      	ldr	r3, [pc, #632]	; (80024cc <PCD_EP_ISR_Handler+0x510>)
 8002252:	4323      	orrs	r3, r4
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
 8002258:	e12a      	b.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	7d7b      	ldrb	r3, [r7, #21]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800226a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f280 80cb 	bge.w	800240a <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	7d7b      	ldrb	r3, [r7, #21]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002288:	4013      	ands	r3, r2
 800228a:	b29c      	uxth	r4, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	7d7b      	ldrb	r3, [r7, #21]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800229c:	b292      	uxth	r2, r2
 800229e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022a0:	7d7b      	ldrb	r3, [r7, #21]
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	7b1b      	ldrb	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11f      	bne.n	80022f6 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022da:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80022dc:	8bfb      	ldrh	r3, [r7, #30]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d06e      	beq.n	80023c0 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6959      	ldr	r1, [r3, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	88da      	ldrh	r2, [r3, #6]
 80022ee:	8bfb      	ldrh	r3, [r7, #30]
 80022f0:	f005 feda 	bl	80080a8 <USB_ReadPMA>
 80022f4:	e064      	b.n	80023c0 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01f      	beq.n	8002350 <PCD_EP_ISR_Handler+0x394>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	4413      	add	r3, r2
 800232a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002336:	8bfb      	ldrh	r3, [r7, #30]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d028      	beq.n	800238e <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6959      	ldr	r1, [r3, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	891a      	ldrh	r2, [r3, #8]
 8002348:	8bfb      	ldrh	r3, [r7, #30]
 800234a:	f005 fead 	bl	80080a8 <USB_ReadPMA>
 800234e:	e01e      	b.n	800238e <PCD_EP_ISR_Handler+0x3d2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002376:	8bfb      	ldrh	r3, [r7, #30]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	895a      	ldrh	r2, [r3, #10]
 8002388:	8bfb      	ldrh	r3, [r7, #30]
 800238a:	f005 fe8d 	bl	80080a8 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a8:	b29c      	uxth	r4, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <PCD_EP_ISR_Handler+0x514>)
 80023ba:	4323      	orrs	r3, r4
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	8bfb      	ldrh	r3, [r7, #30]
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <PCD_EP_ISR_Handler+0x42e>
 80023e0:	8bfa      	ldrh	r2, [r7, #30]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d206      	bcs.n	80023f8 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f009 f851 	bl	800b498 <HAL_PCD_DataOutStageCallback>
 80023f6:	e008      	b.n	800240a <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	7819      	ldrb	r1, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fca8 	bl	8001d5a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800240a:	8a7b      	ldrh	r3, [r7, #18]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d04d      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002414:	7d7b      	ldrb	r3, [r7, #21]
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	3328      	adds	r3, #40	; 0x28
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002438:	b29c      	uxth	r4, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	7d7b      	ldrb	r3, [r7, #21]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29b      	uxth	r3, r3
 8002450:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	4413      	add	r3, r2
 800246c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f009 f816 	bl	800b4c8 <HAL_PCD_DataInStageCallback>
 800249c:	e008      	b.n	80024b0 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	7819      	ldrb	r1, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fca4 	bl	8001df8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f6ff ad82 	blt.w	8001fc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3724      	adds	r7, #36	; 0x24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	ffff8080 	.word	0xffff8080
 80024d0:	ffff80c0 	.word	0xffff80c0

080024d4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	4613      	mov	r3, r2
 80024e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	015b      	lsls	r3, r3, #5
 80024fa:	3328      	adds	r3, #40	; 0x28
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e006      	b.n	8002512 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002504:	897b      	ldrh	r3, [r7, #10]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2200      	movs	r2, #0
 800251c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	b29a      	uxth	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	80da      	strh	r2, [r3, #6]
 8002526:	e00b      	b.n	8002540 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2201      	movs	r2, #1
 800252c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	b29a      	uxth	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	b29a      	uxth	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002572:	b29b      	uxth	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002586:	b29b      	uxth	r3, r3
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d141      	bne.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d131      	bne.n	8002624 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c0:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c6:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d8:	4a41      	ldr	r2, [pc, #260]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2232      	movs	r2, #50	; 0x32
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	4a3f      	ldr	r2, [pc, #252]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f6:	e002      	b.n	80025fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260a:	d102      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f2      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d158      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e057      	b.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002624:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262a:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002634:	e04d      	b.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d141      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d131      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002652:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002664:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2232      	movs	r2, #50	; 0x32
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	0c9b      	lsrs	r3, r3, #18
 800267e:	3301      	adds	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002682:	e002      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3b01      	subs	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d102      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f2      	bne.n	8002684 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	d112      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e011      	b.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026c0:	e007      	b.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40007000 	.word	0x40007000
 80026e4:	20000118 	.word	0x20000118
 80026e8:	431bde83 	.word	0x431bde83

080026ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e308      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4ba3      	ldr	r3, [pc, #652]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4ba0      	ldr	r3, [pc, #640]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x3e>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d002      	beq.n	8002730 <HAL_RCC_OscConfig+0x44>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d05b      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d157      	bne.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2e3      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x74>
 8002752:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a90      	ldr	r2, [pc, #576]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x98>
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a8a      	ldr	r2, [pc, #552]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002784:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a83      	ldr	r2, [pc, #524]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b81      	ldr	r3, [pc, #516]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a80      	ldr	r2, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fd ffa2 	bl	80006ec <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fd ff9e 	bl	80006ec <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2a8      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xc0>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fd ff8e 	bl	80006ec <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fd ff8a 	bl	80006ec <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e294      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d102      	bne.n	8002822 <HAL_RCC_OscConfig+0x136>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d002      	beq.n	8002828 <HAL_RCC_OscConfig+0x13c>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11f      	bne.n	8002868 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x154>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e267      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4952      	ldr	r1, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002854:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCC_OscConfig+0x2b0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fefb 	bl	8000654 <HAL_InitTick>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d043      	beq.n	80028ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e253      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b49      	ldr	r3, [pc, #292]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fd ff36 	bl	80006ec <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002884:	f7fd ff32 	bl	80006ec <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e23c      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	4939      	ldr	r1, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	e01a      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a36      	ldr	r2, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fd ff12 	bl	80006ec <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fd ff0e 	bl	80006ec <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e218      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1e0>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01c      	beq.n	800293c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fd feeb 	bl	80006ec <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7fd fee7 	bl	80006ec <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1f1      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ef      	beq.n	800291a <HAL_RCC_OscConfig+0x22e>
 800293a:	e01b      	b.n	8002974 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002942:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fd fece 	bl	80006ec <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7fd feca 	bl	80006ec <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e1d4      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80ab 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2b4>
 8002992:	2301      	movs	r3, #1
 8002994:	e005      	b.n	80029a2 <HAL_RCC_OscConfig+0x2b6>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	20000000 	.word	0x20000000
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4baf      	ldr	r3, [pc, #700]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4aae      	ldr	r2, [pc, #696]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
 80029b2:	4bac      	ldr	r3, [pc, #688]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	4ba9      	ldr	r3, [pc, #676]	; (8002c68 <HAL_RCC_OscConfig+0x57c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ce:	4ba6      	ldr	r3, [pc, #664]	; (8002c68 <HAL_RCC_OscConfig+0x57c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4aa5      	ldr	r2, [pc, #660]	; (8002c68 <HAL_RCC_OscConfig+0x57c>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fd fe87 	bl	80006ec <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fd fe83 	bl	80006ec <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e18d      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_RCC_OscConfig+0x57c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d108      	bne.n	8002a1a <HAL_RCC_OscConfig+0x32e>
 8002a08:	4b96      	ldr	r3, [pc, #600]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	4a95      	ldr	r2, [pc, #596]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a18:	e024      	b.n	8002a64 <HAL_RCC_OscConfig+0x378>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d110      	bne.n	8002a44 <HAL_RCC_OscConfig+0x358>
 8002a22:	4b90      	ldr	r3, [pc, #576]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	4a8e      	ldr	r2, [pc, #568]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	4a8a      	ldr	r2, [pc, #552]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a42:	e00f      	b.n	8002a64 <HAL_RCC_OscConfig+0x378>
 8002a44:	4b87      	ldr	r3, [pc, #540]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a86      	ldr	r2, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	4b83      	ldr	r3, [pc, #524]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a82      	ldr	r2, [pc, #520]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fd fe3e 	bl	80006ec <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fd fe3a 	bl	80006ec <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e142      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ed      	beq.n	8002a74 <HAL_RCC_OscConfig+0x388>
 8002a98:	e015      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fd fe27 	bl	80006ec <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fd fe23 	bl	80006ec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e12b      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ed      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d03c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aec:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af2:	4a5c      	ldr	r2, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fd fdf6 	bl	80006ec <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b04:	f7fd fdf2 	bl	80006ec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0fc      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b16:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ef      	beq.n	8002b04 <HAL_RCC_OscConfig+0x418>
 8002b24:	e01b      	b.n	8002b5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b26:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fd fdd9 	bl	80006ec <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3e:	f7fd fdd5 	bl	80006ec <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0df      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b50:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ef      	bne.n	8002b3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80d3 	beq.w	8002d0e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b68:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	f000 808d 	beq.w	8002c90 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d15a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a38      	ldr	r2, [pc, #224]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fd fdaf 	bl	80006ec <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fd fdab 	bl	80006ec <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0b5      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_OscConfig+0x580>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6a11      	ldr	r1, [r2, #32]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002bca:	0212      	lsls	r2, r2, #8
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bde:	0852      	lsrs	r2, r2, #1
 8002be0:	3a01      	subs	r2, #1
 8002be2:	0652      	lsls	r2, r2, #25
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bea:	06d2      	lsls	r2, r2, #27
 8002bec:	430a      	orrs	r2, r1
 8002bee:	491d      	ldr	r1, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fd fd6e 	bl	80006ec <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fd fd6a 	bl	80006ec <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e074      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x528>
 8002c32:	e06c      	b.n	8002d0e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_RCC_OscConfig+0x578>)
 8002c52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fd fd46 	bl	80006ec <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	e00e      	b.n	8002c82 <HAL_RCC_OscConfig+0x596>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fd fd3c 	bl	80006ec <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e046      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x62c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x584>
 8002c8e:	e03e      	b.n	8002d0e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e039      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_OscConfig+0x62c>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d12c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d123      	bne.n	8002d0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d11b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d113      	bne.n	8002d0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	3b01      	subs	r3, #1
 8002d04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e11e      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b91      	ldr	r3, [pc, #580]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 020f 	bic.w	r2, r3, #15
 8002d4a:	498c      	ldr	r1, [pc, #560]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b8a      	ldr	r3, [pc, #552]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e106      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d073      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d129      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d78:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0f4      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d88:	f000 f99e 	bl	80030c8 <RCC_GetSysClockFreqFromPLLSource>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_RCC_ClockConfig+0x268>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d93f      	bls.n	8002e16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d96:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d033      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d12f      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dbe:	4a70      	ldr	r2, [pc, #448]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e024      	b.n	8002e16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0c6      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0be      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002df4:	f000 f8ce 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4a61      	ldr	r2, [pc, #388]	; (8002f84 <HAL_RCC_ClockConfig+0x268>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d909      	bls.n	8002e16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0a:	4a5d      	ldr	r2, [pc, #372]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4957      	ldr	r1, [pc, #348]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fd fc60 	bl	80006ec <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fd fc5c 	bl	80006ec <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e095      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d023      	beq.n	8002eac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e88:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e90:	4a3b      	ldr	r2, [pc, #236]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4936      	ldr	r1, [pc, #216]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ebc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d21d      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 020f 	bic.w	r2, r3, #15
 8002ed4:	4929      	ldr	r1, [pc, #164]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002edc:	f7fd fc06 	bl	80006ec <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee4:	f7fd fc02 	bl	80006ec <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e03b      	b.n	8002f72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x260>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1ed      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4917      	ldr	r1, [pc, #92]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490f      	ldr	r1, [pc, #60]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f46:	f000 f825 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_ClockConfig+0x264>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <HAL_RCC_ClockConfig+0x26c>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x270>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fb72 	bl	8000654 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
 8002f84:	04c4b400 	.word	0x04c4b400
 8002f88:	0800d024 	.word	0x0800d024
 8002f8c:	20000118 	.word	0x20000118
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d102      	bne.n	8002fac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e047      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fac:	4b27      	ldr	r3, [pc, #156]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e03e      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d136      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe8:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	4a16      	ldr	r2, [pc, #88]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff2:	68d2      	ldr	r2, [r2, #12]
 8002ff4:	0a12      	lsrs	r2, r2, #8
 8002ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	617b      	str	r3, [r7, #20]
      break;
 8003000:	e00c      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 800300c:	68d2      	ldr	r2, [r2, #12]
 800300e:	0a12      	lsrs	r2, r2, #8
 8003010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
      break;
 800301a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_GetSysClockFreq+0xb8>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0e5b      	lsrs	r3, r3, #25
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e001      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800303c:	693b      	ldr	r3, [r7, #16]
}
 800303e:	4618      	mov	r0, r3
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	00f42400 	.word	0x00f42400
 8003054:	016e3600 	.word	0x016e3600

08003058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_GetHCLKFreq+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000118 	.word	0x20000118

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003074:	f7ff fff0 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8003078:	4601      	mov	r1, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	0800d034 	.word	0x0800d034

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030a0:	f7ff ffda 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 80030a4:	4601      	mov	r1, r0
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	0800d034 	.word	0x0800d034

080030c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d10c      	bne.n	8003106 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ec:	4a17      	ldr	r2, [pc, #92]	; (800314c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030f6:	68d2      	ldr	r2, [r2, #12]
 80030f8:	0a12      	lsrs	r2, r2, #8
 80030fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
    break;
 8003104:	e00c      	b.n	8003120 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	0a12      	lsrs	r2, r2, #8
 8003114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    break;
 800311e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0e5b      	lsrs	r3, r3, #25
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800313a:	687b      	ldr	r3, [r7, #4]
}
 800313c:	4618      	mov	r0, r3
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	016e3600 	.word	0x016e3600
 8003150:	00f42400 	.word	0x00f42400

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800315c:	2300      	movs	r3, #0
 800315e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003160:	2300      	movs	r3, #0
 8003162:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8098 	beq.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a3f      	ldr	r2, [pc, #252]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319e:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a39      	ldr	r2, [pc, #228]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031aa:	f7fd fa9f 	bl	80006ec <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031b0:	e009      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fd fa9b 	bl	80006ec <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d902      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	74fb      	strb	r3, [r7, #19]
        break;
 80031c4:	e005      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c6:	4b30      	ldr	r3, [pc, #192]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ef      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d159      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01e      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d019      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fd fa5b 	bl	80006ec <HAL_GetTick>
 8003236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003238:	e00b      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fa57 	bl	80006ec <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d902      	bls.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	74fb      	strb	r3, [r7, #19]
            break;
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ec      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800327c:	e008      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	74bb      	strb	r3, [r7, #18]
 8003282:	e005      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003290:	7c7b      	ldrb	r3, [r7, #17]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4ba6      	ldr	r3, [pc, #664]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4aa5      	ldr	r2, [pc, #660]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ae:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 0203 	bic.w	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	499c      	ldr	r1, [pc, #624]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d0:	4b97      	ldr	r3, [pc, #604]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 020c 	bic.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4994      	ldr	r1, [pc, #592]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032f2:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	498b      	ldr	r1, [pc, #556]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003314:	4b86      	ldr	r3, [pc, #536]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	4983      	ldr	r1, [pc, #524]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003336:	4b7e      	ldr	r3, [pc, #504]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	497a      	ldr	r1, [pc, #488]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003358:	4b75      	ldr	r3, [pc, #468]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	4972      	ldr	r1, [pc, #456]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337a:	4b6d      	ldr	r3, [pc, #436]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4969      	ldr	r1, [pc, #420]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339c:	4b64      	ldr	r3, [pc, #400]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4961      	ldr	r1, [pc, #388]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033be:	4b5c      	ldr	r3, [pc, #368]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4958      	ldr	r1, [pc, #352]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	4950      	ldr	r1, [pc, #320]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d105      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a4a      	ldr	r2, [pc, #296]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	4942      	ldr	r1, [pc, #264]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a3c      	ldr	r2, [pc, #240]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003442:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003450:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346e:	d105      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	4926      	ldr	r1, [pc, #152]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a6:	d105      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4918      	ldr	r1, [pc, #96]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003524:	7cbb      	ldrb	r3, [r7, #18]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e01d      	b.n	8003582 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f007 fc90 	bl	800ae80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fccc 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_TIM_Base_Start_IT+0x50>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d00b      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x42>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	00010007 	.word	0x00010007

080035e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e01d      	b.n	800362e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f815 	bl	8003636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 fc76 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f878 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <HAL_TIM_PWM_Start+0x98>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_TIM_PWM_Start+0x4a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_TIM_PWM_Start+0x9c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIM_PWM_Start+0x4a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_TIM_PWM_Start+0xa0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIM_PWM_Start+0x4a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_TIM_PWM_Start+0xa4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIM_PWM_Start+0x4a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <HAL_TIM_PWM_Start+0xa8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_Start+0x4e>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_TIM_PWM_Start+0x50>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_TIM_PWM_Start+0xac>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d00b      	beq.n	80036da <HAL_TIM_PWM_Start+0x8e>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d007      	beq.n	80036da <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	00010007 	.word	0x00010007

080036fc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e02d      	b.n	800376c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f825 	bl	8003774 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fbe7 	bl	8003f10 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0208 	bic.w	r2, r2, #8
 8003750:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0202 	mvn.w	r2, #2
 80037b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fb66 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fb58 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb69 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0204 	mvn.w	r2, #4
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fb3c 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb2e 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb3f 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b08      	cmp	r3, #8
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0208 	mvn.w	r2, #8
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2204      	movs	r2, #4
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fb12 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fb04 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb15 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b10      	cmp	r3, #16
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0210 	mvn.w	r2, #16
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2208      	movs	r2, #8
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fae8 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fada 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 faeb 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0201 	mvn.w	r2, #1
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fab4 	bl	8003e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b80      	cmp	r3, #128	; 0x80
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d107      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f001 f86c 	bl	8004a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d10e      	bne.n	8003966 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d107      	bne.n	8003966 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800395e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 f85f 	bl	8004a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d10e      	bne.n	8003992 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d107      	bne.n	8003992 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800398a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa99 	bl	8003ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b20      	cmp	r3, #32
 800399e:	d10e      	bne.n	80039be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d107      	bne.n	80039be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0220 	mvn.w	r2, #32
 80039b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f001 f81f 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039cc:	d10f      	bne.n	80039ee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f001 f825 	bl	8004a38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039fc:	d10f      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 f817 	bl	8004a4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2c:	d10f      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d107      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f001 f809 	bl	8004a60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5c:	d10f      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fffb 	bl	8004a74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e105      	b.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x226>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b14      	cmp	r3, #20
 8003ab6:	f200 80f0 	bhi.w	8003c9a <HAL_TIM_PWM_ConfigChannel+0x212>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003c9b 	.word	0x08003c9b
 8003ac8:	08003c9b 	.word	0x08003c9b
 8003acc:	08003c9b 	.word	0x08003c9b
 8003ad0:	08003b55 	.word	0x08003b55
 8003ad4:	08003c9b 	.word	0x08003c9b
 8003ad8:	08003c9b 	.word	0x08003c9b
 8003adc:	08003c9b 	.word	0x08003c9b
 8003ae0:	08003b97 	.word	0x08003b97
 8003ae4:	08003c9b 	.word	0x08003c9b
 8003ae8:	08003c9b 	.word	0x08003c9b
 8003aec:	08003c9b 	.word	0x08003c9b
 8003af0:	08003bd7 	.word	0x08003bd7
 8003af4:	08003c9b 	.word	0x08003c9b
 8003af8:	08003c9b 	.word	0x08003c9b
 8003afc:	08003c9b 	.word	0x08003c9b
 8003b00:	08003c19 	.word	0x08003c19
 8003b04:	08003c9b 	.word	0x08003c9b
 8003b08:	08003c9b 	.word	0x08003c9b
 8003b0c:	08003c9b 	.word	0x08003c9b
 8003b10:	08003c59 	.word	0x08003c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa88 	bl	8004030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	619a      	str	r2, [r3, #24]
      break;
 8003b52:	e0a3      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 faf8 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      break;
 8003b94:	e082      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fb61 	bl	8004264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0208 	orr.w	r2, r2, #8
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
      break;
 8003bd4:	e062      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fbc9 	bl	8004374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	61da      	str	r2, [r3, #28]
      break;
 8003c16:	e041      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc32 	bl	8004488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0208 	orr.w	r2, r2, #8
 8003c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003c56:	e021      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fc76 	bl	8004550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003c9a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop

08003cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIM_ConfigClockSource+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e0c3      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x1a0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d038      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0xc6>
 8003d0c:	2b70      	cmp	r3, #112	; 0x70
 8003d0e:	d815      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x84>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	f000 808e 	beq.w	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d16:	2b30      	cmp	r3, #48	; 0x30
 8003d18:	d809      	bhi.n	8003d2e <HAL_TIM_ConfigClockSource+0x76>
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	f000 8089 	beq.w	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	f000 8086 	beq.w	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8083 	beq.w	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d2c:	e08b      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003d2e:	2b50      	cmp	r3, #80	; 0x50
 8003d30:	d04f      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d32:	2b60      	cmp	r3, #96	; 0x60
 8003d34:	d05d      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d06b      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8003d3a:	e084      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003d3c:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d077      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d42:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d809      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0xa4>
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4c:	d02e      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0xf4>
 8003d4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d52:	d06e      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d074      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8003d5a:	e074      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003d5c:	4a41      	ldr	r2, [pc, #260]	; (8003e64 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d067      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d62:	4a40      	ldr	r2, [pc, #256]	; (8003e64 <HAL_TIM_ConfigClockSource+0x1ac>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d803      	bhi.n	8003d70 <HAL_TIM_ConfigClockSource+0xb8>
 8003d68:	4a3f      	ldr	r2, [pc, #252]	; (8003e68 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d061      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003d6e:	e06a      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003d70:	4a3e      	ldr	r2, [pc, #248]	; (8003e6c <HAL_TIM_ConfigClockSource+0x1b4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d05d      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
 8003d76:	4a3e      	ldr	r2, [pc, #248]	; (8003e70 <HAL_TIM_ConfigClockSource+0x1b8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d05a      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003d7c:	e063      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f000 fcc1 	bl	8004714 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	609a      	str	r2, [r3, #8]
      break;
 8003daa:	e04c      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f000 fcaa 	bl	8004714 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dce:	609a      	str	r2, [r3, #8]
      break;
 8003dd0:	e039      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f000 fc1c 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2150      	movs	r1, #80	; 0x50
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc75 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003df0:	e029      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 fc3b 	bl	800467a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2160      	movs	r1, #96	; 0x60
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fc65 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003e10:	e019      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f000 fbfc 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fc55 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003e30:	e009      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f000 fc4c 	bl	80046da <TIM_ITRx_SetConfig>
      break;
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8003e44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	00100020 	.word	0x00100020
 8003e64:	00100040 	.word	0x00100040
 8003e68:	00100030 	.word	0x00100030
 8003e6c:	00100060 	.word	0x00100060
 8003e70:	00100070 	.word	0x00100070

08003e74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ffe8 	bl	8003ed8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <TIM_Base_SetConfig+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d00b      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a39      	ldr	r2, [pc, #228]	; (8004018 <TIM_Base_SetConfig+0x108>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a38      	ldr	r2, [pc, #224]	; (800401c <TIM_Base_SetConfig+0x10c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a37      	ldr	r2, [pc, #220]	; (8004020 <TIM_Base_SetConfig+0x110>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d108      	bne.n	8003f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <TIM_Base_SetConfig+0x104>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01b      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d017      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <TIM_Base_SetConfig+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <TIM_Base_SetConfig+0x10c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <TIM_Base_SetConfig+0x110>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <TIM_Base_SetConfig+0x104>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_Base_SetConfig+0xe8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <TIM_Base_SetConfig+0x110>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0xe8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0xe8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <TIM_Base_SetConfig+0x118>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0xe8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0e      	ldr	r2, [pc, #56]	; (800402c <TIM_Base_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d103      	bne.n	8004000 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	615a      	str	r2, [r3, #20]
}
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0302 	bic.w	r3, r3, #2
 800407c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2c      	ldr	r2, [pc, #176]	; (800413c <TIM_OC1_SetConfig+0x10c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <TIM_OC1_SetConfig+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <TIM_OC1_SetConfig+0x110>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_OC1_SetConfig+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <TIM_OC1_SetConfig+0x114>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC1_SetConfig+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a29      	ldr	r2, [pc, #164]	; (8004148 <TIM_OC1_SetConfig+0x118>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC1_SetConfig+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a28      	ldr	r2, [pc, #160]	; (800414c <TIM_OC1_SetConfig+0x11c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10c      	bne.n	80040ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0308 	bic.w	r3, r3, #8
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <TIM_OC1_SetConfig+0x10c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00f      	beq.n	80040f2 <TIM_OC1_SetConfig+0xc2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <TIM_OC1_SetConfig+0x110>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <TIM_OC1_SetConfig+0xc2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a19      	ldr	r2, [pc, #100]	; (8004144 <TIM_OC1_SetConfig+0x114>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <TIM_OC1_SetConfig+0xc2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <TIM_OC1_SetConfig+0x118>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_OC1_SetConfig+0xc2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a17      	ldr	r2, [pc, #92]	; (800414c <TIM_OC1_SetConfig+0x11c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40013400 	.word	0x40013400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0210 	bic.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0320 	bic.w	r3, r3, #32
 800419e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a28      	ldr	r2, [pc, #160]	; (8004250 <TIM_OC2_SetConfig+0x100>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC2_SetConfig+0x6c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <TIM_OC2_SetConfig+0x104>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10d      	bne.n	80041d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <TIM_OC2_SetConfig+0x100>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00f      	beq.n	8004200 <TIM_OC2_SetConfig+0xb0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <TIM_OC2_SetConfig+0x104>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_OC2_SetConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <TIM_OC2_SetConfig+0x108>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC2_SetConfig+0xb0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1a      	ldr	r2, [pc, #104]	; (800425c <TIM_OC2_SetConfig+0x10c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC2_SetConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a19      	ldr	r2, [pc, #100]	; (8004260 <TIM_OC2_SetConfig+0x110>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d113      	bne.n	8004228 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40013400 	.word	0x40013400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <TIM_OC3_SetConfig+0xfc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_OC3_SetConfig+0x6a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <TIM_OC3_SetConfig+0x100>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10d      	bne.n	80042ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <TIM_OC3_SetConfig+0xfc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_OC3_SetConfig+0xae>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <TIM_OC3_SetConfig+0x100>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_OC3_SetConfig+0xae>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <TIM_OC3_SetConfig+0x104>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_OC3_SetConfig+0xae>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <TIM_OC3_SetConfig+0x108>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0xae>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <TIM_OC3_SetConfig+0x10c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800

08004374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a28      	ldr	r2, [pc, #160]	; (8004474 <TIM_OC4_SetConfig+0x100>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC4_SetConfig+0x6c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <TIM_OC4_SetConfig+0x104>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10d      	bne.n	80043fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	031b      	lsls	r3, r3, #12
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <TIM_OC4_SetConfig+0x100>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_OC4_SetConfig+0xb0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <TIM_OC4_SetConfig+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00b      	beq.n	8004424 <TIM_OC4_SetConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1b      	ldr	r2, [pc, #108]	; (800447c <TIM_OC4_SetConfig+0x108>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_OC4_SetConfig+0xb0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <TIM_OC4_SetConfig+0x10c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC4_SetConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a19      	ldr	r2, [pc, #100]	; (8004484 <TIM_OC4_SetConfig+0x110>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d113      	bne.n	800444c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004432:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40013400 	.word	0x40013400
 800447c:	40014000 	.word	0x40014000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800

08004488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <TIM_OC5_SetConfig+0xb4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_OC5_SetConfig+0x7a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a16      	ldr	r2, [pc, #88]	; (8004540 <TIM_OC5_SetConfig+0xb8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_OC5_SetConfig+0x7a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	; (8004544 <TIM_OC5_SetConfig+0xbc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_OC5_SetConfig+0x7a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <TIM_OC5_SetConfig+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC5_SetConfig+0x7a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <TIM_OC5_SetConfig+0xc4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d109      	bne.n	8004516 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40013400 	.word	0x40013400
 8004544:	40014000 	.word	0x40014000
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800

08004550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_OC6_SetConfig+0xb8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00f      	beq.n	80045cc <TIM_OC6_SetConfig+0x7c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <TIM_OC6_SetConfig+0xbc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <TIM_OC6_SetConfig+0x7c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a16      	ldr	r2, [pc, #88]	; (8004610 <TIM_OC6_SetConfig+0xc0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <TIM_OC6_SetConfig+0x7c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <TIM_OC6_SetConfig+0xc4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC6_SetConfig+0x7c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <TIM_OC6_SetConfig+0xc8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d109      	bne.n	80045e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 030a 	bic.w	r3, r3, #10
 8004658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b087      	sub	sp, #28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0210 	bic.w	r2, r3, #16
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	031b      	lsls	r3, r3, #12
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f043 0307 	orr.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	431a      	orrs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2204      	movs	r2, #4
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f968 	bl	8004a88 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_TIMEx_PWMN_Start+0x5c>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d00b      	beq.n	80047f2 <HAL_TIMEx_PWMN_Start+0x52>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d007      	beq.n	80047f2 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010007 	.word	0x00010007

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e047      	b.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d108      	bne.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400

080048bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e087      	b.n	80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d106      	bne.n	8004974 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d126      	bne.n	80049d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	051b      	lsls	r3, r3, #20
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d106      	bne.n	80049d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	401a      	ands	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1a      	ldr	r2, [r3, #32]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e042      	b.n	8004b6a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f006 faa6 	bl	800b048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb0b 	bl	8005130 <UART_SetConfig>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e022      	b.n	8004b6a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f001 fcb9 	bl	80064a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f001 fd40 	bl	80065e8 <UART_CheckIdleState>
 8004b68:	4603      	mov	r3, r0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	f040 80bc 	bne.w	8004d06 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_Receive_IT+0x26>
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0b4      	b.n	8004d08 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_UART_Receive_IT+0x38>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0ad      	b.n	8004d08 <HAL_UART_Receive_IT+0x194>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	88fa      	ldrh	r2, [r7, #6]
 8004bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_UART_Receive_IT+0x84>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_UART_Receive_IT+0x7a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004be8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bec:	e02d      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bf6:	e028      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_UART_Receive_IT+0xa8>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_UART_Receive_IT+0x9e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c10:	e01b      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	227f      	movs	r2, #127	; 0x7f
 8004c16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c1a:	e016      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c24:	d10d      	bne.n	8004c42 <HAL_UART_Receive_IT+0xce>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <HAL_UART_Receive_IT+0xc4>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	227f      	movs	r2, #127	; 0x7f
 8004c32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c36:	e008      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	223f      	movs	r2, #63	; 0x3f
 8004c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c40:	e003      	b.n	8004c4a <HAL_UART_Receive_IT+0xd6>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2222      	movs	r2, #34	; 0x22
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c72:	d12a      	bne.n	8004cca <HAL_UART_Receive_IT+0x156>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d324      	bcc.n	8004cca <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d107      	bne.n	8004c9a <HAL_UART_Receive_IT+0x126>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_UART_Receive_IT+0x1a0>)
 8004c96:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c98:	e002      	b.n	8004ca0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_UART_Receive_IT+0x1a4>)
 8004c9e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	e01b      	b.n	8004d02 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	d107      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x170>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <HAL_UART_Receive_IT+0x1a8>)
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ce2:	e002      	b.n	8004cea <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_UART_Receive_IT+0x1ac>)
 8004ce8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004d00:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	08006b3d 	.word	0x08006b3d
 8004d18:	08006a35 	.word	0x08006a35
 8004d1c:	08006989 	.word	0x08006989
 8004d20:	080068df 	.word	0x080068df

08004d24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d168      	bne.n	8004e0e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Transmit_DMA+0x24>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e061      	b.n	8004e10 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Transmit_DMA+0x36>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e05a      	b.n	8004e10 <HAL_UART_Transmit_DMA+0xec>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2221      	movs	r2, #33	; 0x21
 8004d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02c      	beq.n	8004dea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_UART_Transmit_DMA+0xf4>)
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_UART_Transmit_DMA+0xf8>)
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da4:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <HAL_UART_Transmit_DMA+0xfc>)
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	4619      	mov	r1, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3328      	adds	r3, #40	; 0x28
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	f7fb ffda 	bl	8000d7c <HAL_DMA_Start_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e012      	b.n	8004e10 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e08:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	0800678f 	.word	0x0800678f
 8004e1c:	080067e3 	.word	0x080067e3
 8004e20:	080067ff 	.word	0x080067ff

08004e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d118      	bne.n	8004e84 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 812e 	beq.w	80050d6 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
      }
      return;
 8004e82:	e128      	b.n	80050d6 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80d1 	beq.w	800502e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <HAL_UART_IRQHandler+0x2c4>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80c6 	beq.w	800502e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_UART_IRQHandler+0xaa>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_UART_IRQHandler+0xd6>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_UART_IRQHandler+0x102>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2204      	movs	r2, #4
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_UART_IRQHandler+0x2c4>)
 8004f3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f043 0208 	orr.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80b9 	beq.w	80050da <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d004      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d031      	beq.n	800501a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fbc6 	bl	8006748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d123      	bne.n	8005012 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe6:	4a41      	ldr	r2, [pc, #260]	; (80050ec <HAL_UART_IRQHandler+0x2c8>)
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb ff3f 	bl	8000e72 <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d017      	beq.n	800502a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00f      	b.n	800502a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f884 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e00b      	b.n	800502a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f880 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e007      	b.n	800502a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f87c 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005028:	e057      	b.n	80050da <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502a:	bf00      	nop
    return;
 800502c:	e055      	b.n	80050da <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <HAL_UART_IRQHandler+0x230>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800504a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fdf9 	bl	8006c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005052:	e045      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	2b00      	cmp	r3, #0
 8005078:	d031      	beq.n	80050de <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
    }
    return;
 8005082:	e02c      	b.n	80050de <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_UART_IRQHandler+0x27c>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fc06 	bl	80068aa <UART_EndTransmit_IT>
    return;
 800509e:	e01f      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_UART_IRQHandler+0x298>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f001 fdd9 	bl	8006c6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ba:	e011      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da09      	bge.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fdc3 	bl	8006c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d2:	bf00      	nop
 80050d4:	e004      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
      return;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
    return;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <HAL_UART_IRQHandler+0x2bc>
    return;
 80050de:	bf00      	nop
  }
}
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	10000001 	.word	0x10000001
 80050ec:	0800687f 	.word	0x0800687f

080050f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	0000      	movs	r0, r0
	...

08005130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4313      	orrs	r3, r2
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4313      	orrs	r3, r2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4ba4      	ldr	r3, [pc, #656]	; (8005400 <UART_SetConfig+0x2d0>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005178:	430b      	orrs	r3, r1
 800517a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a99      	ldr	r2, [pc, #612]	; (8005404 <UART_SetConfig+0x2d4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	4313      	orrs	r3, r2
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	f023 010f 	bic.w	r1, r3, #15
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a8a      	ldr	r2, [pc, #552]	; (8005408 <UART_SetConfig+0x2d8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d126      	bne.n	8005232 <UART_SetConfig+0x102>
 80051e4:	4b89      	ldr	r3, [pc, #548]	; (800540c <UART_SetConfig+0x2dc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d81a      	bhi.n	8005228 <UART_SetConfig+0xf8>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0xc8>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005209 	.word	0x08005209
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005211 	.word	0x08005211
 8005204:	08005221 	.word	0x08005221
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e0d6      	b.n	80053be <UART_SetConfig+0x28e>
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e0d2      	b.n	80053be <UART_SetConfig+0x28e>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e0ce      	b.n	80053be <UART_SetConfig+0x28e>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e0ca      	b.n	80053be <UART_SetConfig+0x28e>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	bf00      	nop
 8005230:	e0c5      	b.n	80053be <UART_SetConfig+0x28e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a76      	ldr	r2, [pc, #472]	; (8005410 <UART_SetConfig+0x2e0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d138      	bne.n	80052ae <UART_SetConfig+0x17e>
 800523c:	4b73      	ldr	r3, [pc, #460]	; (800540c <UART_SetConfig+0x2dc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d82c      	bhi.n	80052a4 <UART_SetConfig+0x174>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x120>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005285 	.word	0x08005285
 8005254:	080052a5 	.word	0x080052a5
 8005258:	080052a5 	.word	0x080052a5
 800525c:	080052a5 	.word	0x080052a5
 8005260:	08005295 	.word	0x08005295
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052a5 	.word	0x080052a5
 8005270:	0800528d 	.word	0x0800528d
 8005274:	080052a5 	.word	0x080052a5
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052a5 	.word	0x080052a5
 8005280:	0800529d 	.word	0x0800529d
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e098      	b.n	80053be <UART_SetConfig+0x28e>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e094      	b.n	80053be <UART_SetConfig+0x28e>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e090      	b.n	80053be <UART_SetConfig+0x28e>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e08c      	b.n	80053be <UART_SetConfig+0x28e>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	bf00      	nop
 80052ac:	e087      	b.n	80053be <UART_SetConfig+0x28e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a58      	ldr	r2, [pc, #352]	; (8005414 <UART_SetConfig+0x2e4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d125      	bne.n	8005304 <UART_SetConfig+0x1d4>
 80052b8:	4b54      	ldr	r3, [pc, #336]	; (800540c <UART_SetConfig+0x2dc>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d011      	beq.n	80052ea <UART_SetConfig+0x1ba>
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d802      	bhi.n	80052d0 <UART_SetConfig+0x1a0>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <UART_SetConfig+0x1aa>
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x1ca>
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d006      	beq.n	80052e2 <UART_SetConfig+0x1b2>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d00c      	beq.n	80052f2 <UART_SetConfig+0x1c2>
 80052d8:	e00f      	b.n	80052fa <UART_SetConfig+0x1ca>
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e0:	e06d      	b.n	80053be <UART_SetConfig+0x28e>
 80052e2:	2302      	movs	r3, #2
 80052e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e8:	e069      	b.n	80053be <UART_SetConfig+0x28e>
 80052ea:	2304      	movs	r3, #4
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f0:	e065      	b.n	80053be <UART_SetConfig+0x28e>
 80052f2:	2308      	movs	r3, #8
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f8:	e061      	b.n	80053be <UART_SetConfig+0x28e>
 80052fa:	2310      	movs	r3, #16
 80052fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005300:	bf00      	nop
 8005302:	e05c      	b.n	80053be <UART_SetConfig+0x28e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a43      	ldr	r2, [pc, #268]	; (8005418 <UART_SetConfig+0x2e8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d125      	bne.n	800535a <UART_SetConfig+0x22a>
 800530e:	4b3f      	ldr	r3, [pc, #252]	; (800540c <UART_SetConfig+0x2dc>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d011      	beq.n	8005340 <UART_SetConfig+0x210>
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d802      	bhi.n	8005326 <UART_SetConfig+0x1f6>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <UART_SetConfig+0x200>
 8005324:	e014      	b.n	8005350 <UART_SetConfig+0x220>
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d006      	beq.n	8005338 <UART_SetConfig+0x208>
 800532a:	2bc0      	cmp	r3, #192	; 0xc0
 800532c:	d00c      	beq.n	8005348 <UART_SetConfig+0x218>
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x220>
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e042      	b.n	80053be <UART_SetConfig+0x28e>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e03e      	b.n	80053be <UART_SetConfig+0x28e>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e03a      	b.n	80053be <UART_SetConfig+0x28e>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e036      	b.n	80053be <UART_SetConfig+0x28e>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	bf00      	nop
 8005358:	e031      	b.n	80053be <UART_SetConfig+0x28e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a29      	ldr	r2, [pc, #164]	; (8005404 <UART_SetConfig+0x2d4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d129      	bne.n	80053b8 <UART_SetConfig+0x288>
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <UART_SetConfig+0x2dc>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d014      	beq.n	800539e <UART_SetConfig+0x26e>
 8005374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005378:	d802      	bhi.n	8005380 <UART_SetConfig+0x250>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <UART_SetConfig+0x25e>
 800537e:	e016      	b.n	80053ae <UART_SetConfig+0x27e>
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005384:	d007      	beq.n	8005396 <UART_SetConfig+0x266>
 8005386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800538a:	d00c      	beq.n	80053a6 <UART_SetConfig+0x276>
 800538c:	e00f      	b.n	80053ae <UART_SetConfig+0x27e>
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005394:	e013      	b.n	80053be <UART_SetConfig+0x28e>
 8005396:	2302      	movs	r3, #2
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539c:	e00f      	b.n	80053be <UART_SetConfig+0x28e>
 800539e:	2304      	movs	r3, #4
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a4:	e00b      	b.n	80053be <UART_SetConfig+0x28e>
 80053a6:	2308      	movs	r3, #8
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e007      	b.n	80053be <UART_SetConfig+0x28e>
 80053ae:	2310      	movs	r3, #16
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <UART_SetConfig+0x28e>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <UART_SetConfig+0x2d4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	f040 842e 	bne.w	8005c26 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	f200 8169 	bhi.w	80056a6 <UART_SetConfig+0x576>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0x2ac>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	0800541d 	.word	0x0800541d
 80053e0:	080056a7 	.word	0x080056a7
 80053e4:	080054bf 	.word	0x080054bf
 80053e8:	080056a7 	.word	0x080056a7
 80053ec:	08005557 	.word	0x08005557
 80053f0:	080056a7 	.word	0x080056a7
 80053f4:	080056a7 	.word	0x080056a7
 80053f8:	080056a7 	.word	0x080056a7
 80053fc:	080055f9 	.word	0x080055f9
 8005400:	cfff69f3 	.word	0xcfff69f3
 8005404:	40008000 	.word	0x40008000
 8005408:	40013800 	.word	0x40013800
 800540c:	40021000 	.word	0x40021000
 8005410:	40004400 	.word	0x40004400
 8005414:	40004800 	.word	0x40004800
 8005418:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800541c:	f7fd fe28 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d044      	beq.n	80054b4 <UART_SetConfig+0x384>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	d03e      	beq.n	80054b0 <UART_SetConfig+0x380>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b02      	cmp	r3, #2
 8005438:	d038      	beq.n	80054ac <UART_SetConfig+0x37c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b03      	cmp	r3, #3
 8005440:	d032      	beq.n	80054a8 <UART_SetConfig+0x378>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b04      	cmp	r3, #4
 8005448:	d02c      	beq.n	80054a4 <UART_SetConfig+0x374>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b05      	cmp	r3, #5
 8005450:	d026      	beq.n	80054a0 <UART_SetConfig+0x370>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b06      	cmp	r3, #6
 8005458:	d020      	beq.n	800549c <UART_SetConfig+0x36c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b07      	cmp	r3, #7
 8005460:	d01a      	beq.n	8005498 <UART_SetConfig+0x368>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b08      	cmp	r3, #8
 8005468:	d014      	beq.n	8005494 <UART_SetConfig+0x364>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b09      	cmp	r3, #9
 8005470:	d00e      	beq.n	8005490 <UART_SetConfig+0x360>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b0a      	cmp	r3, #10
 8005478:	d008      	beq.n	800548c <UART_SetConfig+0x35c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b0b      	cmp	r3, #11
 8005480:	d102      	bne.n	8005488 <UART_SetConfig+0x358>
 8005482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005486:	e016      	b.n	80054b6 <UART_SetConfig+0x386>
 8005488:	2301      	movs	r3, #1
 800548a:	e014      	b.n	80054b6 <UART_SetConfig+0x386>
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	e012      	b.n	80054b6 <UART_SetConfig+0x386>
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	e010      	b.n	80054b6 <UART_SetConfig+0x386>
 8005494:	2320      	movs	r3, #32
 8005496:	e00e      	b.n	80054b6 <UART_SetConfig+0x386>
 8005498:	2310      	movs	r3, #16
 800549a:	e00c      	b.n	80054b6 <UART_SetConfig+0x386>
 800549c:	230c      	movs	r3, #12
 800549e:	e00a      	b.n	80054b6 <UART_SetConfig+0x386>
 80054a0:	230a      	movs	r3, #10
 80054a2:	e008      	b.n	80054b6 <UART_SetConfig+0x386>
 80054a4:	2308      	movs	r3, #8
 80054a6:	e006      	b.n	80054b6 <UART_SetConfig+0x386>
 80054a8:	2306      	movs	r3, #6
 80054aa:	e004      	b.n	80054b6 <UART_SetConfig+0x386>
 80054ac:	2304      	movs	r3, #4
 80054ae:	e002      	b.n	80054b6 <UART_SetConfig+0x386>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e000      	b.n	80054b6 <UART_SetConfig+0x386>
 80054b4:	2301      	movs	r3, #1
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	617b      	str	r3, [r7, #20]
        break;
 80054bc:	e0f6      	b.n	80056ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d044      	beq.n	8005550 <UART_SetConfig+0x420>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d03e      	beq.n	800554c <UART_SetConfig+0x41c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d038      	beq.n	8005548 <UART_SetConfig+0x418>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d032      	beq.n	8005544 <UART_SetConfig+0x414>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d02c      	beq.n	8005540 <UART_SetConfig+0x410>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d026      	beq.n	800553c <UART_SetConfig+0x40c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d020      	beq.n	8005538 <UART_SetConfig+0x408>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b07      	cmp	r3, #7
 80054fc:	d01a      	beq.n	8005534 <UART_SetConfig+0x404>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b08      	cmp	r3, #8
 8005504:	d014      	beq.n	8005530 <UART_SetConfig+0x400>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b09      	cmp	r3, #9
 800550c:	d00e      	beq.n	800552c <UART_SetConfig+0x3fc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d008      	beq.n	8005528 <UART_SetConfig+0x3f8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b0b      	cmp	r3, #11
 800551c:	d102      	bne.n	8005524 <UART_SetConfig+0x3f4>
 800551e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005522:	e016      	b.n	8005552 <UART_SetConfig+0x422>
 8005524:	4ba1      	ldr	r3, [pc, #644]	; (80057ac <UART_SetConfig+0x67c>)
 8005526:	e014      	b.n	8005552 <UART_SetConfig+0x422>
 8005528:	4ba1      	ldr	r3, [pc, #644]	; (80057b0 <UART_SetConfig+0x680>)
 800552a:	e012      	b.n	8005552 <UART_SetConfig+0x422>
 800552c:	4ba1      	ldr	r3, [pc, #644]	; (80057b4 <UART_SetConfig+0x684>)
 800552e:	e010      	b.n	8005552 <UART_SetConfig+0x422>
 8005530:	4ba1      	ldr	r3, [pc, #644]	; (80057b8 <UART_SetConfig+0x688>)
 8005532:	e00e      	b.n	8005552 <UART_SetConfig+0x422>
 8005534:	4ba1      	ldr	r3, [pc, #644]	; (80057bc <UART_SetConfig+0x68c>)
 8005536:	e00c      	b.n	8005552 <UART_SetConfig+0x422>
 8005538:	4ba1      	ldr	r3, [pc, #644]	; (80057c0 <UART_SetConfig+0x690>)
 800553a:	e00a      	b.n	8005552 <UART_SetConfig+0x422>
 800553c:	4ba1      	ldr	r3, [pc, #644]	; (80057c4 <UART_SetConfig+0x694>)
 800553e:	e008      	b.n	8005552 <UART_SetConfig+0x422>
 8005540:	4ba1      	ldr	r3, [pc, #644]	; (80057c8 <UART_SetConfig+0x698>)
 8005542:	e006      	b.n	8005552 <UART_SetConfig+0x422>
 8005544:	4ba1      	ldr	r3, [pc, #644]	; (80057cc <UART_SetConfig+0x69c>)
 8005546:	e004      	b.n	8005552 <UART_SetConfig+0x422>
 8005548:	4ba1      	ldr	r3, [pc, #644]	; (80057d0 <UART_SetConfig+0x6a0>)
 800554a:	e002      	b.n	8005552 <UART_SetConfig+0x422>
 800554c:	4ba1      	ldr	r3, [pc, #644]	; (80057d4 <UART_SetConfig+0x6a4>)
 800554e:	e000      	b.n	8005552 <UART_SetConfig+0x422>
 8005550:	4b96      	ldr	r3, [pc, #600]	; (80057ac <UART_SetConfig+0x67c>)
 8005552:	617b      	str	r3, [r7, #20]
        break;
 8005554:	e0aa      	b.n	80056ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005556:	f7fd fd1d 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 800555a:	4602      	mov	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d044      	beq.n	80055ee <UART_SetConfig+0x4be>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b01      	cmp	r3, #1
 800556a:	d03e      	beq.n	80055ea <UART_SetConfig+0x4ba>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b02      	cmp	r3, #2
 8005572:	d038      	beq.n	80055e6 <UART_SetConfig+0x4b6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b03      	cmp	r3, #3
 800557a:	d032      	beq.n	80055e2 <UART_SetConfig+0x4b2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b04      	cmp	r3, #4
 8005582:	d02c      	beq.n	80055de <UART_SetConfig+0x4ae>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b05      	cmp	r3, #5
 800558a:	d026      	beq.n	80055da <UART_SetConfig+0x4aa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b06      	cmp	r3, #6
 8005592:	d020      	beq.n	80055d6 <UART_SetConfig+0x4a6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b07      	cmp	r3, #7
 800559a:	d01a      	beq.n	80055d2 <UART_SetConfig+0x4a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d014      	beq.n	80055ce <UART_SetConfig+0x49e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b09      	cmp	r3, #9
 80055aa:	d00e      	beq.n	80055ca <UART_SetConfig+0x49a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	d008      	beq.n	80055c6 <UART_SetConfig+0x496>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b0b      	cmp	r3, #11
 80055ba:	d102      	bne.n	80055c2 <UART_SetConfig+0x492>
 80055bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c0:	e016      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e014      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	e012      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055ca:	2340      	movs	r3, #64	; 0x40
 80055cc:	e010      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055ce:	2320      	movs	r3, #32
 80055d0:	e00e      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055d2:	2310      	movs	r3, #16
 80055d4:	e00c      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055d6:	230c      	movs	r3, #12
 80055d8:	e00a      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055da:	230a      	movs	r3, #10
 80055dc:	e008      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055de:	2308      	movs	r3, #8
 80055e0:	e006      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055e2:	2306      	movs	r3, #6
 80055e4:	e004      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055e6:	2304      	movs	r3, #4
 80055e8:	e002      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e000      	b.n	80055f0 <UART_SetConfig+0x4c0>
 80055ee:	2301      	movs	r3, #1
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
        break;
 80055f6:	e059      	b.n	80056ac <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d04e      	beq.n	800569e <UART_SetConfig+0x56e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b01      	cmp	r3, #1
 8005606:	d047      	beq.n	8005698 <UART_SetConfig+0x568>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b02      	cmp	r3, #2
 800560e:	d040      	beq.n	8005692 <UART_SetConfig+0x562>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b03      	cmp	r3, #3
 8005616:	d039      	beq.n	800568c <UART_SetConfig+0x55c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b04      	cmp	r3, #4
 800561e:	d032      	beq.n	8005686 <UART_SetConfig+0x556>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b05      	cmp	r3, #5
 8005626:	d02b      	beq.n	8005680 <UART_SetConfig+0x550>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b06      	cmp	r3, #6
 800562e:	d024      	beq.n	800567a <UART_SetConfig+0x54a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b07      	cmp	r3, #7
 8005636:	d01d      	beq.n	8005674 <UART_SetConfig+0x544>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b08      	cmp	r3, #8
 800563e:	d016      	beq.n	800566e <UART_SetConfig+0x53e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b09      	cmp	r3, #9
 8005646:	d00f      	beq.n	8005668 <UART_SetConfig+0x538>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b0a      	cmp	r3, #10
 800564e:	d008      	beq.n	8005662 <UART_SetConfig+0x532>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b0b      	cmp	r3, #11
 8005656:	d101      	bne.n	800565c <UART_SetConfig+0x52c>
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	e022      	b.n	80056a2 <UART_SetConfig+0x572>
 800565c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005660:	e01f      	b.n	80056a2 <UART_SetConfig+0x572>
 8005662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005666:	e01c      	b.n	80056a2 <UART_SetConfig+0x572>
 8005668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566c:	e019      	b.n	80056a2 <UART_SetConfig+0x572>
 800566e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005672:	e016      	b.n	80056a2 <UART_SetConfig+0x572>
 8005674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005678:	e013      	b.n	80056a2 <UART_SetConfig+0x572>
 800567a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800567e:	e010      	b.n	80056a2 <UART_SetConfig+0x572>
 8005680:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005684:	e00d      	b.n	80056a2 <UART_SetConfig+0x572>
 8005686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800568a:	e00a      	b.n	80056a2 <UART_SetConfig+0x572>
 800568c:	f241 5355 	movw	r3, #5461	; 0x1555
 8005690:	e007      	b.n	80056a2 <UART_SetConfig+0x572>
 8005692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005696:	e004      	b.n	80056a2 <UART_SetConfig+0x572>
 8005698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800569c:	e001      	b.n	80056a2 <UART_SetConfig+0x572>
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	617b      	str	r3, [r7, #20]
        break;
 80056a4:	e002      	b.n	80056ac <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	76fb      	strb	r3, [r7, #27]
        break;
 80056aa:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 86cd 	beq.w	800644e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d305      	bcc.n	80056d0 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d903      	bls.n	80056d8 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	76fb      	strb	r3, [r7, #27]
 80056d4:	f000 bebb 	b.w	800644e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056dc:	2b08      	cmp	r3, #8
 80056de:	f200 828d 	bhi.w	8005bfc <UART_SetConfig+0xacc>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x5b8>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005bfd 	.word	0x08005bfd
 80056f0:	08005877 	.word	0x08005877
 80056f4:	08005bfd 	.word	0x08005bfd
 80056f8:	0800596d 	.word	0x0800596d
 80056fc:	08005bfd 	.word	0x08005bfd
 8005700:	08005bfd 	.word	0x08005bfd
 8005704:	08005bfd 	.word	0x08005bfd
 8005708:	08005aab 	.word	0x08005aab
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fd fcb0 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8005710:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4618      	mov	r0, r3
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d07d      	beq.n	800581e <UART_SetConfig+0x6ee>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b01      	cmp	r3, #1
 8005728:	d074      	beq.n	8005814 <UART_SetConfig+0x6e4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b02      	cmp	r3, #2
 8005730:	d06b      	beq.n	800580a <UART_SetConfig+0x6da>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	2b03      	cmp	r3, #3
 8005738:	d062      	beq.n	8005800 <UART_SetConfig+0x6d0>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b04      	cmp	r3, #4
 8005740:	d059      	beq.n	80057f6 <UART_SetConfig+0x6c6>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2b05      	cmp	r3, #5
 8005748:	d050      	beq.n	80057ec <UART_SetConfig+0x6bc>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2b06      	cmp	r3, #6
 8005750:	d047      	beq.n	80057e2 <UART_SetConfig+0x6b2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2b07      	cmp	r3, #7
 8005758:	d03e      	beq.n	80057d8 <UART_SetConfig+0x6a8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b08      	cmp	r3, #8
 8005760:	d01f      	beq.n	80057a2 <UART_SetConfig+0x672>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b09      	cmp	r3, #9
 8005768:	d016      	beq.n	8005798 <UART_SetConfig+0x668>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b0a      	cmp	r3, #10
 8005770:	d00d      	beq.n	800578e <UART_SetConfig+0x65e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b0b      	cmp	r3, #11
 8005778:	d104      	bne.n	8005784 <UART_SetConfig+0x654>
 800577a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	e050      	b.n	8005826 <UART_SetConfig+0x6f6>
 8005784:	f04f 0301 	mov.w	r3, #1
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	e04b      	b.n	8005826 <UART_SetConfig+0x6f6>
 800578e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005792:	f04f 0400 	mov.w	r4, #0
 8005796:	e046      	b.n	8005826 <UART_SetConfig+0x6f6>
 8005798:	f04f 0340 	mov.w	r3, #64	; 0x40
 800579c:	f04f 0400 	mov.w	r4, #0
 80057a0:	e041      	b.n	8005826 <UART_SetConfig+0x6f6>
 80057a2:	f04f 0320 	mov.w	r3, #32
 80057a6:	f04f 0400 	mov.w	r4, #0
 80057aa:	e03c      	b.n	8005826 <UART_SetConfig+0x6f6>
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	0001e848 	.word	0x0001e848
 80057b4:	0003d090 	.word	0x0003d090
 80057b8:	0007a120 	.word	0x0007a120
 80057bc:	000f4240 	.word	0x000f4240
 80057c0:	00145855 	.word	0x00145855
 80057c4:	00186a00 	.word	0x00186a00
 80057c8:	001e8480 	.word	0x001e8480
 80057cc:	0028b0aa 	.word	0x0028b0aa
 80057d0:	003d0900 	.word	0x003d0900
 80057d4:	007a1200 	.word	0x007a1200
 80057d8:	f04f 0310 	mov.w	r3, #16
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	e021      	b.n	8005826 <UART_SetConfig+0x6f6>
 80057e2:	f04f 030c 	mov.w	r3, #12
 80057e6:	f04f 0400 	mov.w	r4, #0
 80057ea:	e01c      	b.n	8005826 <UART_SetConfig+0x6f6>
 80057ec:	f04f 030a 	mov.w	r3, #10
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	e017      	b.n	8005826 <UART_SetConfig+0x6f6>
 80057f6:	f04f 0308 	mov.w	r3, #8
 80057fa:	f04f 0400 	mov.w	r4, #0
 80057fe:	e012      	b.n	8005826 <UART_SetConfig+0x6f6>
 8005800:	f04f 0306 	mov.w	r3, #6
 8005804:	f04f 0400 	mov.w	r4, #0
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0x6f6>
 800580a:	f04f 0304 	mov.w	r3, #4
 800580e:	f04f 0400 	mov.w	r4, #0
 8005812:	e008      	b.n	8005826 <UART_SetConfig+0x6f6>
 8005814:	f04f 0302 	mov.w	r3, #2
 8005818:	f04f 0400 	mov.w	r4, #0
 800581c:	e003      	b.n	8005826 <UART_SetConfig+0x6f6>
 800581e:	f04f 0301 	mov.w	r3, #1
 8005822:	f04f 0400 	mov.w	r4, #0
 8005826:	461a      	mov	r2, r3
 8005828:	4623      	mov	r3, r4
 800582a:	f7fa fd51 	bl	80002d0 <__aeabi_uldivmod>
 800582e:	4603      	mov	r3, r0
 8005830:	460c      	mov	r4, r1
 8005832:	4619      	mov	r1, r3
 8005834:	4622      	mov	r2, r4
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	0214      	lsls	r4, r2, #8
 8005840:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005844:	020b      	lsls	r3, r1, #8
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6852      	ldr	r2, [r2, #4]
 800584a:	0852      	lsrs	r2, r2, #1
 800584c:	4611      	mov	r1, r2
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	eb13 0b01 	adds.w	fp, r3, r1
 8005856:	eb44 0c02 	adc.w	ip, r4, r2
 800585a:	4658      	mov	r0, fp
 800585c:	4661      	mov	r1, ip
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	461a      	mov	r2, r3
 8005868:	4623      	mov	r3, r4
 800586a:	f7fa fd31 	bl	80002d0 <__aeabi_uldivmod>
 800586e:	4603      	mov	r3, r0
 8005870:	460c      	mov	r4, r1
 8005872:	61fb      	str	r3, [r7, #28]
            break;
 8005874:	e1c5      	b.n	8005c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d05b      	beq.n	8005936 <UART_SetConfig+0x806>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b01      	cmp	r3, #1
 8005884:	d053      	beq.n	800592e <UART_SetConfig+0x7fe>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b02      	cmp	r3, #2
 800588c:	d04b      	beq.n	8005926 <UART_SetConfig+0x7f6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b03      	cmp	r3, #3
 8005894:	d043      	beq.n	800591e <UART_SetConfig+0x7ee>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b04      	cmp	r3, #4
 800589c:	d03b      	beq.n	8005916 <UART_SetConfig+0x7e6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d033      	beq.n	800590e <UART_SetConfig+0x7de>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d02b      	beq.n	8005906 <UART_SetConfig+0x7d6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b07      	cmp	r3, #7
 80058b4:	d023      	beq.n	80058fe <UART_SetConfig+0x7ce>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d01b      	beq.n	80058f6 <UART_SetConfig+0x7c6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b09      	cmp	r3, #9
 80058c4:	d013      	beq.n	80058ee <UART_SetConfig+0x7be>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b0a      	cmp	r3, #10
 80058cc:	d00b      	beq.n	80058e6 <UART_SetConfig+0x7b6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b0b      	cmp	r3, #11
 80058d4:	d103      	bne.n	80058de <UART_SetConfig+0x7ae>
 80058d6:	4bae      	ldr	r3, [pc, #696]	; (8005b90 <UART_SetConfig+0xa60>)
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	e02e      	b.n	800593c <UART_SetConfig+0x80c>
 80058de:	4bad      	ldr	r3, [pc, #692]	; (8005b94 <UART_SetConfig+0xa64>)
 80058e0:	f04f 0400 	mov.w	r4, #0
 80058e4:	e02a      	b.n	800593c <UART_SetConfig+0x80c>
 80058e6:	4bac      	ldr	r3, [pc, #688]	; (8005b98 <UART_SetConfig+0xa68>)
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	e026      	b.n	800593c <UART_SetConfig+0x80c>
 80058ee:	4bab      	ldr	r3, [pc, #684]	; (8005b9c <UART_SetConfig+0xa6c>)
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	e022      	b.n	800593c <UART_SetConfig+0x80c>
 80058f6:	4baa      	ldr	r3, [pc, #680]	; (8005ba0 <UART_SetConfig+0xa70>)
 80058f8:	f04f 0400 	mov.w	r4, #0
 80058fc:	e01e      	b.n	800593c <UART_SetConfig+0x80c>
 80058fe:	4ba9      	ldr	r3, [pc, #676]	; (8005ba4 <UART_SetConfig+0xa74>)
 8005900:	f04f 0400 	mov.w	r4, #0
 8005904:	e01a      	b.n	800593c <UART_SetConfig+0x80c>
 8005906:	a49e      	add	r4, pc, #632	; (adr r4, 8005b80 <UART_SetConfig+0xa50>)
 8005908:	e9d4 3400 	ldrd	r3, r4, [r4]
 800590c:	e016      	b.n	800593c <UART_SetConfig+0x80c>
 800590e:	4ba6      	ldr	r3, [pc, #664]	; (8005ba8 <UART_SetConfig+0xa78>)
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	e012      	b.n	800593c <UART_SetConfig+0x80c>
 8005916:	4ba5      	ldr	r3, [pc, #660]	; (8005bac <UART_SetConfig+0xa7c>)
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	e00e      	b.n	800593c <UART_SetConfig+0x80c>
 800591e:	a49a      	add	r4, pc, #616	; (adr r4, 8005b88 <UART_SetConfig+0xa58>)
 8005920:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005924:	e00a      	b.n	800593c <UART_SetConfig+0x80c>
 8005926:	4ba2      	ldr	r3, [pc, #648]	; (8005bb0 <UART_SetConfig+0xa80>)
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	e006      	b.n	800593c <UART_SetConfig+0x80c>
 800592e:	4ba1      	ldr	r3, [pc, #644]	; (8005bb4 <UART_SetConfig+0xa84>)
 8005930:	f04f 0400 	mov.w	r4, #0
 8005934:	e002      	b.n	800593c <UART_SetConfig+0x80c>
 8005936:	4b97      	ldr	r3, [pc, #604]	; (8005b94 <UART_SetConfig+0xa64>)
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6852      	ldr	r2, [r2, #4]
 8005940:	0852      	lsrs	r2, r2, #1
 8005942:	4611      	mov	r1, r2
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	eb13 0b01 	adds.w	fp, r3, r1
 800594c:	eb44 0c02 	adc.w	ip, r4, r2
 8005950:	4658      	mov	r0, fp
 8005952:	4661      	mov	r1, ip
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f04f 0400 	mov.w	r4, #0
 800595c:	461a      	mov	r2, r3
 800595e:	4623      	mov	r3, r4
 8005960:	f7fa fcb6 	bl	80002d0 <__aeabi_uldivmod>
 8005964:	4603      	mov	r3, r0
 8005966:	460c      	mov	r4, r1
 8005968:	61fb      	str	r3, [r7, #28]
            break;
 800596a:	e14a      	b.n	8005c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800596c:	f7fd fb12 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8005970:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4618      	mov	r0, r3
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d067      	beq.n	8005a52 <UART_SetConfig+0x922>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b01      	cmp	r3, #1
 8005988:	d05e      	beq.n	8005a48 <UART_SetConfig+0x918>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b02      	cmp	r3, #2
 8005990:	d055      	beq.n	8005a3e <UART_SetConfig+0x90e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b03      	cmp	r3, #3
 8005998:	d04c      	beq.n	8005a34 <UART_SetConfig+0x904>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d043      	beq.n	8005a2a <UART_SetConfig+0x8fa>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d03a      	beq.n	8005a20 <UART_SetConfig+0x8f0>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d031      	beq.n	8005a16 <UART_SetConfig+0x8e6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b07      	cmp	r3, #7
 80059b8:	d028      	beq.n	8005a0c <UART_SetConfig+0x8dc>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d01f      	beq.n	8005a02 <UART_SetConfig+0x8d2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b09      	cmp	r3, #9
 80059c8:	d016      	beq.n	80059f8 <UART_SetConfig+0x8c8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b0a      	cmp	r3, #10
 80059d0:	d00d      	beq.n	80059ee <UART_SetConfig+0x8be>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b0b      	cmp	r3, #11
 80059d8:	d104      	bne.n	80059e4 <UART_SetConfig+0x8b4>
 80059da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059de:	f04f 0400 	mov.w	r4, #0
 80059e2:	e03a      	b.n	8005a5a <UART_SetConfig+0x92a>
 80059e4:	f04f 0301 	mov.w	r3, #1
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	e035      	b.n	8005a5a <UART_SetConfig+0x92a>
 80059ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	e030      	b.n	8005a5a <UART_SetConfig+0x92a>
 80059f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	e02b      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a02:	f04f 0320 	mov.w	r3, #32
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	e026      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a0c:	f04f 0310 	mov.w	r3, #16
 8005a10:	f04f 0400 	mov.w	r4, #0
 8005a14:	e021      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a16:	f04f 030c 	mov.w	r3, #12
 8005a1a:	f04f 0400 	mov.w	r4, #0
 8005a1e:	e01c      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a20:	f04f 030a 	mov.w	r3, #10
 8005a24:	f04f 0400 	mov.w	r4, #0
 8005a28:	e017      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a2a:	f04f 0308 	mov.w	r3, #8
 8005a2e:	f04f 0400 	mov.w	r4, #0
 8005a32:	e012      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a34:	f04f 0306 	mov.w	r3, #6
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	e00d      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a3e:	f04f 0304 	mov.w	r3, #4
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	e008      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a48:	f04f 0302 	mov.w	r3, #2
 8005a4c:	f04f 0400 	mov.w	r4, #0
 8005a50:	e003      	b.n	8005a5a <UART_SetConfig+0x92a>
 8005a52:	f04f 0301 	mov.w	r3, #1
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	f7fa fc37 	bl	80002d0 <__aeabi_uldivmod>
 8005a62:	4603      	mov	r3, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	4619      	mov	r1, r3
 8005a68:	4622      	mov	r2, r4
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	0214      	lsls	r4, r2, #8
 8005a74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a78:	020b      	lsls	r3, r1, #8
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6852      	ldr	r2, [r2, #4]
 8005a7e:	0852      	lsrs	r2, r2, #1
 8005a80:	4611      	mov	r1, r2
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	eb13 0b01 	adds.w	fp, r3, r1
 8005a8a:	eb44 0c02 	adc.w	ip, r4, r2
 8005a8e:	4658      	mov	r0, fp
 8005a90:	4661      	mov	r1, ip
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	f7fa fc17 	bl	80002d0 <__aeabi_uldivmod>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	61fb      	str	r3, [r7, #28]
            break;
 8005aa8:	e0ab      	b.n	8005c02 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8088 	beq.w	8005bc4 <UART_SetConfig+0xa94>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d05b      	beq.n	8005b74 <UART_SetConfig+0xa44>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d052      	beq.n	8005b6a <UART_SetConfig+0xa3a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d04a      	beq.n	8005b62 <UART_SetConfig+0xa32>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d041      	beq.n	8005b58 <UART_SetConfig+0xa28>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d039      	beq.n	8005b50 <UART_SetConfig+0xa20>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d031      	beq.n	8005b48 <UART_SetConfig+0xa18>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	d028      	beq.n	8005b3e <UART_SetConfig+0xa0e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d01f      	beq.n	8005b34 <UART_SetConfig+0xa04>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b09      	cmp	r3, #9
 8005afa:	d016      	beq.n	8005b2a <UART_SetConfig+0x9fa>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b0a      	cmp	r3, #10
 8005b02:	d00d      	beq.n	8005b20 <UART_SetConfig+0x9f0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b0b      	cmp	r3, #11
 8005b0a:	d104      	bne.n	8005b16 <UART_SetConfig+0x9e6>
 8005b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	e05a      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	e055      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	e050      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b2e:	f04f 0400 	mov.w	r4, #0
 8005b32:	e04b      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	e046      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b42:	f04f 0400 	mov.w	r4, #0
 8005b46:	e041      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b48:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <UART_SetConfig+0xa88>)
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	e03d      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <UART_SetConfig+0xa8c>)
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	e039      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b5c:	f04f 0400 	mov.w	r4, #0
 8005b60:	e034      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b62:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <UART_SetConfig+0xa90>)
 8005b64:	f04f 0400 	mov.w	r4, #0
 8005b68:	e030      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b6e:	f04f 0400 	mov.w	r4, #0
 8005b72:	e02b      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b78:	f04f 0400 	mov.w	r4, #0
 8005b7c:	e026      	b.n	8005bcc <UART_SetConfig+0xa9c>
 8005b7e:	bf00      	nop
 8005b80:	14585500 	.word	0x14585500
 8005b84:	00000000 	.word	0x00000000
 8005b88:	28b0aa00 	.word	0x28b0aa00
 8005b8c:	00000000 	.word	0x00000000
 8005b90:	00f42400 	.word	0x00f42400
 8005b94:	f4240000 	.word	0xf4240000
 8005b98:	01e84800 	.word	0x01e84800
 8005b9c:	03d09000 	.word	0x03d09000
 8005ba0:	07a12000 	.word	0x07a12000
 8005ba4:	0f424000 	.word	0x0f424000
 8005ba8:	186a0000 	.word	0x186a0000
 8005bac:	1e848000 	.word	0x1e848000
 8005bb0:	3d090000 	.word	0x3d090000
 8005bb4:	7a120000 	.word	0x7a120000
 8005bb8:	000aaa00 	.word	0x000aaa00
 8005bbc:	000ccc00 	.word	0x000ccc00
 8005bc0:	00155500 	.word	0x00155500
 8005bc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005bc8:	f04f 0400 	mov.w	r4, #0
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6852      	ldr	r2, [r2, #4]
 8005bd0:	0852      	lsrs	r2, r2, #1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	eb13 0b01 	adds.w	fp, r3, r1
 8005bdc:	eb44 0c02 	adc.w	ip, r4, r2
 8005be0:	4658      	mov	r0, fp
 8005be2:	4661      	mov	r1, ip
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f04f 0400 	mov.w	r4, #0
 8005bec:	461a      	mov	r2, r3
 8005bee:	4623      	mov	r3, r4
 8005bf0:	f7fa fb6e 	bl	80002d0 <__aeabi_uldivmod>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	61fb      	str	r3, [r7, #28]
            break;
 8005bfa:	e002      	b.n	8005c02 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	76fb      	strb	r3, [r7, #27]
            break;
 8005c00:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c08:	d309      	bcc.n	8005c1e <UART_SetConfig+0xaee>
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c10:	d205      	bcs.n	8005c1e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	f000 bc18 	b.w	800644e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	76fb      	strb	r3, [r7, #27]
 8005c22:	f000 bc14 	b.w	800644e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	f040 8204 	bne.w	800603a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	f200 81df 	bhi.w	8005ffa <UART_SetConfig+0xeca>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0xb14>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005d21 	.word	0x08005d21
 8005c4c:	08005dd9 	.word	0x08005dd9
 8005c50:	08005ffb 	.word	0x08005ffb
 8005c54:	08005e81 	.word	0x08005e81
 8005c58:	08005ffb 	.word	0x08005ffb
 8005c5c:	08005ffb 	.word	0x08005ffb
 8005c60:	08005ffb 	.word	0x08005ffb
 8005c64:	08005f39 	.word	0x08005f39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fd fa02 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d044      	beq.n	8005d00 <UART_SetConfig+0xbd0>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d03e      	beq.n	8005cfc <UART_SetConfig+0xbcc>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d038      	beq.n	8005cf8 <UART_SetConfig+0xbc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d032      	beq.n	8005cf4 <UART_SetConfig+0xbc4>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d02c      	beq.n	8005cf0 <UART_SetConfig+0xbc0>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d026      	beq.n	8005cec <UART_SetConfig+0xbbc>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d020      	beq.n	8005ce8 <UART_SetConfig+0xbb8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	d01a      	beq.n	8005ce4 <UART_SetConfig+0xbb4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d014      	beq.n	8005ce0 <UART_SetConfig+0xbb0>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d00e      	beq.n	8005cdc <UART_SetConfig+0xbac>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b0a      	cmp	r3, #10
 8005cc4:	d008      	beq.n	8005cd8 <UART_SetConfig+0xba8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b0b      	cmp	r3, #11
 8005ccc:	d102      	bne.n	8005cd4 <UART_SetConfig+0xba4>
 8005cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cd2:	e016      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e014      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	e012      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	e010      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	e00e      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	e00c      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	e00a      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cec:	230a      	movs	r3, #10
 8005cee:	e008      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	e006      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cf4:	2306      	movs	r3, #6
 8005cf6:	e004      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e000      	b.n	8005d02 <UART_SetConfig+0xbd2>
 8005d00:	2301      	movs	r3, #1
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	005a      	lsls	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	61fb      	str	r3, [r7, #28]
        break;
 8005d1e:	e16f      	b.n	8006000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fd f9bc 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8005d24:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d044      	beq.n	8005db8 <UART_SetConfig+0xc88>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d03e      	beq.n	8005db4 <UART_SetConfig+0xc84>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d038      	beq.n	8005db0 <UART_SetConfig+0xc80>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d032      	beq.n	8005dac <UART_SetConfig+0xc7c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d02c      	beq.n	8005da8 <UART_SetConfig+0xc78>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d026      	beq.n	8005da4 <UART_SetConfig+0xc74>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d020      	beq.n	8005da0 <UART_SetConfig+0xc70>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	d01a      	beq.n	8005d9c <UART_SetConfig+0xc6c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d014      	beq.n	8005d98 <UART_SetConfig+0xc68>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b09      	cmp	r3, #9
 8005d74:	d00e      	beq.n	8005d94 <UART_SetConfig+0xc64>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b0a      	cmp	r3, #10
 8005d7c:	d008      	beq.n	8005d90 <UART_SetConfig+0xc60>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b0b      	cmp	r3, #11
 8005d84:	d102      	bne.n	8005d8c <UART_SetConfig+0xc5c>
 8005d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d8a:	e016      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e014      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	e012      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005d94:	2340      	movs	r3, #64	; 0x40
 8005d96:	e010      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005d98:	2320      	movs	r3, #32
 8005d9a:	e00e      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	e00c      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005da0:	230c      	movs	r3, #12
 8005da2:	e00a      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005da4:	230a      	movs	r3, #10
 8005da6:	e008      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005da8:	2308      	movs	r3, #8
 8005daa:	e006      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005dac:	2306      	movs	r3, #6
 8005dae:	e004      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005db0:	2304      	movs	r3, #4
 8005db2:	e002      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e000      	b.n	8005dba <UART_SetConfig+0xc8a>
 8005db8:	2301      	movs	r3, #1
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	005a      	lsls	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	61fb      	str	r3, [r7, #28]
        break;
 8005dd6:	e113      	b.n	8006000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d043      	beq.n	8005e68 <UART_SetConfig+0xd38>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d03d      	beq.n	8005e64 <UART_SetConfig+0xd34>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d037      	beq.n	8005e60 <UART_SetConfig+0xd30>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d031      	beq.n	8005e5c <UART_SetConfig+0xd2c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d02b      	beq.n	8005e58 <UART_SetConfig+0xd28>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b05      	cmp	r3, #5
 8005e06:	d025      	beq.n	8005e54 <UART_SetConfig+0xd24>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b06      	cmp	r3, #6
 8005e0e:	d01f      	beq.n	8005e50 <UART_SetConfig+0xd20>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b07      	cmp	r3, #7
 8005e16:	d019      	beq.n	8005e4c <UART_SetConfig+0xd1c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d013      	beq.n	8005e48 <UART_SetConfig+0xd18>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d00d      	beq.n	8005e44 <UART_SetConfig+0xd14>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b0a      	cmp	r3, #10
 8005e2e:	d007      	beq.n	8005e40 <UART_SetConfig+0xd10>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b0b      	cmp	r3, #11
 8005e36:	d101      	bne.n	8005e3c <UART_SetConfig+0xd0c>
 8005e38:	4b8d      	ldr	r3, [pc, #564]	; (8006070 <UART_SetConfig+0xf40>)
 8005e3a:	e016      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e3c:	4b8d      	ldr	r3, [pc, #564]	; (8006074 <UART_SetConfig+0xf44>)
 8005e3e:	e014      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e40:	4b8d      	ldr	r3, [pc, #564]	; (8006078 <UART_SetConfig+0xf48>)
 8005e42:	e012      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e44:	4b8d      	ldr	r3, [pc, #564]	; (800607c <UART_SetConfig+0xf4c>)
 8005e46:	e010      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e48:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <UART_SetConfig+0xf50>)
 8005e4a:	e00e      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e4c:	4b8d      	ldr	r3, [pc, #564]	; (8006084 <UART_SetConfig+0xf54>)
 8005e4e:	e00c      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e50:	4b8d      	ldr	r3, [pc, #564]	; (8006088 <UART_SetConfig+0xf58>)
 8005e52:	e00a      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e54:	4b8d      	ldr	r3, [pc, #564]	; (800608c <UART_SetConfig+0xf5c>)
 8005e56:	e008      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e58:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <UART_SetConfig+0xf60>)
 8005e5a:	e006      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e5c:	4b8d      	ldr	r3, [pc, #564]	; (8006094 <UART_SetConfig+0xf64>)
 8005e5e:	e004      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e60:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <UART_SetConfig+0xf68>)
 8005e62:	e002      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e64:	4b8d      	ldr	r3, [pc, #564]	; (800609c <UART_SetConfig+0xf6c>)
 8005e66:	e000      	b.n	8005e6a <UART_SetConfig+0xd3a>
 8005e68:	4b82      	ldr	r3, [pc, #520]	; (8006074 <UART_SetConfig+0xf44>)
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6852      	ldr	r2, [r2, #4]
 8005e6e:	0852      	lsrs	r2, r2, #1
 8005e70:	441a      	add	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	61fb      	str	r3, [r7, #28]
        break;
 8005e7e:	e0bf      	b.n	8006000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e80:	f7fd f888 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8005e84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d044      	beq.n	8005f18 <UART_SetConfig+0xde8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d03e      	beq.n	8005f14 <UART_SetConfig+0xde4>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d038      	beq.n	8005f10 <UART_SetConfig+0xde0>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d032      	beq.n	8005f0c <UART_SetConfig+0xddc>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d02c      	beq.n	8005f08 <UART_SetConfig+0xdd8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d026      	beq.n	8005f04 <UART_SetConfig+0xdd4>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2b06      	cmp	r3, #6
 8005ebc:	d020      	beq.n	8005f00 <UART_SetConfig+0xdd0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b07      	cmp	r3, #7
 8005ec4:	d01a      	beq.n	8005efc <UART_SetConfig+0xdcc>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d014      	beq.n	8005ef8 <UART_SetConfig+0xdc8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b09      	cmp	r3, #9
 8005ed4:	d00e      	beq.n	8005ef4 <UART_SetConfig+0xdc4>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b0a      	cmp	r3, #10
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0xdc0>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b0b      	cmp	r3, #11
 8005ee4:	d102      	bne.n	8005eec <UART_SetConfig+0xdbc>
 8005ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eea:	e016      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e014      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	e012      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	e010      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005ef8:	2320      	movs	r3, #32
 8005efa:	e00e      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005efc:	2310      	movs	r3, #16
 8005efe:	e00c      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f00:	230c      	movs	r3, #12
 8005f02:	e00a      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f04:	230a      	movs	r3, #10
 8005f06:	e008      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	e006      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f0c:	2306      	movs	r3, #6
 8005f0e:	e004      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f10:	2304      	movs	r3, #4
 8005f12:	e002      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e000      	b.n	8005f1a <UART_SetConfig+0xdea>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	005a      	lsls	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	61fb      	str	r3, [r7, #28]
        break;
 8005f36:	e063      	b.n	8006000 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d04f      	beq.n	8005fe0 <UART_SetConfig+0xeb0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d048      	beq.n	8005fda <UART_SetConfig+0xeaa>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d041      	beq.n	8005fd4 <UART_SetConfig+0xea4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d03a      	beq.n	8005fce <UART_SetConfig+0xe9e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d033      	beq.n	8005fc8 <UART_SetConfig+0xe98>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d02c      	beq.n	8005fc2 <UART_SetConfig+0xe92>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d025      	beq.n	8005fbc <UART_SetConfig+0xe8c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b07      	cmp	r3, #7
 8005f76:	d01e      	beq.n	8005fb6 <UART_SetConfig+0xe86>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d017      	beq.n	8005fb0 <UART_SetConfig+0xe80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d010      	beq.n	8005faa <UART_SetConfig+0xe7a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b0a      	cmp	r3, #10
 8005f8e:	d009      	beq.n	8005fa4 <UART_SetConfig+0xe74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b0b      	cmp	r3, #11
 8005f96:	d102      	bne.n	8005f9e <UART_SetConfig+0xe6e>
 8005f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9c:	e022      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fa2:	e01f      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa8:	e01c      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fae:	e019      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fb4:	e016      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fba:	e013      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fbc:	f241 5354 	movw	r3, #5460	; 0x1554
 8005fc0:	e010      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fc2:	f641 1398 	movw	r3, #6552	; 0x1998
 8005fc6:	e00d      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fcc:	e00a      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fce:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005fd2:	e007      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fd8:	e004      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	e001      	b.n	8005fe4 <UART_SetConfig+0xeb4>
 8005fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	0852      	lsrs	r2, r2, #1
 8005fea:	441a      	add	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e002      	b.n	8006000 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	76fb      	strb	r3, [r7, #27]
        break;
 8005ffe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b0f      	cmp	r3, #15
 8006004:	d916      	bls.n	8006034 <UART_SetConfig+0xf04>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d212      	bcs.n	8006034 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	b29b      	uxth	r3, r3
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	b29a      	uxth	r2, r3
 8006024:	89fb      	ldrh	r3, [r7, #14]
 8006026:	4313      	orrs	r3, r2
 8006028:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	89fa      	ldrh	r2, [r7, #14]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	e20c      	b.n	800644e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	e209      	b.n	800644e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800603a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800603e:	2b08      	cmp	r3, #8
 8006040:	f200 81f4 	bhi.w	800642c <UART_SetConfig+0x12fc>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0xf1c>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060a1 	.word	0x080060a1
 8006050:	08006157 	.word	0x08006157
 8006054:	0800620d 	.word	0x0800620d
 8006058:	0800642d 	.word	0x0800642d
 800605c:	080062b7 	.word	0x080062b7
 8006060:	0800642d 	.word	0x0800642d
 8006064:	0800642d 	.word	0x0800642d
 8006068:	0800642d 	.word	0x0800642d
 800606c:	0800636d 	.word	0x0800636d
 8006070:	0001e848 	.word	0x0001e848
 8006074:	01e84800 	.word	0x01e84800
 8006078:	0003d090 	.word	0x0003d090
 800607c:	0007a120 	.word	0x0007a120
 8006080:	000f4240 	.word	0x000f4240
 8006084:	001e8480 	.word	0x001e8480
 8006088:	0028b0aa 	.word	0x0028b0aa
 800608c:	0030d400 	.word	0x0030d400
 8006090:	003d0900 	.word	0x003d0900
 8006094:	00516154 	.word	0x00516154
 8006098:	007a1200 	.word	0x007a1200
 800609c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fc ffe6 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 80060a4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d044      	beq.n	8006138 <UART_SetConfig+0x1008>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d03e      	beq.n	8006134 <UART_SetConfig+0x1004>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d038      	beq.n	8006130 <UART_SetConfig+0x1000>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d032      	beq.n	800612c <UART_SetConfig+0xffc>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d02c      	beq.n	8006128 <UART_SetConfig+0xff8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	d026      	beq.n	8006124 <UART_SetConfig+0xff4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	2b06      	cmp	r3, #6
 80060dc:	d020      	beq.n	8006120 <UART_SetConfig+0xff0>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	2b07      	cmp	r3, #7
 80060e4:	d01a      	beq.n	800611c <UART_SetConfig+0xfec>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d014      	beq.n	8006118 <UART_SetConfig+0xfe8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b09      	cmp	r3, #9
 80060f4:	d00e      	beq.n	8006114 <UART_SetConfig+0xfe4>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	2b0a      	cmp	r3, #10
 80060fc:	d008      	beq.n	8006110 <UART_SetConfig+0xfe0>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2b0b      	cmp	r3, #11
 8006104:	d102      	bne.n	800610c <UART_SetConfig+0xfdc>
 8006106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610a:	e016      	b.n	800613a <UART_SetConfig+0x100a>
 800610c:	2301      	movs	r3, #1
 800610e:	e014      	b.n	800613a <UART_SetConfig+0x100a>
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	e012      	b.n	800613a <UART_SetConfig+0x100a>
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x100a>
 8006118:	2320      	movs	r3, #32
 800611a:	e00e      	b.n	800613a <UART_SetConfig+0x100a>
 800611c:	2310      	movs	r3, #16
 800611e:	e00c      	b.n	800613a <UART_SetConfig+0x100a>
 8006120:	230c      	movs	r3, #12
 8006122:	e00a      	b.n	800613a <UART_SetConfig+0x100a>
 8006124:	230a      	movs	r3, #10
 8006126:	e008      	b.n	800613a <UART_SetConfig+0x100a>
 8006128:	2308      	movs	r3, #8
 800612a:	e006      	b.n	800613a <UART_SetConfig+0x100a>
 800612c:	2306      	movs	r3, #6
 800612e:	e004      	b.n	800613a <UART_SetConfig+0x100a>
 8006130:	2304      	movs	r3, #4
 8006132:	e002      	b.n	800613a <UART_SetConfig+0x100a>
 8006134:	2302      	movs	r3, #2
 8006136:	e000      	b.n	800613a <UART_SetConfig+0x100a>
 8006138:	2301      	movs	r3, #1
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	441a      	add	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	b29b      	uxth	r3, r3
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e16d      	b.n	8006432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006156:	f7fc ffa1 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800615a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d044      	beq.n	80061ee <UART_SetConfig+0x10be>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b01      	cmp	r3, #1
 800616a:	d03e      	beq.n	80061ea <UART_SetConfig+0x10ba>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b02      	cmp	r3, #2
 8006172:	d038      	beq.n	80061e6 <UART_SetConfig+0x10b6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b03      	cmp	r3, #3
 800617a:	d032      	beq.n	80061e2 <UART_SetConfig+0x10b2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b04      	cmp	r3, #4
 8006182:	d02c      	beq.n	80061de <UART_SetConfig+0x10ae>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b05      	cmp	r3, #5
 800618a:	d026      	beq.n	80061da <UART_SetConfig+0x10aa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b06      	cmp	r3, #6
 8006192:	d020      	beq.n	80061d6 <UART_SetConfig+0x10a6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b07      	cmp	r3, #7
 800619a:	d01a      	beq.n	80061d2 <UART_SetConfig+0x10a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d014      	beq.n	80061ce <UART_SetConfig+0x109e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	d00e      	beq.n	80061ca <UART_SetConfig+0x109a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b0a      	cmp	r3, #10
 80061b2:	d008      	beq.n	80061c6 <UART_SetConfig+0x1096>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b0b      	cmp	r3, #11
 80061ba:	d102      	bne.n	80061c2 <UART_SetConfig+0x1092>
 80061bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c0:	e016      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e014      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	e012      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	e010      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061ce:	2320      	movs	r3, #32
 80061d0:	e00e      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061d2:	2310      	movs	r3, #16
 80061d4:	e00c      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061d6:	230c      	movs	r3, #12
 80061d8:	e00a      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061da:	230a      	movs	r3, #10
 80061dc:	e008      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061de:	2308      	movs	r3, #8
 80061e0:	e006      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061e2:	2306      	movs	r3, #6
 80061e4:	e004      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061e6:	2304      	movs	r3, #4
 80061e8:	e002      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e000      	b.n	80061f0 <UART_SetConfig+0x10c0>
 80061ee:	2301      	movs	r3, #1
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	61fb      	str	r3, [r7, #28]
        break;
 800620a:	e112      	b.n	8006432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	d044      	beq.n	800629e <UART_SetConfig+0x116e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b01      	cmp	r3, #1
 800621a:	d03e      	beq.n	800629a <UART_SetConfig+0x116a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b02      	cmp	r3, #2
 8006222:	d038      	beq.n	8006296 <UART_SetConfig+0x1166>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b03      	cmp	r3, #3
 800622a:	d032      	beq.n	8006292 <UART_SetConfig+0x1162>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b04      	cmp	r3, #4
 8006232:	d02c      	beq.n	800628e <UART_SetConfig+0x115e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b05      	cmp	r3, #5
 800623a:	d026      	beq.n	800628a <UART_SetConfig+0x115a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b06      	cmp	r3, #6
 8006242:	d020      	beq.n	8006286 <UART_SetConfig+0x1156>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b07      	cmp	r3, #7
 800624a:	d01a      	beq.n	8006282 <UART_SetConfig+0x1152>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b08      	cmp	r3, #8
 8006252:	d014      	beq.n	800627e <UART_SetConfig+0x114e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b09      	cmp	r3, #9
 800625a:	d00e      	beq.n	800627a <UART_SetConfig+0x114a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b0a      	cmp	r3, #10
 8006262:	d008      	beq.n	8006276 <UART_SetConfig+0x1146>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b0b      	cmp	r3, #11
 800626a:	d102      	bne.n	8006272 <UART_SetConfig+0x1142>
 800626c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006270:	e016      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006272:	4b81      	ldr	r3, [pc, #516]	; (8006478 <UART_SetConfig+0x1348>)
 8006274:	e014      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006276:	4b81      	ldr	r3, [pc, #516]	; (800647c <UART_SetConfig+0x134c>)
 8006278:	e012      	b.n	80062a0 <UART_SetConfig+0x1170>
 800627a:	4b81      	ldr	r3, [pc, #516]	; (8006480 <UART_SetConfig+0x1350>)
 800627c:	e010      	b.n	80062a0 <UART_SetConfig+0x1170>
 800627e:	4b81      	ldr	r3, [pc, #516]	; (8006484 <UART_SetConfig+0x1354>)
 8006280:	e00e      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006282:	4b81      	ldr	r3, [pc, #516]	; (8006488 <UART_SetConfig+0x1358>)
 8006284:	e00c      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006286:	4b81      	ldr	r3, [pc, #516]	; (800648c <UART_SetConfig+0x135c>)
 8006288:	e00a      	b.n	80062a0 <UART_SetConfig+0x1170>
 800628a:	4b81      	ldr	r3, [pc, #516]	; (8006490 <UART_SetConfig+0x1360>)
 800628c:	e008      	b.n	80062a0 <UART_SetConfig+0x1170>
 800628e:	4b81      	ldr	r3, [pc, #516]	; (8006494 <UART_SetConfig+0x1364>)
 8006290:	e006      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006292:	4b81      	ldr	r3, [pc, #516]	; (8006498 <UART_SetConfig+0x1368>)
 8006294:	e004      	b.n	80062a0 <UART_SetConfig+0x1170>
 8006296:	4b81      	ldr	r3, [pc, #516]	; (800649c <UART_SetConfig+0x136c>)
 8006298:	e002      	b.n	80062a0 <UART_SetConfig+0x1170>
 800629a:	4b81      	ldr	r3, [pc, #516]	; (80064a0 <UART_SetConfig+0x1370>)
 800629c:	e000      	b.n	80062a0 <UART_SetConfig+0x1170>
 800629e:	4b76      	ldr	r3, [pc, #472]	; (8006478 <UART_SetConfig+0x1348>)
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6852      	ldr	r2, [r2, #4]
 80062a4:	0852      	lsrs	r2, r2, #1
 80062a6:	441a      	add	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	61fb      	str	r3, [r7, #28]
        break;
 80062b4:	e0bd      	b.n	8006432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fc fe6d 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 80062ba:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d044      	beq.n	800634e <UART_SetConfig+0x121e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d03e      	beq.n	800634a <UART_SetConfig+0x121a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d038      	beq.n	8006346 <UART_SetConfig+0x1216>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d032      	beq.n	8006342 <UART_SetConfig+0x1212>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d02c      	beq.n	800633e <UART_SetConfig+0x120e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d026      	beq.n	800633a <UART_SetConfig+0x120a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d020      	beq.n	8006336 <UART_SetConfig+0x1206>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b07      	cmp	r3, #7
 80062fa:	d01a      	beq.n	8006332 <UART_SetConfig+0x1202>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b08      	cmp	r3, #8
 8006302:	d014      	beq.n	800632e <UART_SetConfig+0x11fe>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b09      	cmp	r3, #9
 800630a:	d00e      	beq.n	800632a <UART_SetConfig+0x11fa>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b0a      	cmp	r3, #10
 8006312:	d008      	beq.n	8006326 <UART_SetConfig+0x11f6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b0b      	cmp	r3, #11
 800631a:	d102      	bne.n	8006322 <UART_SetConfig+0x11f2>
 800631c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006320:	e016      	b.n	8006350 <UART_SetConfig+0x1220>
 8006322:	2301      	movs	r3, #1
 8006324:	e014      	b.n	8006350 <UART_SetConfig+0x1220>
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	e012      	b.n	8006350 <UART_SetConfig+0x1220>
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	e010      	b.n	8006350 <UART_SetConfig+0x1220>
 800632e:	2320      	movs	r3, #32
 8006330:	e00e      	b.n	8006350 <UART_SetConfig+0x1220>
 8006332:	2310      	movs	r3, #16
 8006334:	e00c      	b.n	8006350 <UART_SetConfig+0x1220>
 8006336:	230c      	movs	r3, #12
 8006338:	e00a      	b.n	8006350 <UART_SetConfig+0x1220>
 800633a:	230a      	movs	r3, #10
 800633c:	e008      	b.n	8006350 <UART_SetConfig+0x1220>
 800633e:	2308      	movs	r3, #8
 8006340:	e006      	b.n	8006350 <UART_SetConfig+0x1220>
 8006342:	2306      	movs	r3, #6
 8006344:	e004      	b.n	8006350 <UART_SetConfig+0x1220>
 8006346:	2304      	movs	r3, #4
 8006348:	e002      	b.n	8006350 <UART_SetConfig+0x1220>
 800634a:	2302      	movs	r3, #2
 800634c:	e000      	b.n	8006350 <UART_SetConfig+0x1220>
 800634e:	2301      	movs	r3, #1
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	fbb2 f2f3 	udiv	r2, r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	441a      	add	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	b29b      	uxth	r3, r3
 8006368:	61fb      	str	r3, [r7, #28]
        break;
 800636a:	e062      	b.n	8006432 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d04e      	beq.n	8006412 <UART_SetConfig+0x12e2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b01      	cmp	r3, #1
 800637a:	d047      	beq.n	800640c <UART_SetConfig+0x12dc>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b02      	cmp	r3, #2
 8006382:	d040      	beq.n	8006406 <UART_SetConfig+0x12d6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b03      	cmp	r3, #3
 800638a:	d039      	beq.n	8006400 <UART_SetConfig+0x12d0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b04      	cmp	r3, #4
 8006392:	d032      	beq.n	80063fa <UART_SetConfig+0x12ca>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b05      	cmp	r3, #5
 800639a:	d02b      	beq.n	80063f4 <UART_SetConfig+0x12c4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d024      	beq.n	80063ee <UART_SetConfig+0x12be>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d01d      	beq.n	80063e8 <UART_SetConfig+0x12b8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d016      	beq.n	80063e2 <UART_SetConfig+0x12b2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d00f      	beq.n	80063dc <UART_SetConfig+0x12ac>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b0a      	cmp	r3, #10
 80063c2:	d008      	beq.n	80063d6 <UART_SetConfig+0x12a6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b0b      	cmp	r3, #11
 80063ca:	d101      	bne.n	80063d0 <UART_SetConfig+0x12a0>
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	e022      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d4:	e01f      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063da:	e01c      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e0:	e019      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e6:	e016      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ec:	e013      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80063f2:	e010      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80063f8:	e00d      	b.n	8006416 <UART_SetConfig+0x12e6>
 80063fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063fe:	e00a      	b.n	8006416 <UART_SetConfig+0x12e6>
 8006400:	f241 5355 	movw	r3, #5461	; 0x1555
 8006404:	e007      	b.n	8006416 <UART_SetConfig+0x12e6>
 8006406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800640a:	e004      	b.n	8006416 <UART_SetConfig+0x12e6>
 800640c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006410:	e001      	b.n	8006416 <UART_SetConfig+0x12e6>
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6852      	ldr	r2, [r2, #4]
 800641a:	0852      	lsrs	r2, r2, #1
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	61fb      	str	r3, [r7, #28]
        break;
 800642a:	e002      	b.n	8006432 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	76fb      	strb	r3, [r7, #27]
        break;
 8006430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b0f      	cmp	r3, #15
 8006436:	d908      	bls.n	800644a <UART_SetConfig+0x131a>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643e:	d204      	bcs.n	800644a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	e001      	b.n	800644e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800646a:	7efb      	ldrb	r3, [r7, #27]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3728      	adds	r7, #40	; 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006476:	bf00      	nop
 8006478:	00f42400 	.word	0x00f42400
 800647c:	0001e848 	.word	0x0001e848
 8006480:	0003d090 	.word	0x0003d090
 8006484:	0007a120 	.word	0x0007a120
 8006488:	000f4240 	.word	0x000f4240
 800648c:	00145855 	.word	0x00145855
 8006490:	00186a00 	.word	0x00186a00
 8006494:	001e8480 	.word	0x001e8480
 8006498:	0028b0aa 	.word	0x0028b0aa
 800649c:	003d0900 	.word	0x003d0900
 80064a0:	007a1200 	.word	0x007a1200

080064a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01a      	beq.n	80065ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a2:	d10a      	bne.n	80065ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065f8:	f7fa f878 	bl	80006ec <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d10e      	bne.n	800662a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f82c 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e022      	b.n	8006670 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b04      	cmp	r3, #4
 8006636:	d10e      	bne.n	8006656 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f816 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e00c      	b.n	8006670 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006688:	e02c      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006690:	d028      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006692:	f7fa f82b 	bl	80006ec <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d302      	bcc.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11d      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e00f      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d0c3      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006722:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006732:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800675e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d114      	bne.n	80067d4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067d2:	e002      	b.n	80067da <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7fe fc8b 	bl	80050f0 <HAL_UART_TxCpltCallback>
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fe fc87 	bl	8005104 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b086      	sub	sp, #24
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006812:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b80      	cmp	r3, #128	; 0x80
 8006828:	d109      	bne.n	800683e <UART_DMAError+0x40>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b21      	cmp	r3, #33	; 0x21
 800682e:	d106      	bne.n	800683e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2200      	movs	r2, #0
 8006834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006838:	6978      	ldr	r0, [r7, #20]
 800683a:	f7ff ff67 	bl	800670c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d109      	bne.n	8006860 <UART_DMAError+0x62>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b22      	cmp	r3, #34	; 0x22
 8006850:	d106      	bne.n	8006860 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f7ff ff74 	bl	8006748 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f043 0210 	orr.w	r2, r3, #16
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006870:	6978      	ldr	r0, [r7, #20]
 8006872:	f7fe fc51 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006876:	bf00      	nop
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7fe fc3b 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fe fc0d 	bl	80050f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f4:	2b22      	cmp	r3, #34	; 0x22
 80068f6:	d13b      	bne.n	8006970 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006900:	89bb      	ldrh	r3, [r7, #12]
 8006902:	b2d9      	uxtb	r1, r3
 8006904:	89fb      	ldrh	r3, [r7, #14]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690c:	400a      	ands	r2, r1
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d122      	bne.n	8006980 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006948:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f003 fc4f 	bl	800a20c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800696e:	e007      	b.n	8006980 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	619a      	str	r2, [r3, #24]
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006996:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699e:	2b22      	cmp	r3, #34	; 0x22
 80069a0:	d13b      	bne.n	8006a1a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80069b0:	89ba      	ldrh	r2, [r7, #12]
 80069b2:	89fb      	ldrh	r3, [r7, #14]
 80069b4:	4013      	ands	r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d122      	bne.n	8006a2a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f003 fbfa 	bl	800a20c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a18:	e007      	b.n	8006a2a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699a      	ldr	r2, [r3, #24]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0208 	orr.w	r2, r2, #8
 8006a28:	619a      	str	r2, [r3, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a42:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a4a:	2b22      	cmp	r3, #34	; 0x22
 8006a4c:	d168      	bne.n	8006b20 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a54:	81fb      	strh	r3, [r7, #14]
 8006a56:	e03f      	b.n	8006ad8 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	b2d9      	uxtb	r1, r3
 8006a64:	89bb      	ldrh	r3, [r7, #12]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	400a      	ands	r2, r1
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11b      	bne.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f003 fb9d 	bl	800a20c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ad2:	89fb      	ldrh	r3, [r7, #14]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	81fb      	strh	r3, [r7, #14]
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1bc      	bne.n	8006a58 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d021      	beq.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006af2:	897a      	ldrh	r2, [r7, #10]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d21b      	bcs.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b06:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006b0c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0220 	orr.w	r2, r2, #32
 8006b1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b1e:	e007      	b.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	619a      	str	r2, [r3, #24]
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	080068df 	.word	0x080068df

08006b3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b4a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	2b22      	cmp	r3, #34	; 0x22
 8006b54:	d168      	bne.n	8006c28 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b5c:	82fb      	strh	r3, [r7, #22]
 8006b5e:	e03f      	b.n	8006be0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b6e:	8a3a      	ldrh	r2, [r7, #16]
 8006b70:	8abb      	ldrh	r3, [r7, #20]
 8006b72:	4013      	ands	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11b      	bne.n	8006bda <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f003 fb19 	bl	800a20c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006bda:	8afb      	ldrh	r3, [r7, #22]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	82fb      	strh	r3, [r7, #22]
 8006be0:	8afb      	ldrh	r3, [r7, #22]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1bc      	bne.n	8006b60 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bec:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d021      	beq.n	8006c38 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bfa:	8a7a      	ldrh	r2, [r7, #18]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d21b      	bcs.n	8006c38 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c0e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a0b      	ldr	r2, [pc, #44]	; (8006c40 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006c14:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0220 	orr.w	r2, r2, #32
 8006c24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c26:	e007      	b.n	8006c38 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0208 	orr.w	r2, r2, #8
 8006c36:	619a      	str	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08006989 	.word	0x08006989

08006c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e027      	b.n	8006ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e02d      	b.n	8006d66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2224      	movs	r2, #36	; 0x24
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f850 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e02d      	b.n	8006de2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2224      	movs	r2, #36	; 0x24
 8006d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f812 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006df4:	4a2f      	ldr	r2, [pc, #188]	; (8006eb4 <UARTEx_SetNbDataToProcess+0xc8>)
 8006df6:	f107 0314 	add.w	r3, r7, #20
 8006dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dfe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006e02:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <UARTEx_SetNbDataToProcess+0xcc>)
 8006e04:	f107 030c 	add.w	r3, r7, #12
 8006e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e28:	e03d      	b.n	8006ea6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	0e5b      	lsrs	r3, r3, #25
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	0f5b      	lsrs	r3, r3, #29
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006e52:	7fbb      	ldrb	r3, [r7, #30]
 8006e54:	7f3a      	ldrb	r2, [r7, #28]
 8006e56:	f107 0120 	add.w	r1, r7, #32
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	7f3a      	ldrb	r2, [r7, #28]
 8006e66:	f107 0120 	add.w	r1, r7, #32
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006e7c:	7ffb      	ldrb	r3, [r7, #31]
 8006e7e:	7f7a      	ldrb	r2, [r7, #29]
 8006e80:	f107 0120 	add.w	r1, r7, #32
 8006e84:	440a      	add	r2, r1
 8006e86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	7f7a      	ldrb	r2, [r7, #29]
 8006e90:	f107 0120 	add.w	r1, r7, #32
 8006e94:	440a      	add	r2, r1
 8006e96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ea6:	bf00      	nop
 8006ea8:	3724      	adds	r7, #36	; 0x24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	0800cea0 	.word	0x0800cea0
 8006eb8:	0800cea8 	.word	0x0800cea8

08006ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ec4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ec8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ef4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ef8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	b21a      	sxth	r2, r3
 8006f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f26:	b084      	sub	sp, #16
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	f107 0014 	add.w	r0, r7, #20
 8006f34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ffaf 	bl	8006ebc <USB_EnableGlobalInt>

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f6a:	b004      	add	sp, #16
 8006f6c:	4770      	bx	lr
	...

08006f70 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f70:	b490      	push	{r4, r7}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d819      	bhi.n	8006fd2 <USB_ActivateEndpoint+0x62>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USB_ActivateEndpoint+0x34>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc9 	.word	0x08006fc9
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	08006fbf 	.word	0x08006fbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006fb4:	89bb      	ldrh	r3, [r7, #12]
 8006fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fba:	81bb      	strh	r3, [r7, #12]
      break;
 8006fbc:	e00d      	b.n	8006fda <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006fbe:	89bb      	ldrh	r3, [r7, #12]
 8006fc0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006fc4:	81bb      	strh	r3, [r7, #12]
      break;
 8006fc6:	e008      	b.n	8006fda <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006fc8:	89bb      	ldrh	r3, [r7, #12]
 8006fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fce:	81bb      	strh	r3, [r7, #12]
      break;
 8006fd0:	e003      	b.n	8006fda <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd6:	e000      	b.n	8006fda <USB_ActivateEndpoint+0x6a>
      break;
 8006fd8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	89bb      	ldrh	r3, [r7, #12]
 8006fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	b21b      	sxth	r3, r3
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	b21a      	sxth	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b21b      	sxth	r3, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	b21b      	sxth	r3, r3
 800701e:	b29c      	uxth	r4, r3
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	4b8a      	ldr	r3, [pc, #552]	; (8007254 <USB_ActivateEndpoint+0x2e4>)
 800702c:	4323      	orrs	r3, r4
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	7b1b      	ldrb	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 8112 	bne.w	8007260 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d067      	beq.n	8007114 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007044:	687c      	ldr	r4, [r7, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	441c      	add	r4, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4423      	add	r3, r4
 8007058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705c:	461c      	mov	r4, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	88db      	ldrh	r3, [r3, #6]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29c      	uxth	r4, r3
 800707a:	4623      	mov	r3, r4
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d014      	beq.n	80070ae <USB_ActivateEndpoint+0x13e>
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	b29c      	uxth	r4, r3
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <USB_ActivateEndpoint+0x2e8>)
 80070a8:	4323      	orrs	r3, r4
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	78db      	ldrb	r3, [r3, #3]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d018      	beq.n	80070e8 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070cc:	b29c      	uxth	r4, r3
 80070ce:	f084 0320 	eor.w	r3, r4, #32
 80070d2:	b29c      	uxth	r4, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <USB_ActivateEndpoint+0x2e4>)
 80070e0:	4323      	orrs	r3, r4
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]
 80070e6:	e22b      	b.n	8007540 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	b29c      	uxth	r4, r3
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	441a      	add	r2, r3
 800710a:	4b52      	ldr	r3, [pc, #328]	; (8007254 <USB_ActivateEndpoint+0x2e4>)
 800710c:	4323      	orrs	r3, r4
 800710e:	b29b      	uxth	r3, r3
 8007110:	8013      	strh	r3, [r2, #0]
 8007112:	e215      	b.n	8007540 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007114:	687c      	ldr	r4, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	441c      	add	r4, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4423      	add	r3, r4
 8007128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800712c:	461c      	mov	r4, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	b29b      	uxth	r3, r3
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	b29b      	uxth	r3, r3
 800713a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800713c:	687c      	ldr	r4, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007144:	b29b      	uxth	r3, r3
 8007146:	441c      	add	r4, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4423      	add	r3, r4
 8007150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007154:	461c      	mov	r4, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10e      	bne.n	800717c <USB_ActivateEndpoint+0x20c>
 800715e:	8823      	ldrh	r3, [r4, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007166:	b29b      	uxth	r3, r3
 8007168:	8023      	strh	r3, [r4, #0]
 800716a:	8823      	ldrh	r3, [r4, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007176:	b29b      	uxth	r3, r3
 8007178:	8023      	strh	r3, [r4, #0]
 800717a:	e02d      	b.n	80071d8 <USB_ActivateEndpoint+0x268>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b3e      	cmp	r3, #62	; 0x3e
 8007182:	d812      	bhi.n	80071aa <USB_ActivateEndpoint+0x23a>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	60bb      	str	r3, [r7, #8]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <USB_ActivateEndpoint+0x22e>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3301      	adds	r3, #1
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	8023      	strh	r3, [r4, #0]
 80071a8:	e016      	b.n	80071d8 <USB_ActivateEndpoint+0x268>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <USB_ActivateEndpoint+0x254>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	029b      	lsls	r3, r3, #10
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29c      	uxth	r4, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d014      	beq.n	800721a <USB_ActivateEndpoint+0x2aa>
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	b29c      	uxth	r4, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <USB_ActivateEndpoint+0x2ec>)
 8007214:	4323      	orrs	r3, r4
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800722c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007230:	b29c      	uxth	r4, r3
 8007232:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007236:	b29c      	uxth	r4, r3
 8007238:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800723c:	b29c      	uxth	r4, r3
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USB_ActivateEndpoint+0x2e4>)
 800724a:	4323      	orrs	r3, r4
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]
 8007250:	e176      	b.n	8007540 <USB_ActivateEndpoint+0x5d0>
 8007252:	bf00      	nop
 8007254:	ffff8080 	.word	0xffff8080
 8007258:	ffff80c0 	.word	0xffff80c0
 800725c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	b29c      	uxth	r4, r3
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	4b96      	ldr	r3, [pc, #600]	; (80074dc <USB_ActivateEndpoint+0x56c>)
 8007284:	4323      	orrs	r3, r4
 8007286:	b29b      	uxth	r3, r3
 8007288:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800728a:	687c      	ldr	r4, [r7, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	441c      	add	r4, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4423      	add	r3, r4
 800729e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a2:	461c      	mov	r4, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	891b      	ldrh	r3, [r3, #8]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8023      	strh	r3, [r4, #0]
 80072b2:	687c      	ldr	r4, [r7, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	441c      	add	r4, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4423      	add	r3, r4
 80072c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ca:	461c      	mov	r4, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	895b      	ldrh	r3, [r3, #10]
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 8088 	bne.w	80073f4 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29c      	uxth	r4, r3
 80072f2:	4623      	mov	r3, r4
 80072f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d014      	beq.n	8007326 <USB_ActivateEndpoint+0x3b6>
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	b29c      	uxth	r4, r3
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	4b70      	ldr	r3, [pc, #448]	; (80074e0 <USB_ActivateEndpoint+0x570>)
 8007320:	4323      	orrs	r3, r4
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29c      	uxth	r4, r3
 8007334:	4623      	mov	r3, r4
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d014      	beq.n	8007368 <USB_ActivateEndpoint+0x3f8>
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007354:	b29c      	uxth	r4, r3
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	441a      	add	r2, r3
 8007360:	4b60      	ldr	r3, [pc, #384]	; (80074e4 <USB_ActivateEndpoint+0x574>)
 8007362:	4323      	orrs	r3, r4
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	b29c      	uxth	r4, r3
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	4b56      	ldr	r3, [pc, #344]	; (80074e4 <USB_ActivateEndpoint+0x574>)
 800738c:	4323      	orrs	r3, r4
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a8:	b29c      	uxth	r4, r3
 80073aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80073ae:	b29c      	uxth	r4, r3
 80073b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80073b4:	b29c      	uxth	r4, r3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	441a      	add	r2, r3
 80073c0:	4b49      	ldr	r3, [pc, #292]	; (80074e8 <USB_ActivateEndpoint+0x578>)
 80073c2:	4323      	orrs	r3, r4
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	b29c      	uxth	r4, r3
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	4b3f      	ldr	r3, [pc, #252]	; (80074e8 <USB_ActivateEndpoint+0x578>)
 80073ec:	4323      	orrs	r3, r4
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	8013      	strh	r3, [r2, #0]
 80073f2:	e0a5      	b.n	8007540 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29c      	uxth	r4, r3
 8007402:	4623      	mov	r3, r4
 8007404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d014      	beq.n	8007436 <USB_ActivateEndpoint+0x4c6>
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b29b      	uxth	r3, r3
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	b29c      	uxth	r4, r3
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <USB_ActivateEndpoint+0x570>)
 8007430:	4323      	orrs	r3, r4
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29c      	uxth	r4, r3
 8007444:	4623      	mov	r3, r4
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <USB_ActivateEndpoint+0x508>
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	b29c      	uxth	r4, r3
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	441a      	add	r2, r3
 8007470:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <USB_ActivateEndpoint+0x574>)
 8007472:	4323      	orrs	r3, r4
 8007474:	b29b      	uxth	r3, r3
 8007476:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	b29c      	uxth	r4, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	441a      	add	r2, r3
 800749a:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <USB_ActivateEndpoint+0x570>)
 800749c:	4323      	orrs	r3, r4
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	78db      	ldrb	r3, [r3, #3]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d020      	beq.n	80074ec <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	b29c      	uxth	r4, r3
 80074c2:	f084 0320 	eor.w	r3, r4, #32
 80074c6:	b29c      	uxth	r4, r3
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <USB_ActivateEndpoint+0x578>)
 80074d4:	4323      	orrs	r3, r4
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
 80074da:	e01c      	b.n	8007516 <USB_ActivateEndpoint+0x5a6>
 80074dc:	ffff8180 	.word	0xffff8180
 80074e0:	ffffc080 	.word	0xffffc080
 80074e4:	ffff80c0 	.word	0xffff80c0
 80074e8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007502:	b29c      	uxth	r4, r3
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <USB_ActivateEndpoint+0x5dc>)
 8007510:	4323      	orrs	r3, r4
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752c:	b29c      	uxth	r4, r3
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <USB_ActivateEndpoint+0x5dc>)
 800753a:	4323      	orrs	r3, r4
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bc90      	pop	{r4, r7}
 800754a:	4770      	bx	lr
 800754c:	ffff8080 	.word	0xffff8080

08007550 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007550:	b490      	push	{r4, r7}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	7b1b      	ldrb	r3, [r3, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d171      	bne.n	8007646 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d036      	beq.n	80075d8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29c      	uxth	r4, r3
 8007578:	4623      	mov	r3, r4
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d014      	beq.n	80075ac <USB_DeactivateEndpoint+0x5c>
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007598:	b29c      	uxth	r4, r3
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	4b6b      	ldr	r3, [pc, #428]	; (8007754 <USB_DeactivateEndpoint+0x204>)
 80075a6:	4323      	orrs	r3, r4
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c2:	b29c      	uxth	r4, r3
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	4b62      	ldr	r3, [pc, #392]	; (8007758 <USB_DeactivateEndpoint+0x208>)
 80075d0:	4323      	orrs	r3, r4
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	8013      	strh	r3, [r2, #0]
 80075d6:	e144      	b.n	8007862 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29c      	uxth	r4, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d014      	beq.n	800761a <USB_DeactivateEndpoint+0xca>
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	b29c      	uxth	r4, r3
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	4b52      	ldr	r3, [pc, #328]	; (800775c <USB_DeactivateEndpoint+0x20c>)
 8007614:	4323      	orrs	r3, r4
 8007616:	b29b      	uxth	r3, r3
 8007618:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	b29c      	uxth	r4, r3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	441a      	add	r2, r3
 800763c:	4b46      	ldr	r3, [pc, #280]	; (8007758 <USB_DeactivateEndpoint+0x208>)
 800763e:	4323      	orrs	r3, r4
 8007640:	b29b      	uxth	r3, r3
 8007642:	8013      	strh	r3, [r2, #0]
 8007644:	e10d      	b.n	8007862 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 8088 	bne.w	8007760 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29c      	uxth	r4, r3
 800765e:	4623      	mov	r3, r4
 8007660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d014      	beq.n	8007692 <USB_DeactivateEndpoint+0x142>
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	b29c      	uxth	r4, r3
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	4b34      	ldr	r3, [pc, #208]	; (800775c <USB_DeactivateEndpoint+0x20c>)
 800768c:	4323      	orrs	r3, r4
 800768e:	b29b      	uxth	r3, r3
 8007690:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29c      	uxth	r4, r3
 80076a0:	4623      	mov	r3, r4
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d014      	beq.n	80076d4 <USB_DeactivateEndpoint+0x184>
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c0:	b29c      	uxth	r4, r3
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	4b21      	ldr	r3, [pc, #132]	; (8007754 <USB_DeactivateEndpoint+0x204>)
 80076ce:	4323      	orrs	r3, r4
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	b29c      	uxth	r4, r3
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	4b17      	ldr	r3, [pc, #92]	; (8007754 <USB_DeactivateEndpoint+0x204>)
 80076f8:	4323      	orrs	r3, r4
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007714:	b29c      	uxth	r4, r3
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	441a      	add	r2, r3
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <USB_DeactivateEndpoint+0x208>)
 8007722:	4323      	orrs	r3, r4
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773e:	b29c      	uxth	r4, r3
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	4b03      	ldr	r3, [pc, #12]	; (8007758 <USB_DeactivateEndpoint+0x208>)
 800774c:	4323      	orrs	r3, r4
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]
 8007752:	e086      	b.n	8007862 <USB_DeactivateEndpoint+0x312>
 8007754:	ffff80c0 	.word	0xffff80c0
 8007758:	ffff8080 	.word	0xffff8080
 800775c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29c      	uxth	r4, r3
 800776e:	4623      	mov	r3, r4
 8007770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <USB_DeactivateEndpoint+0x252>
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	b29c      	uxth	r4, r3
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	4b35      	ldr	r3, [pc, #212]	; (8007870 <USB_DeactivateEndpoint+0x320>)
 800779c:	4323      	orrs	r3, r4
 800779e:	b29b      	uxth	r3, r3
 80077a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29c      	uxth	r4, r3
 80077b0:	4623      	mov	r3, r4
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d014      	beq.n	80077e4 <USB_DeactivateEndpoint+0x294>
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	b29c      	uxth	r4, r3
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	441a      	add	r2, r3
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <USB_DeactivateEndpoint+0x324>)
 80077de:	4323      	orrs	r3, r4
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	b29c      	uxth	r4, r3
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <USB_DeactivateEndpoint+0x320>)
 8007808:	4323      	orrs	r3, r4
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007824:	b29c      	uxth	r4, r3
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	441a      	add	r2, r3
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <USB_DeactivateEndpoint+0x328>)
 8007832:	4323      	orrs	r3, r4
 8007834:	b29b      	uxth	r3, r3
 8007836:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	b29c      	uxth	r4, r3
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	441a      	add	r2, r3
 800785a:	4b07      	ldr	r3, [pc, #28]	; (8007878 <USB_DeactivateEndpoint+0x328>)
 800785c:	4323      	orrs	r3, r4
 800785e:	b29b      	uxth	r3, r3
 8007860:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bc90      	pop	{r4, r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	ffffc080 	.word	0xffffc080
 8007874:	ffff80c0 	.word	0xffff80c0
 8007878:	ffff8080 	.word	0xffff8080

0800787c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b08d      	sub	sp, #52	; 0x34
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b01      	cmp	r3, #1
 800788c:	f040 8160 	bne.w	8007b50 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	429a      	cmp	r2, r3
 800789a:	d909      	bls.n	80078b0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	619a      	str	r2, [r3, #24]
 80078ae:	e005      	b.n	80078bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	7b1b      	ldrb	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d119      	bne.n	80078f8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	6959      	ldr	r1, [r3, #20]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88da      	ldrh	r2, [r3, #6]
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fba8 	bl	8008026 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078d6:	687c      	ldr	r4, [r7, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	441c      	add	r4, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4423      	add	r3, r4
 80078ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078ee:	461c      	mov	r4, r3
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8023      	strh	r3, [r4, #0]
 80078f6:	e10f      	b.n	8007b18 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d065      	beq.n	80079da <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800790e:	687c      	ldr	r4, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d148      	bne.n	80079aa <USB_EPStartXfer+0x12e>
 8007918:	687c      	ldr	r4, [r7, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	441c      	add	r4, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4423      	add	r3, r4
 800792c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007930:	461c      	mov	r4, r3
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10e      	bne.n	8007956 <USB_EPStartXfer+0xda>
 8007938:	8823      	ldrh	r3, [r4, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007940:	b29b      	uxth	r3, r3
 8007942:	8023      	strh	r3, [r4, #0]
 8007944:	8823      	ldrh	r3, [r4, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007950:	b29b      	uxth	r3, r3
 8007952:	8023      	strh	r3, [r4, #0]
 8007954:	e03d      	b.n	80079d2 <USB_EPStartXfer+0x156>
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	2b3e      	cmp	r3, #62	; 0x3e
 800795a:	d810      	bhi.n	800797e <USB_EPStartXfer+0x102>
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <USB_EPStartXfer+0xf6>
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	3301      	adds	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	b29b      	uxth	r3, r3
 8007976:	029b      	lsls	r3, r3, #10
 8007978:	b29b      	uxth	r3, r3
 800797a:	8023      	strh	r3, [r4, #0]
 800797c:	e029      	b.n	80079d2 <USB_EPStartXfer+0x156>
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <USB_EPStartXfer+0x118>
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	3b01      	subs	r3, #1
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	b29b      	uxth	r3, r3
 8007998:	029b      	lsls	r3, r3, #10
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	8023      	strh	r3, [r4, #0]
 80079a8:	e013      	b.n	80079d2 <USB_EPStartXfer+0x156>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d10f      	bne.n	80079d2 <USB_EPStartXfer+0x156>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	441c      	add	r4, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4423      	add	r3, r4
 80079c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	895b      	ldrh	r3, [r3, #10]
 80079d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80079d8:	e063      	b.n	8007aa2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d148      	bne.n	8007a74 <USB_EPStartXfer+0x1f8>
 80079e2:	687c      	ldr	r4, [r7, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	441c      	add	r4, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	4423      	add	r3, r4
 80079f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079fa:	461c      	mov	r4, r3
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10e      	bne.n	8007a20 <USB_EPStartXfer+0x1a4>
 8007a02:	8823      	ldrh	r3, [r4, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8023      	strh	r3, [r4, #0]
 8007a0e:	8823      	ldrh	r3, [r4, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	8023      	strh	r3, [r4, #0]
 8007a1e:	e03d      	b.n	8007a9c <USB_EPStartXfer+0x220>
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	2b3e      	cmp	r3, #62	; 0x3e
 8007a24:	d810      	bhi.n	8007a48 <USB_EPStartXfer+0x1cc>
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	623b      	str	r3, [r7, #32]
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <USB_EPStartXfer+0x1c0>
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	623b      	str	r3, [r7, #32]
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	029b      	lsls	r3, r3, #10
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8023      	strh	r3, [r4, #0]
 8007a46:	e029      	b.n	8007a9c <USB_EPStartXfer+0x220>
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	f003 031f 	and.w	r3, r3, #31
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <USB_EPStartXfer+0x1e2>
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8023      	strh	r3, [r4, #0]
 8007a72:	e013      	b.n	8007a9c <USB_EPStartXfer+0x220>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d10f      	bne.n	8007a9c <USB_EPStartXfer+0x220>
 8007a7c:	687c      	ldr	r4, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	441c      	add	r4, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4423      	add	r3, r4
 8007a90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a94:	461c      	mov	r4, r3
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	891b      	ldrh	r3, [r3, #8]
 8007aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6959      	ldr	r1, [r3, #20]
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 faba 	bl	8008026 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d115      	bne.n	8007ae6 <USB_EPStartXfer+0x26a>
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad0:	b29c      	uxth	r4, r3
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	441a      	add	r2, r3
 8007adc:	4b9a      	ldr	r3, [pc, #616]	; (8007d48 <USB_EPStartXfer+0x4cc>)
 8007ade:	4323      	orrs	r3, r4
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	8013      	strh	r3, [r2, #0]
 8007ae4:	e018      	b.n	8007b18 <USB_EPStartXfer+0x29c>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d114      	bne.n	8007b18 <USB_EPStartXfer+0x29c>
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b04:	b29c      	uxth	r4, r3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	4b8e      	ldr	r3, [pc, #568]	; (8007d4c <USB_EPStartXfer+0x4d0>)
 8007b12:	4323      	orrs	r3, r4
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2e:	b29c      	uxth	r4, r3
 8007b30:	f084 0310 	eor.w	r3, r4, #16
 8007b34:	b29c      	uxth	r4, r3
 8007b36:	f084 0320 	eor.w	r3, r4, #32
 8007b3a:	b29c      	uxth	r4, r3
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	4b82      	ldr	r3, [pc, #520]	; (8007d50 <USB_EPStartXfer+0x4d4>)
 8007b48:	4323      	orrs	r3, r4
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
 8007b4e:	e146      	b.n	8007dde <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d909      	bls.n	8007b70 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	619a      	str	r2, [r3, #24]
 8007b6e:	e005      	b.n	8007b7c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	7b1b      	ldrb	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d148      	bne.n	8007c16 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b84:	687c      	ldr	r4, [r7, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	441c      	add	r4, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4423      	add	r3, r4
 8007b98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b9c:	461c      	mov	r4, r3
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10e      	bne.n	8007bc2 <USB_EPStartXfer+0x346>
 8007ba4:	8823      	ldrh	r3, [r4, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8023      	strh	r3, [r4, #0]
 8007bb0:	8823      	ldrh	r3, [r4, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8023      	strh	r3, [r4, #0]
 8007bc0:	e0f2      	b.n	8007da8 <USB_EPStartXfer+0x52c>
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc6:	d810      	bhi.n	8007bea <USB_EPStartXfer+0x36e>
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <USB_EPStartXfer+0x362>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	029b      	lsls	r3, r3, #10
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	8023      	strh	r3, [r4, #0]
 8007be8:	e0de      	b.n	8007da8 <USB_EPStartXfer+0x52c>
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <USB_EPStartXfer+0x384>
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8023      	strh	r3, [r4, #0]
 8007c14:	e0c8      	b.n	8007da8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d148      	bne.n	8007cb0 <USB_EPStartXfer+0x434>
 8007c1e:	687c      	ldr	r4, [r7, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	441c      	add	r4, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4423      	add	r3, r4
 8007c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c36:	461c      	mov	r4, r3
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10e      	bne.n	8007c5c <USB_EPStartXfer+0x3e0>
 8007c3e:	8823      	ldrh	r3, [r4, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8023      	strh	r3, [r4, #0]
 8007c4a:	8823      	ldrh	r3, [r4, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8023      	strh	r3, [r4, #0]
 8007c5a:	e03d      	b.n	8007cd8 <USB_EPStartXfer+0x45c>
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c60:	d810      	bhi.n	8007c84 <USB_EPStartXfer+0x408>
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <USB_EPStartXfer+0x3fc>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3301      	adds	r3, #1
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8023      	strh	r3, [r4, #0]
 8007c82:	e029      	b.n	8007cd8 <USB_EPStartXfer+0x45c>
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <USB_EPStartXfer+0x41e>
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	61bb      	str	r3, [r7, #24]
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	029b      	lsls	r3, r3, #10
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	8023      	strh	r3, [r4, #0]
 8007cae:	e013      	b.n	8007cd8 <USB_EPStartXfer+0x45c>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10f      	bne.n	8007cd8 <USB_EPStartXfer+0x45c>
 8007cb8:	687c      	ldr	r4, [r7, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	441c      	add	r4, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4423      	add	r3, r4
 8007ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cd0:	461c      	mov	r4, r3
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8023      	strh	r3, [r4, #0]
 8007cd8:	687c      	ldr	r4, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d14e      	bne.n	8007d80 <USB_EPStartXfer+0x504>
 8007ce2:	687c      	ldr	r4, [r7, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	441c      	add	r4, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4423      	add	r3, r4
 8007cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cfa:	461c      	mov	r4, r3
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10e      	bne.n	8007d20 <USB_EPStartXfer+0x4a4>
 8007d02:	8823      	ldrh	r3, [r4, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	8023      	strh	r3, [r4, #0]
 8007d0e:	8823      	ldrh	r3, [r4, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8023      	strh	r3, [r4, #0]
 8007d1e:	e043      	b.n	8007da8 <USB_EPStartXfer+0x52c>
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	2b3e      	cmp	r3, #62	; 0x3e
 8007d24:	d816      	bhi.n	8007d54 <USB_EPStartXfer+0x4d8>
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <USB_EPStartXfer+0x4c0>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	029b      	lsls	r3, r3, #10
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8023      	strh	r3, [r4, #0]
 8007d46:	e02f      	b.n	8007da8 <USB_EPStartXfer+0x52c>
 8007d48:	ffff80c0 	.word	0xffff80c0
 8007d4c:	ffffc080 	.word	0xffffc080
 8007d50:	ffff8080 	.word	0xffff8080
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <USB_EPStartXfer+0x4ee>
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	029b      	lsls	r3, r3, #10
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8023      	strh	r3, [r4, #0]
 8007d7e:	e013      	b.n	8007da8 <USB_EPStartXfer+0x52c>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10f      	bne.n	8007da8 <USB_EPStartXfer+0x52c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	441c      	add	r4, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4423      	add	r3, r4
 8007d9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	b29c      	uxth	r4, r3
 8007dc0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007dc4:	b29c      	uxth	r4, r3
 8007dc6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007dca:	b29c      	uxth	r4, r3
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <USB_EPStartXfer+0x56c>)
 8007dd8:	4323      	orrs	r3, r4
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3734      	adds	r7, #52	; 0x34
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd90      	pop	{r4, r7, pc}
 8007de8:	ffff8080 	.word	0xffff8080

08007dec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dec:	b490      	push	{r4, r7}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e14:	b29c      	uxth	r4, r3
 8007e16:	f084 0310 	eor.w	r3, r4, #16
 8007e1a:	b29c      	uxth	r4, r3
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <USB_EPSetStall+0x80>)
 8007e28:	4323      	orrs	r3, r4
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]
 8007e2e:	e017      	b.n	8007e60 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	b29c      	uxth	r4, r3
 8007e48:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007e4c:	b29c      	uxth	r4, r3
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	441a      	add	r2, r3
 8007e58:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <USB_EPSetStall+0x80>)
 8007e5a:	4323      	orrs	r3, r4
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc90      	pop	{r4, r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	ffff8080 	.word	0xffff8080

08007e70 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e70:	b490      	push	{r4, r7}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	7b1b      	ldrb	r3, [r3, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d17d      	bne.n	8007f7e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d03d      	beq.n	8007f06 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29c      	uxth	r4, r3
 8007e98:	4623      	mov	r3, r4
 8007e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d014      	beq.n	8007ecc <USB_EPClearStall+0x5c>
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	b29c      	uxth	r4, r3
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	4b31      	ldr	r3, [pc, #196]	; (8007f8c <USB_EPClearStall+0x11c>)
 8007ec6:	4323      	orrs	r3, r4
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d054      	beq.n	8007f7e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eea:	b29c      	uxth	r4, r3
 8007eec:	f084 0320 	eor.w	r3, r4, #32
 8007ef0:	b29c      	uxth	r4, r3
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <USB_EPClearStall+0x120>)
 8007efe:	4323      	orrs	r3, r4
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]
 8007f04:	e03b      	b.n	8007f7e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29c      	uxth	r4, r3
 8007f14:	4623      	mov	r3, r4
 8007f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d014      	beq.n	8007f48 <USB_EPClearStall+0xd8>
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f34:	b29c      	uxth	r4, r3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <USB_EPClearStall+0x124>)
 8007f42:	4323      	orrs	r3, r4
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5e:	b29c      	uxth	r4, r3
 8007f60:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007f64:	b29c      	uxth	r4, r3
 8007f66:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007f6a:	b29c      	uxth	r4, r3
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	441a      	add	r2, r3
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <USB_EPClearStall+0x120>)
 8007f78:	4323      	orrs	r3, r4
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc90      	pop	{r4, r7}
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	ffff80c0 	.word	0xffff80c0
 8007f90:	ffff8080 	.word	0xffff8080
 8007f94:	ffffc080 	.word	0xffffc080

08007f98 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008000:	68fb      	ldr	r3, [r7, #12]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008026:	b480      	push	{r7}
 8008028:	b08d      	sub	sp, #52	; 0x34
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	4611      	mov	r1, r2
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	80fb      	strh	r3, [r7, #6]
 8008038:	4613      	mov	r3, r2
 800803a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800803c:	88bb      	ldrh	r3, [r7, #4]
 800803e:	3301      	adds	r3, #1
 8008040:	085b      	lsrs	r3, r3, #1
 8008042:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805c:	e01b      	b.n	8008096 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	3301      	adds	r3, #1
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	b29a      	uxth	r2, r3
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	3302      	adds	r3, #2
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	3301      	adds	r3, #1
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	3b01      	subs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e0      	bne.n	800805e <USB_WritePMA+0x38>
  }
}
 800809c:	bf00      	nop
 800809e:	3734      	adds	r7, #52	; 0x34
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b08b      	sub	sp, #44	; 0x2c
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4611      	mov	r1, r2
 80080b4:	461a      	mov	r2, r3
 80080b6:	460b      	mov	r3, r1
 80080b8:	80fb      	strh	r3, [r7, #6]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080be:	88bb      	ldrh	r3, [r7, #4]
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080d8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	e018      	b.n	8008112 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	3302      	adds	r3, #2
 80080ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	3301      	adds	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b2da      	uxtb	r2, r3
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	3301      	adds	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	3b01      	subs	r3, #1
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e3      	bne.n	80080e0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008118:	88bb      	ldrh	r3, [r7, #4]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	b2da      	uxtb	r2, r3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	701a      	strb	r2, [r3, #0]
  }
}
 8008134:	bf00      	nop
 8008136:	372c      	adds	r7, #44	; 0x2c
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7c1b      	ldrb	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d115      	bne.n	8008184 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800815c:	2202      	movs	r2, #2
 800815e:	2181      	movs	r1, #129	; 0x81
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f003 faa6 	bl	800b6b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800816c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008170:	2202      	movs	r2, #2
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f003 fa9c 	bl	800b6b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008182:	e012      	b.n	80081aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008184:	2340      	movs	r3, #64	; 0x40
 8008186:	2202      	movs	r2, #2
 8008188:	2181      	movs	r1, #129	; 0x81
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f003 fa91 	bl	800b6b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008196:	2340      	movs	r3, #64	; 0x40
 8008198:	2202      	movs	r2, #2
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f003 fa88 	bl	800b6b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081aa:	2308      	movs	r3, #8
 80081ac:	2203      	movs	r2, #3
 80081ae:	2182      	movs	r1, #130	; 0x82
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f003 fa7e 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081c0:	f003 fbce 	bl	800b960 <USBD_static_malloc>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80081d6:	2301      	movs	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
 80081da:	e026      	b.n	800822a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800820c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008210:	2101      	movs	r1, #1
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f003 fb38 	bl	800b888 <USBD_LL_PrepareReceive>
 8008218:	e007      	b.n	800822a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008220:	2340      	movs	r3, #64	; 0x40
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f003 fb2f 	bl	800b888 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008244:	2181      	movs	r1, #129	; 0x81
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f003 fa59 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008252:	2101      	movs	r1, #1
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f003 fa52 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008262:	2182      	movs	r1, #130	; 0x82
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f003 fa4a 	bl	800b6fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	4618      	mov	r0, r3
 800828c:	f003 fb76 	bl	800b97c <USBD_static_free>
    pdev->pClassData = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d039      	beq.n	8008340 <USBD_CDC_Setup+0x9e>
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d17c      	bne.n	80083ca <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d029      	beq.n	800832c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da11      	bge.n	8008306 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80082ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	88d2      	ldrh	r2, [r2, #6]
 80082f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082f6:	6939      	ldr	r1, [r7, #16]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fa2a 	bl	8009758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008304:	e068      	b.n	80083d8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785a      	ldrb	r2, [r3, #1]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800831c:	6939      	ldr	r1, [r7, #16]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	461a      	mov	r2, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fa45 	bl	80097b4 <USBD_CtlPrepareRx>
      break;
 800832a:	e055      	b.n	80083d8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	7850      	ldrb	r0, [r2, #1]
 8008338:	2200      	movs	r2, #0
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	4798      	blx	r3
      break;
 800833e:	e04b      	b.n	80083d8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b0a      	cmp	r3, #10
 8008346:	d017      	beq.n	8008378 <USBD_CDC_Setup+0xd6>
 8008348:	2b0b      	cmp	r3, #11
 800834a:	d029      	beq.n	80083a0 <USBD_CDC_Setup+0xfe>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d133      	bne.n	80083b8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008356:	2b03      	cmp	r3, #3
 8008358:	d107      	bne.n	800836a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	2202      	movs	r2, #2
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 f9f8 	bl	8009758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008368:	e02e      	b.n	80083c8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f988 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 8008372:	2302      	movs	r3, #2
 8008374:	75fb      	strb	r3, [r7, #23]
          break;
 8008376:	e027      	b.n	80083c8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837e:	2b03      	cmp	r3, #3
 8008380:	d107      	bne.n	8008392 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008382:	f107 030f 	add.w	r3, r7, #15
 8008386:	2201      	movs	r2, #1
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 f9e4 	bl	8009758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008390:	e01a      	b.n	80083c8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f974 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 800839a:	2302      	movs	r3, #2
 800839c:	75fb      	strb	r3, [r7, #23]
          break;
 800839e:	e013      	b.n	80083c8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d00d      	beq.n	80083c6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 f968 	bl	8009682 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b2:	2302      	movs	r3, #2
 80083b4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083b6:	e006      	b.n	80083c6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 f961 	bl	8009682 <USBD_CtlError>
          ret = USBD_FAIL;
 80083c0:	2302      	movs	r3, #2
 80083c2:	75fb      	strb	r3, [r7, #23]
          break;
 80083c4:	e000      	b.n	80083c8 <USBD_CDC_Setup+0x126>
          break;
 80083c6:	bf00      	nop
      }
      break;
 80083c8:	e006      	b.n	80083d8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f958 	bl	8009682 <USBD_CtlError>
      ret = USBD_FAIL;
 80083d2:	2302      	movs	r3, #2
 80083d4:	75fb      	strb	r3, [r7, #23]
      break;
 80083d6:	bf00      	nop
  }

  return ret;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008404:	2b00      	cmp	r3, #0
 8008406:	d037      	beq.n	8008478 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	331c      	adds	r3, #28
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d026      	beq.n	800846c <USBD_CDC_DataIn+0x8a>
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	331c      	adds	r3, #28
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	0152      	lsls	r2, r2, #5
 8008436:	440a      	add	r2, r1
 8008438:	3238      	adds	r2, #56	; 0x38
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008440:	fb02 f201 	mul.w	r2, r2, r1
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d110      	bne.n	800846c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	331c      	adds	r3, #28
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800845e:	78f9      	ldrb	r1, [r7, #3]
 8008460:	2300      	movs	r3, #0
 8008462:	2200      	movs	r2, #0
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f003 f9ec 	bl	800b842 <USBD_LL_Transmit>
 800846a:	e003      	b.n	8008474 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	e000      	b.n	800847a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008478:	2302      	movs	r3, #2
  }
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f003 fa17 	bl	800b8ce <USBD_LL_GetRxDataSize>
 80084a0:	4602      	mov	r2, r0
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084c6:	4611      	mov	r1, r2
 80084c8:	4798      	blx	r3

    return USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e000      	b.n	80084d0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80084ce:	2302      	movs	r3, #2
  }
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d015      	beq.n	800851e <USBD_CDC_EP0_RxReady+0x46>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084f8:	2bff      	cmp	r3, #255	; 0xff
 80084fa:	d010      	beq.n	800851e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800850a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008512:	b292      	uxth	r2, r2
 8008514:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	22ff      	movs	r2, #255	; 0xff
 800851a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2243      	movs	r2, #67	; 0x43
 8008534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008536:	4b03      	ldr	r3, [pc, #12]	; (8008544 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	20000090 	.word	0x20000090

08008548 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2243      	movs	r2, #67	; 0x43
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008556:	4b03      	ldr	r3, [pc, #12]	; (8008564 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	2000004c 	.word	0x2000004c

08008568 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2243      	movs	r2, #67	; 0x43
 8008574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008576:	4b03      	ldr	r3, [pc, #12]	; (8008584 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	200000d4 	.word	0x200000d4

08008588 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	220a      	movs	r2, #10
 8008594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	20000008 	.word	0x20000008

080085a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80085b2:	2302      	movs	r3, #2
 80085b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b087      	sub	sp, #28
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	60b9      	str	r1, [r7, #8]
 80085e0:	4613      	mov	r3, r2
 80085e2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01c      	beq.n	8008686 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008652:	2b00      	cmp	r3, #0
 8008654:	d115      	bne.n	8008682 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008674:	b29b      	uxth	r3, r3
 8008676:	2181      	movs	r1, #129	; 0x81
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f003 f8e2 	bl	800b842 <USBD_LL_Transmit>

      return USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e002      	b.n	8008688 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d017      	beq.n	80086da <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7c1b      	ldrb	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d109      	bne.n	80086c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086bc:	2101      	movs	r1, #1
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f003 f8e2 	bl	800b888 <USBD_LL_PrepareReceive>
 80086c4:	e007      	b.n	80086d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086cc:	2340      	movs	r3, #64	; 0x40
 80086ce:	2101      	movs	r1, #1
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f003 f8d9 	bl	800b888 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e000      	b.n	80086dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80086da:	2302      	movs	r3, #2
  }
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086f8:	2302      	movs	r3, #2
 80086fa:	e01a      	b.n	8008732 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	79fa      	ldrb	r2, [r7, #7]
 8008728:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f002 ff46 	bl	800b5bc <USBD_LL_Init>

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d006      	beq.n	800875c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	e001      	b.n	8008760 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800875c:	2302      	movs	r3, #2
 800875e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f002 ff80 	bl	800b67c <USBD_LL_Start>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087a8:	2302      	movs	r3, #2
 80087aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	4611      	mov	r1, r2
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fef8 	bl	8009608 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	2b01      	cmp	r3, #1
 800883a:	d00c      	beq.n	8008856 <USBD_LL_SetupStage+0x56>
 800883c:	2b01      	cmp	r3, #1
 800883e:	d302      	bcc.n	8008846 <USBD_LL_SetupStage+0x46>
 8008840:	2b02      	cmp	r3, #2
 8008842:	d010      	beq.n	8008866 <USBD_LL_SetupStage+0x66>
 8008844:	e017      	b.n	8008876 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9ce 	bl	8008bf0 <USBD_StdDevReq>
      break;
 8008854:	e01a      	b.n	800888c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa30 	bl	8008cc4 <USBD_StdItfReq>
      break;
 8008864:	e012      	b.n	800888c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa6e 	bl	8008d50 <USBD_StdEPReq>
      break;
 8008874:	e00a      	b.n	800888c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800887c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008880:	b2db      	uxtb	r3, r3
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f002 ff59 	bl	800b73c <USBD_LL_StallEP>
      break;
 800888a:	bf00      	nop
  }

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	460b      	mov	r3, r1
 80088a0:	607a      	str	r2, [r7, #4]
 80088a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d14b      	bne.n	8008942 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80088b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d134      	bne.n	8008926 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d919      	bls.n	80088fc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088de:	429a      	cmp	r2, r3
 80088e0:	d203      	bcs.n	80088ea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	e002      	b.n	80088f0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 ff7b 	bl	80097f0 <USBD_CtlContinueRx>
 80088fa:	e038      	b.n	800896e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800890e:	2b03      	cmp	r3, #3
 8008910:	d105      	bne.n	800891e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 ff78 	bl	8009814 <USBD_CtlSendStatus>
 8008924:	e023      	b.n	800896e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800892c:	2b05      	cmp	r3, #5
 800892e:	d11e      	bne.n	800896e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f002 fefe 	bl	800b73c <USBD_LL_StallEP>
 8008940:	e015      	b.n	800896e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008954:	2b03      	cmp	r3, #3
 8008956:	d108      	bne.n	800896a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	7afa      	ldrb	r2, [r7, #11]
 8008962:	4611      	mov	r1, r2
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	4798      	blx	r3
 8008968:	e001      	b.n	800896e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800896a:	2302      	movs	r3, #2
 800896c:	e000      	b.n	8008970 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	460b      	mov	r3, r1
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008986:	7afb      	ldrb	r3, [r7, #11]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d17f      	bne.n	8008a8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3314      	adds	r3, #20
 8008990:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008998:	2b02      	cmp	r3, #2
 800899a:	d15c      	bne.n	8008a56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d915      	bls.n	80089d4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	1ad2      	subs	r2, r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fee5 	bl	8009790 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089c6:	2300      	movs	r3, #0
 80089c8:	2200      	movs	r2, #0
 80089ca:	2100      	movs	r1, #0
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f002 ff5b 	bl	800b888 <USBD_LL_PrepareReceive>
 80089d2:	e04e      	b.n	8008a72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	6912      	ldr	r2, [r2, #16]
 80089dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80089e0:	fb02 f201 	mul.w	r2, r2, r1
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d11c      	bne.n	8008a24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d316      	bcc.n	8008a24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d20f      	bcs.n	8008a24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fec1 	bl	8009790 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a16:	2300      	movs	r3, #0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f002 ff33 	bl	800b888 <USBD_LL_PrepareReceive>
 8008a22:	e026      	b.n	8008a72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d105      	bne.n	8008a46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f002 fe77 	bl	800b73c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fef3 	bl	800983a <USBD_CtlReceiveStatus>
 8008a54:	e00d      	b.n	8008a72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d004      	beq.n	8008a6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d103      	bne.n	8008a72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f002 fe65 	bl	800b73c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d11d      	bne.n	8008ab8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fe82 	bl	8008786 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a8a:	e015      	b.n	8008ab8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00d      	beq.n	8008ab4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d108      	bne.n	8008ab4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	7afa      	ldrb	r2, [r7, #11]
 8008aac:	4611      	mov	r1, r2
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4798      	blx	r3
 8008ab2:	e001      	b.n	8008ab8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e000      	b.n	8008aba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aca:	2340      	movs	r3, #64	; 0x40
 8008acc:	2200      	movs	r2, #0
 8008ace:	2100      	movs	r1, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f002 fdee 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2240      	movs	r2, #64	; 0x40
 8008ae2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f002 fde0 	bl	800b6b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2240      	movs	r2, #64	; 0x40
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6852      	ldr	r2, [r2, #4]
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	4611      	mov	r1, r2
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
  }

  return USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d105      	bne.n	8008bac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d10b      	bne.n	8008be4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d004      	beq.n	8008c14 <USBD_StdDevReq+0x24>
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d002      	beq.n	8008c14 <USBD_StdDevReq+0x24>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <USBD_StdDevReq+0x34>
 8008c12:	e04c      	b.n	8008cae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
      break;
 8008c22:	e049      	b.n	8008cb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	d83a      	bhi.n	8008ca2 <USBD_StdDevReq+0xb2>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <USBD_StdDevReq+0x44>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	08008ca3 	.word	0x08008ca3
 8008c40:	08008c8f 	.word	0x08008c8f
 8008c44:	08008ca3 	.word	0x08008ca3
 8008c48:	08008c67 	.word	0x08008c67
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008ca3 	.word	0x08008ca3
 8008c54:	08008c7b 	.word	0x08008c7b
 8008c58:	08008c71 	.word	0x08008c71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9d4 	bl	800900c <USBD_GetDescriptor>
          break;
 8008c64:	e022      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb61 	bl	8009330 <USBD_SetAddress>
          break;
 8008c6e:	e01d      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fb9e 	bl	80093b4 <USBD_SetConfig>
          break;
 8008c78:	e018      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fc27 	bl	80094d0 <USBD_GetConfig>
          break;
 8008c82:	e013      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fc56 	bl	8009538 <USBD_GetStatus>
          break;
 8008c8c:	e00e      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc84 	bl	800959e <USBD_SetFeature>
          break;
 8008c96:	e009      	b.n	8008cac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc93 	bl	80095c6 <USBD_ClrFeature>
          break;
 8008ca0:	e004      	b.n	8008cac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fcec 	bl	8009682 <USBD_CtlError>
          break;
 8008caa:	bf00      	nop
      }
      break;
 8008cac:	e004      	b.n	8008cb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fce6 	bl	8009682 <USBD_CtlError>
      break;
 8008cb6:	bf00      	nop
  }

  return ret;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop

08008cc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d003      	beq.n	8008ce6 <USBD_StdItfReq+0x22>
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d001      	beq.n	8008ce6 <USBD_StdItfReq+0x22>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d12a      	bne.n	8008d3c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	3b01      	subs	r3, #1
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d81d      	bhi.n	8008d2e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	889b      	ldrh	r3, [r3, #4]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d813      	bhi.n	8008d24 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d110      	bne.n	8008d38 <USBD_StdItfReq+0x74>
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10d      	bne.n	8008d38 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fd79 	bl	8009814 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d22:	e009      	b.n	8008d38 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fcab 	bl	8009682 <USBD_CtlError>
          break;
 8008d2c:	e004      	b.n	8008d38 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fca6 	bl	8009682 <USBD_CtlError>
          break;
 8008d36:	e000      	b.n	8008d3a <USBD_StdItfReq+0x76>
          break;
 8008d38:	bf00      	nop
      }
      break;
 8008d3a:	e004      	b.n	8008d46 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fc9f 	bl	8009682 <USBD_CtlError>
      break;
 8008d44:	bf00      	nop
  }

  return USBD_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d004      	beq.n	8008d7a <USBD_StdEPReq+0x2a>
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	d002      	beq.n	8008d7a <USBD_StdEPReq+0x2a>
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <USBD_StdEPReq+0x3a>
 8008d78:	e13d      	b.n	8008ff6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
      break;
 8008d88:	e13a      	b.n	8009000 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d10a      	bne.n	8008dac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	e12a      	b.n	8009002 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d03e      	beq.n	8008e32 <USBD_StdEPReq+0xe2>
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d002      	beq.n	8008dbe <USBD_StdEPReq+0x6e>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d070      	beq.n	8008e9e <USBD_StdEPReq+0x14e>
 8008dbc:	e115      	b.n	8008fea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d002      	beq.n	8008dce <USBD_StdEPReq+0x7e>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d015      	beq.n	8008df8 <USBD_StdEPReq+0xa8>
 8008dcc:	e02b      	b.n	8008e26 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <USBD_StdEPReq+0x9e>
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d009      	beq.n	8008dee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f002 fcac 	bl	800b73c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008de4:	2180      	movs	r1, #128	; 0x80
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f002 fca8 	bl	800b73c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dec:	e020      	b.n	8008e30 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fc46 	bl	8009682 <USBD_CtlError>
              break;
 8008df6:	e01b      	b.n	8008e30 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10e      	bne.n	8008e1e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <USBD_StdEPReq+0xce>
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	2b80      	cmp	r3, #128	; 0x80
 8008e0a:	d008      	beq.n	8008e1e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	88db      	ldrh	r3, [r3, #6]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f002 fc8f 	bl	800b73c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fcf8 	bl	8009814 <USBD_CtlSendStatus>

              break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc2a 	bl	8009682 <USBD_CtlError>
              break;
 8008e2e:	bf00      	nop
          }
          break;
 8008e30:	e0e0      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d002      	beq.n	8008e42 <USBD_StdEPReq+0xf2>
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d015      	beq.n	8008e6c <USBD_StdEPReq+0x11c>
 8008e40:	e026      	b.n	8008e90 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00c      	beq.n	8008e62 <USBD_StdEPReq+0x112>
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d009      	beq.n	8008e62 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f002 fc72 	bl	800b73c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e58:	2180      	movs	r1, #128	; 0x80
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f002 fc6e 	bl	800b73c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e60:	e01c      	b.n	8008e9c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc0c 	bl	8009682 <USBD_CtlError>
              break;
 8008e6a:	e017      	b.n	8008e9c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	885b      	ldrh	r3, [r3, #2]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d112      	bne.n	8008e9a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f002 fc79 	bl	800b77a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fcc3 	bl	8009814 <USBD_CtlSendStatus>
              }
              break;
 8008e8e:	e004      	b.n	8008e9a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fbf5 	bl	8009682 <USBD_CtlError>
              break;
 8008e98:	e000      	b.n	8008e9c <USBD_StdEPReq+0x14c>
              break;
 8008e9a:	bf00      	nop
          }
          break;
 8008e9c:	e0aa      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d002      	beq.n	8008eae <USBD_StdEPReq+0x15e>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d032      	beq.n	8008f12 <USBD_StdEPReq+0x1c2>
 8008eac:	e097      	b.n	8008fde <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d007      	beq.n	8008ec4 <USBD_StdEPReq+0x174>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	2b80      	cmp	r3, #128	; 0x80
 8008eb8:	d004      	beq.n	8008ec4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fbe0 	bl	8009682 <USBD_CtlError>
                break;
 8008ec2:	e091      	b.n	8008fe8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	da0b      	bge.n	8008ee4 <USBD_StdEPReq+0x194>
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	3310      	adds	r3, #16
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	e00b      	b.n	8008efc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	3304      	adds	r3, #4
 8008efc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2202      	movs	r2, #2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fc24 	bl	8009758 <USBD_CtlSendData>
              break;
 8008f10:	e06a      	b.n	8008fe8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	da11      	bge.n	8008f3e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	f003 020f 	and.w	r2, r3, #15
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d117      	bne.n	8008f64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fba3 	bl	8009682 <USBD_CtlError>
                  break;
 8008f3c:	e054      	b.n	8008fe8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	f003 020f 	and.w	r2, r3, #15
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fb90 	bl	8009682 <USBD_CtlError>
                  break;
 8008f62:	e041      	b.n	8008fe8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da0b      	bge.n	8008f84 <USBD_StdEPReq+0x234>
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	3310      	adds	r3, #16
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3304      	adds	r3, #4
 8008f82:	e00b      	b.n	8008f9c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <USBD_StdEPReq+0x25a>
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	2b80      	cmp	r3, #128	; 0x80
 8008fa8:	d103      	bne.n	8008fb2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	e00e      	b.n	8008fd0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f002 fbfe 	bl	800b7b8 <USBD_LL_IsStallEP>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e002      	b.n	8008fd0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fbbe 	bl	8009758 <USBD_CtlSendData>
              break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fb4e 	bl	8009682 <USBD_CtlError>
              break;
 8008fe6:	bf00      	nop
          }
          break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fb48 	bl	8009682 <USBD_CtlError>
          break;
 8008ff2:	bf00      	nop
      }
      break;
 8008ff4:	e004      	b.n	8009000 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fb42 	bl	8009682 <USBD_CtlError>
      break;
 8008ffe:	bf00      	nop
  }

  return ret;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	2b0e      	cmp	r3, #14
 800902e:	f200 8152 	bhi.w	80092d6 <USBD_GetDescriptor+0x2ca>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBD_GetDescriptor+0x2c>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	080090a9 	.word	0x080090a9
 800903c:	080090c1 	.word	0x080090c1
 8009040:	08009101 	.word	0x08009101
 8009044:	080092d7 	.word	0x080092d7
 8009048:	080092d7 	.word	0x080092d7
 800904c:	08009277 	.word	0x08009277
 8009050:	080092a3 	.word	0x080092a3
 8009054:	080092d7 	.word	0x080092d7
 8009058:	080092d7 	.word	0x080092d7
 800905c:	080092d7 	.word	0x080092d7
 8009060:	080092d7 	.word	0x080092d7
 8009064:	080092d7 	.word	0x080092d7
 8009068:	080092d7 	.word	0x080092d7
 800906c:	080092d7 	.word	0x080092d7
 8009070:	08009075 	.word	0x08009075
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009096:	e126      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 faf1 	bl	8009682 <USBD_CtlError>
        err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
      break;
 80090a6:	e11e      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e112      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7c1b      	ldrb	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10d      	bne.n	80090e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	2202      	movs	r2, #2
 80090e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e2:	e100      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f107 0208 	add.w	r2, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      break;
 80090fe:	e0f2      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	885b      	ldrh	r3, [r3, #2]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b05      	cmp	r3, #5
 8009108:	f200 80ac 	bhi.w	8009264 <USBD_GetDescriptor+0x258>
 800910c:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <USBD_GetDescriptor+0x108>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009161 	.word	0x08009161
 800911c:	08009195 	.word	0x08009195
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091fd 	.word	0x080091fd
 8009128:	08009231 	.word	0x08009231
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e091      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa95 	bl	8009682 <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e089      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7c12      	ldrb	r2, [r2, #16]
 8009178:	f107 0108 	add.w	r1, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009182:	e077      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa7b 	bl	8009682 <USBD_CtlError>
            err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
          break;
 8009192:	e06f      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b6:	e05d      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa61 	bl	8009682 <USBD_CtlError>
            err++;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	3301      	adds	r3, #1
 80091c4:	72fb      	strb	r3, [r7, #11]
          break;
 80091c6:	e055      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e043      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa47 	bl	8009682 <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e03b      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e029      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa2d 	bl	8009682 <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e021      	b.n	8009274 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009252:	e00f      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa13 	bl	8009682 <USBD_CtlError>
            err++;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3301      	adds	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]
          break;
 8009262:	e007      	b.n	8009274 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa0b 	bl	8009682 <USBD_CtlError>
          err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009272:	e038      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
 8009274:	e037      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7c1b      	ldrb	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f107 0208 	add.w	r2, r7, #8
 800928a:	4610      	mov	r0, r2
 800928c:	4798      	blx	r3
 800928e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009290:	e029      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9f4 	bl	8009682 <USBD_CtlError>
        err++;
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	3301      	adds	r3, #1
 800929e:	72fb      	strb	r3, [r7, #11]
      break;
 80092a0:	e021      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b2:	f107 0208 	add.w	r2, r7, #8
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
 80092ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	2207      	movs	r2, #7
 80092c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c4:	e00f      	b.n	80092e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f9da 	bl	8009682 <USBD_CtlError>
        err++;
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	3301      	adds	r3, #1
 80092d2:	72fb      	strb	r3, [r7, #11]
      break;
 80092d4:	e007      	b.n	80092e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9d2 	bl	8009682 <USBD_CtlError>
      err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	bf00      	nop
  }

  if (err != 0U)
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d11c      	bne.n	8009326 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092ec:	893b      	ldrh	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d011      	beq.n	8009316 <USBD_GetDescriptor+0x30a>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	88db      	ldrh	r3, [r3, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00d      	beq.n	8009316 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88da      	ldrh	r2, [r3, #6]
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	4293      	cmp	r3, r2
 8009302:	bf28      	it	cs
 8009304:	4613      	movcs	r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	461a      	mov	r2, r3
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa21 	bl	8009758 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	88db      	ldrh	r3, [r3, #6]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa78 	bl	8009814 <USBD_CtlSendStatus>
 8009324:	e000      	b.n	8009328 <USBD_GetDescriptor+0x31c>
    return;
 8009326:	bf00      	nop
    }
  }
}
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop

08009330 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	889b      	ldrh	r3, [r3, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d130      	bne.n	80093a4 <USBD_SetAddress+0x74>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	88db      	ldrh	r3, [r3, #6]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d12c      	bne.n	80093a4 <USBD_SetAddress+0x74>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	885b      	ldrh	r3, [r3, #2]
 800934e:	2b7f      	cmp	r3, #127	; 0x7f
 8009350:	d828      	bhi.n	80093a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	885b      	ldrh	r3, [r3, #2]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800935c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	2b03      	cmp	r3, #3
 8009366:	d104      	bne.n	8009372 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f989 	bl	8009682 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009370:	e01c      	b.n	80093ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7bfa      	ldrb	r2, [r7, #15]
 8009376:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f002 fa40 	bl	800b804 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa45 	bl	8009814 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d004      	beq.n	800939a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009398:	e008      	b.n	80093ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a2:	e003      	b.n	80093ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f96b 	bl	8009682 <USBD_CtlError>
  }
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	4b41      	ldr	r3, [pc, #260]	; (80094cc <USBD_SetConfig+0x118>)
 80093c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093c8:	4b40      	ldr	r3, [pc, #256]	; (80094cc <USBD_SetConfig+0x118>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d904      	bls.n	80093da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f955 	bl	8009682 <USBD_CtlError>
 80093d8:	e075      	b.n	80094c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d002      	beq.n	80093ea <USBD_SetConfig+0x36>
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d023      	beq.n	8009430 <USBD_SetConfig+0x7c>
 80093e8:	e062      	b.n	80094b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093ea:	4b38      	ldr	r3, [pc, #224]	; (80094cc <USBD_SetConfig+0x118>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01a      	beq.n	8009428 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093f2:	4b36      	ldr	r3, [pc, #216]	; (80094cc <USBD_SetConfig+0x118>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2203      	movs	r2, #3
 8009400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009404:	4b31      	ldr	r3, [pc, #196]	; (80094cc <USBD_SetConfig+0x118>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff f9c6 	bl	800879c <USBD_SetClassConfig>
 8009410:	4603      	mov	r3, r0
 8009412:	2b02      	cmp	r3, #2
 8009414:	d104      	bne.n	8009420 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f932 	bl	8009682 <USBD_CtlError>
            return;
 800941e:	e052      	b.n	80094c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9f7 	bl	8009814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009426:	e04e      	b.n	80094c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9f3 	bl	8009814 <USBD_CtlSendStatus>
        break;
 800942e:	e04a      	b.n	80094c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009430:	4b26      	ldr	r3, [pc, #152]	; (80094cc <USBD_SetConfig+0x118>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d112      	bne.n	800945e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009440:	4b22      	ldr	r3, [pc, #136]	; (80094cc <USBD_SetConfig+0x118>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <USBD_SetConfig+0x118>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff f9c2 	bl	80087da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9dc 	bl	8009814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800945c:	e033      	b.n	80094c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800945e:	4b1b      	ldr	r3, [pc, #108]	; (80094cc <USBD_SetConfig+0x118>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	429a      	cmp	r2, r3
 800946a:	d01d      	beq.n	80094a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff f9b0 	bl	80087da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <USBD_SetConfig+0x118>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <USBD_SetConfig+0x118>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff f986 	bl	800879c <USBD_SetClassConfig>
 8009490:	4603      	mov	r3, r0
 8009492:	2b02      	cmp	r3, #2
 8009494:	d104      	bne.n	80094a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f8f2 	bl	8009682 <USBD_CtlError>
            return;
 800949e:	e012      	b.n	80094c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9b7 	bl	8009814 <USBD_CtlSendStatus>
        break;
 80094a6:	e00e      	b.n	80094c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9b3 	bl	8009814 <USBD_CtlSendStatus>
        break;
 80094ae:	e00a      	b.n	80094c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f8e5 	bl	8009682 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80094b8:	4b04      	ldr	r3, [pc, #16]	; (80094cc <USBD_SetConfig+0x118>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff f98b 	bl	80087da <USBD_ClrClassConfig>
        break;
 80094c4:	bf00      	nop
    }
  }
}
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	2000036c 	.word	0x2000036c

080094d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d004      	beq.n	80094ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f8cc 	bl	8009682 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094ea:	e021      	b.n	8009530 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	db17      	blt.n	8009526 <USBD_GetConfig+0x56>
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	dd02      	ble.n	8009500 <USBD_GetConfig+0x30>
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d00b      	beq.n	8009516 <USBD_GetConfig+0x46>
 80094fe:	e012      	b.n	8009526 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3308      	adds	r3, #8
 800950a:	2201      	movs	r2, #1
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f922 	bl	8009758 <USBD_CtlSendData>
        break;
 8009514:	e00c      	b.n	8009530 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3304      	adds	r3, #4
 800951a:	2201      	movs	r2, #1
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f91a 	bl	8009758 <USBD_CtlSendData>
        break;
 8009524:	e004      	b.n	8009530 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f8aa 	bl	8009682 <USBD_CtlError>
        break;
 800952e:	bf00      	nop
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009548:	3b01      	subs	r3, #1
 800954a:	2b02      	cmp	r3, #2
 800954c:	d81e      	bhi.n	800958c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	88db      	ldrh	r3, [r3, #6]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d004      	beq.n	8009560 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f892 	bl	8009682 <USBD_CtlError>
        break;
 800955e:	e01a      	b.n	8009596 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f043 0202 	orr.w	r2, r3, #2
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	330c      	adds	r3, #12
 8009580:	2202      	movs	r2, #2
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f8e7 	bl	8009758 <USBD_CtlSendData>
      break;
 800958a:	e004      	b.n	8009596 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f877 	bl	8009682 <USBD_CtlError>
      break;
 8009594:	bf00      	nop
  }
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	885b      	ldrh	r3, [r3, #2]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d106      	bne.n	80095be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f92b 	bl	8009814 <USBD_CtlSendStatus>
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d6:	3b01      	subs	r3, #1
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d80b      	bhi.n	80095f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d10c      	bne.n	80095fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f911 	bl	8009814 <USBD_CtlSendStatus>
      }
      break;
 80095f2:	e004      	b.n	80095fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f843 	bl	8009682 <USBD_CtlError>
      break;
 80095fc:	e000      	b.n	8009600 <USBD_ClrFeature+0x3a>
      break;
 80095fe:	bf00      	nop
  }
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	785a      	ldrb	r2, [r3, #1]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	3302      	adds	r3, #2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	b29a      	uxth	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	3303      	adds	r3, #3
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	021b      	lsls	r3, r3, #8
 8009634:	b29b      	uxth	r3, r3
 8009636:	4413      	add	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	3304      	adds	r3, #4
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	3305      	adds	r3, #5
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	b29b      	uxth	r3, r3
 8009652:	4413      	add	r3, r2
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	3306      	adds	r3, #6
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	b29a      	uxth	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	3307      	adds	r3, #7
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	b29b      	uxth	r3, r3
 800966e:	4413      	add	r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	80da      	strh	r2, [r3, #6]

}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800968c:	2180      	movs	r1, #128	; 0x80
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f002 f854 	bl	800b73c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009694:	2100      	movs	r1, #0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f002 f850 	bl	800b73c <USBD_LL_StallEP>
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d032      	beq.n	8009720 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f834 	bl	8009728 <USBD_GetLen>
 80096c0:	4603      	mov	r3, r0
 80096c2:	3301      	adds	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	75fa      	strb	r2, [r7, #23]
 80096d4:	461a      	mov	r2, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4413      	add	r3, r2
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	7812      	ldrb	r2, [r2, #0]
 80096de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	75fa      	strb	r2, [r7, #23]
 80096e6:	461a      	mov	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4413      	add	r3, r2
 80096ec:	2203      	movs	r2, #3
 80096ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096f0:	e012      	b.n	8009718 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	60fa      	str	r2, [r7, #12]
 80096f8:	7dfa      	ldrb	r2, [r7, #23]
 80096fa:	1c51      	adds	r1, r2, #1
 80096fc:	75f9      	strb	r1, [r7, #23]
 80096fe:	4611      	mov	r1, r2
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	440a      	add	r2, r1
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	75fa      	strb	r2, [r7, #23]
 800970e:	461a      	mov	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4413      	add	r3, r2
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e8      	bne.n	80096f2 <USBD_GetString+0x4e>
    }
  }
}
 8009720:	bf00      	nop
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009734:	e005      	b.n	8009742 <USBD_GetLen+0x1a>
  {
    len++;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	3301      	adds	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3301      	adds	r3, #1
 8009740:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1f5      	bne.n	8009736 <USBD_GetLen+0xe>
  }

  return len;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2202      	movs	r2, #2
 800976a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009774:	88fa      	ldrh	r2, [r7, #6]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	2100      	movs	r1, #0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f002 f85e 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	2100      	movs	r1, #0
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f002 f84c 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2203      	movs	r2, #3
 80097c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097ca:	88fa      	ldrh	r2, [r7, #6]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	2100      	movs	r1, #0
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f002 f851 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	2100      	movs	r1, #0
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f002 f83f 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2204      	movs	r2, #4
 8009820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009824:	2300      	movs	r3, #0
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f002 f809 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2205      	movs	r2, #5
 8009846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800984a:	2300      	movs	r3, #0
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f002 f819 	bl	800b888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <encode_byte>:
extern	void packet_callback(void);
extern	void packet_callback(void);

uint16_t *mirror_packet;
void encode_byte(uint16_t *dest , uint8_t value)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
	uint8_t i,mask=0x80;
 800986c:	2380      	movs	r3, #128	; 0x80
 800986e:	73bb      	strb	r3, [r7, #14]
	for ( i=0;i<8;i++)
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e019      	b.n	80098aa <encode_byte+0x4a>
	{
		dest[i] = BIT_0;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009882:	801a      	strh	r2, [r3, #0]
		if (( value & mask) == mask)
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	4013      	ands	r3, r2
 800988a:	b2db      	uxtb	r3, r3
 800988c:	7bba      	ldrb	r2, [r7, #14]
 800988e:	429a      	cmp	r2, r3
 8009890:	d105      	bne.n	800989e <encode_byte+0x3e>
			dest[i] = BIT_1;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	4413      	add	r3, r2
 800989a:	22aa      	movs	r2, #170	; 0xaa
 800989c:	801a      	strh	r2, [r3, #0]
		mask = mask >> 1;
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	085b      	lsrs	r3, r3, #1
 80098a2:	73bb      	strb	r3, [r7, #14]
	for ( i=0;i<8;i++)
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	3301      	adds	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b07      	cmp	r3, #7
 80098ae:	d9e2      	bls.n	8009876 <encode_byte+0x16>
	}
}
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <encode_throttle>:

uint32_t encode_throttle(int cab,int speed,int direction)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	; 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
	// 01DCSSSS
	int cab1,cab2,command,errcheck, retval=0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24

	command = 0x40 | (direction << 5) | (speed & 0x1f);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	015b      	lsls	r3, r3, #5
 80098d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	4313      	orrs	r3, r2
 80098dc:	623b      	str	r3, [r7, #32]

	if ( cab > 127 )
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b7f      	cmp	r3, #127	; 0x7f
 80098e2:	dd2b      	ble.n	800993c <encode_throttle+0x80>
	{
		retval=1;
 80098e4:	2301      	movs	r3, #1
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
		cab1 = (cab >> 8 ) | 0xc0;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	121b      	asrs	r3, r3, #8
 80098ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098f0:	61bb      	str	r3, [r7, #24]
		cab2 = cab & 0xff;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	617b      	str	r3, [r7, #20]
		errcheck = cab1 ^ cab2 ^ command;
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4053      	eors	r3, r2
 80098fe:	6a3a      	ldr	r2, [r7, #32]
 8009900:	4053      	eors	r3, r2
 8009902:	61fb      	str	r3, [r7, #28]
		encode_byte(len4_packet.byte1,cab1);
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	4619      	mov	r1, r3
 800990a:	481c      	ldr	r0, [pc, #112]	; (800997c <encode_throttle+0xc0>)
 800990c:	f7ff ffa8 	bl	8009860 <encode_byte>
		encode_byte(len4_packet.byte2,cab2);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	4619      	mov	r1, r3
 8009916:	481a      	ldr	r0, [pc, #104]	; (8009980 <encode_throttle+0xc4>)
 8009918:	f7ff ffa2 	bl	8009860 <encode_byte>
		encode_byte(len4_packet.byte3,command);
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4619      	mov	r1, r3
 8009922:	4818      	ldr	r0, [pc, #96]	; (8009984 <encode_throttle+0xc8>)
 8009924:	f7ff ff9c 	bl	8009860 <encode_byte>
		encode_byte(len4_packet.errcheck,errcheck);
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	4816      	ldr	r0, [pc, #88]	; (8009988 <encode_throttle+0xcc>)
 8009930:	f7ff ff96 	bl	8009860 <encode_byte>
		mirror_packet = (uint16_t *)&len4_packet;
 8009934:	4b15      	ldr	r3, [pc, #84]	; (800998c <encode_throttle+0xd0>)
 8009936:	4a16      	ldr	r2, [pc, #88]	; (8009990 <encode_throttle+0xd4>)
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	e01a      	b.n	8009972 <encode_throttle+0xb6>
	}
	else
	{
		retval=0;
 800993c:	2300      	movs	r3, #0
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
		errcheck = cab ^ command;
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	4053      	eors	r3, r2
 8009946:	61fb      	str	r3, [r7, #28]
		encode_byte(len3_packet.byte1,cab);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	4619      	mov	r1, r3
 800994e:	4811      	ldr	r0, [pc, #68]	; (8009994 <encode_throttle+0xd8>)
 8009950:	f7ff ff86 	bl	8009860 <encode_byte>
		encode_byte(len3_packet.byte2,command);
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	4619      	mov	r1, r3
 800995a:	480f      	ldr	r0, [pc, #60]	; (8009998 <encode_throttle+0xdc>)
 800995c:	f7ff ff80 	bl	8009860 <encode_byte>
		encode_byte(len3_packet.errcheck,errcheck);
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	4619      	mov	r1, r3
 8009966:	480d      	ldr	r0, [pc, #52]	; (800999c <encode_throttle+0xe0>)
 8009968:	f7ff ff7a 	bl	8009860 <encode_byte>
		mirror_packet = (uint16_t *)&len3_packet;
 800996c:	4b07      	ldr	r3, [pc, #28]	; (800998c <encode_throttle+0xd0>)
 800996e:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <encode_throttle+0xe4>)
 8009970:	601a      	str	r2, [r3, #0]
	}
	return retval;
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009974:	4618      	mov	r0, r3
 8009976:	3728      	adds	r7, #40	; 0x28
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000740 	.word	0x20000740
 8009980:	20000752 	.word	0x20000752
 8009984:	20000764 	.word	0x20000764
 8009988:	20000776 	.word	0x20000776
 800998c:	200005a8 	.word	0x200005a8
 8009990:	20000720 	.word	0x20000720
 8009994:	20000a0c 	.word	0x20000a0c
 8009998:	20000a1e 	.word	0x20000a1e
 800999c:	20000a30 	.word	0x20000a30
 80099a0:	200009ec 	.word	0x200009ec

080099a4 <init_bufs>:

void init_bufs(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
uint32_t	i;
	/* Power ON */
	main_track.main_power = 1;
 80099aa:	4ba8      	ldr	r3, [pc, #672]	; (8009c4c <init_bufs+0x2a8>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	801a      	strh	r2, [r3, #0]
	/* Prepares idle packets */
	for(i=0;i<PREAMBLE_LEN;i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	e007      	b.n	80099c6 <init_bufs+0x22>
		idle_packet.preamble[i] = BIT_1;
 80099b6:	4aa6      	ldr	r2, [pc, #664]	; (8009c50 <init_bufs+0x2ac>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	21aa      	movs	r1, #170	; 0xaa
 80099bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PREAMBLE_LEN;i++)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3301      	adds	r3, #1
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b0e      	cmp	r3, #14
 80099ca:	d9f4      	bls.n	80099b6 <init_bufs+0x12>
	encode_byte(idle_packet.byte1,0xff);
 80099cc:	21ff      	movs	r1, #255	; 0xff
 80099ce:	48a1      	ldr	r0, [pc, #644]	; (8009c54 <init_bufs+0x2b0>)
 80099d0:	f7ff ff46 	bl	8009860 <encode_byte>
	encode_byte(idle_packet.byte2,0x00);
 80099d4:	2100      	movs	r1, #0
 80099d6:	48a0      	ldr	r0, [pc, #640]	; (8009c58 <init_bufs+0x2b4>)
 80099d8:	f7ff ff42 	bl	8009860 <encode_byte>
	encode_byte(idle_packet.errcheck,0xff);
 80099dc:	21ff      	movs	r1, #255	; 0xff
 80099de:	489f      	ldr	r0, [pc, #636]	; (8009c5c <init_bufs+0x2b8>)
 80099e0:	f7ff ff3e 	bl	8009860 <encode_byte>
	idle_packet.byte1_start=BIT_0;
 80099e4:	4b9a      	ldr	r3, [pc, #616]	; (8009c50 <init_bufs+0x2ac>)
 80099e6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80099ea:	83da      	strh	r2, [r3, #30]
	idle_packet.byte2_start=BIT_0;
 80099ec:	4b98      	ldr	r3, [pc, #608]	; (8009c50 <init_bufs+0x2ac>)
 80099ee:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80099f2:	861a      	strh	r2, [r3, #48]	; 0x30
	idle_packet.errdet_start=BIT_0;
 80099f4:	4b96      	ldr	r3, [pc, #600]	; (8009c50 <init_bufs+0x2ac>)
 80099f6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80099fa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	for(i=0;i<CLOSER_LEN;i++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	e009      	b.n	8009a18 <init_bufs+0x74>
		idle_packet.closer[i] = BIT_1;
 8009a04:	4a92      	ldr	r2, [pc, #584]	; (8009c50 <init_bufs+0x2ac>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3328      	adds	r3, #40	; 0x28
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	22aa      	movs	r2, #170	; 0xaa
 8009a10:	809a      	strh	r2, [r3, #4]
	for(i=0;i<CLOSER_LEN;i++)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3301      	adds	r3, #1
 8009a16:	607b      	str	r3, [r7, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d9f2      	bls.n	8009a04 <init_bufs+0x60>

	/* Prepares reset packets */
	for(i=0;i<PREAMBLE_LEN;i++)
 8009a1e:	2300      	movs	r3, #0
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	e007      	b.n	8009a34 <init_bufs+0x90>
		reset_packet.preamble[i] = BIT_1;
 8009a24:	4a8e      	ldr	r2, [pc, #568]	; (8009c60 <init_bufs+0x2bc>)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	21aa      	movs	r1, #170	; 0xaa
 8009a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PREAMBLE_LEN;i++)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3301      	adds	r3, #1
 8009a32:	607b      	str	r3, [r7, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b0e      	cmp	r3, #14
 8009a38:	d9f4      	bls.n	8009a24 <init_bufs+0x80>
	encode_byte(reset_packet.byte1,0x00);
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4889      	ldr	r0, [pc, #548]	; (8009c64 <init_bufs+0x2c0>)
 8009a3e:	f7ff ff0f 	bl	8009860 <encode_byte>
	encode_byte(reset_packet.byte2,0x00);
 8009a42:	2100      	movs	r1, #0
 8009a44:	4888      	ldr	r0, [pc, #544]	; (8009c68 <init_bufs+0x2c4>)
 8009a46:	f7ff ff0b 	bl	8009860 <encode_byte>
	encode_byte(reset_packet.errcheck,0x00);
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4887      	ldr	r0, [pc, #540]	; (8009c6c <init_bufs+0x2c8>)
 8009a4e:	f7ff ff07 	bl	8009860 <encode_byte>
	reset_packet.byte1_start=BIT_0;
 8009a52:	4b83      	ldr	r3, [pc, #524]	; (8009c60 <init_bufs+0x2bc>)
 8009a54:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009a58:	83da      	strh	r2, [r3, #30]
	reset_packet.byte2_start=BIT_0;
 8009a5a:	4b81      	ldr	r3, [pc, #516]	; (8009c60 <init_bufs+0x2bc>)
 8009a5c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009a60:	861a      	strh	r2, [r3, #48]	; 0x30
	reset_packet.errdet_start=BIT_0;
 8009a62:	4b7f      	ldr	r3, [pc, #508]	; (8009c60 <init_bufs+0x2bc>)
 8009a64:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009a68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	for(i=0;i<CLOSER_LEN;i++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	e009      	b.n	8009a86 <init_bufs+0xe2>
		reset_packet.closer[i] = BIT_1;
 8009a72:	4a7b      	ldr	r2, [pc, #492]	; (8009c60 <init_bufs+0x2bc>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3328      	adds	r3, #40	; 0x28
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4413      	add	r3, r2
 8009a7c:	22aa      	movs	r2, #170	; 0xaa
 8009a7e:	809a      	strh	r2, [r3, #4]
	for(i=0;i<CLOSER_LEN;i++)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3301      	adds	r3, #1
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d9f2      	bls.n	8009a72 <init_bufs+0xce>

	/* Prepare all the others */
	for(i=0;i<PREAMBLE_LEN;i++)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	607b      	str	r3, [r7, #4]
 8009a90:	e016      	b.n	8009ac0 <init_bufs+0x11c>
	{
		len3_packet.preamble[i] = BIT_1;
 8009a92:	4a77      	ldr	r2, [pc, #476]	; (8009c70 <init_bufs+0x2cc>)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	21aa      	movs	r1, #170	; 0xaa
 8009a98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len4_packet.preamble[i] = BIT_1;
 8009a9c:	4a75      	ldr	r2, [pc, #468]	; (8009c74 <init_bufs+0x2d0>)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	21aa      	movs	r1, #170	; 0xaa
 8009aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len5_packet.preamble[i] = BIT_1;
 8009aa6:	4a74      	ldr	r2, [pc, #464]	; (8009c78 <init_bufs+0x2d4>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	21aa      	movs	r1, #170	; 0xaa
 8009aac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len6_packet.preamble[i] = BIT_1;
 8009ab0:	4a72      	ldr	r2, [pc, #456]	; (8009c7c <init_bufs+0x2d8>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	21aa      	movs	r1, #170	; 0xaa
 8009ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PREAMBLE_LEN;i++)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3301      	adds	r3, #1
 8009abe:	607b      	str	r3, [r7, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b0e      	cmp	r3, #14
 8009ac4:	d9e5      	bls.n	8009a92 <init_bufs+0xee>
	}
	for(i=0;i<CLOSER_LEN;i++)
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	e01d      	b.n	8009b08 <init_bufs+0x164>
	{
		len3_packet.closer[i] = BIT_1;
 8009acc:	4a68      	ldr	r2, [pc, #416]	; (8009c70 <init_bufs+0x2cc>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3328      	adds	r3, #40	; 0x28
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
 8009ad6:	22aa      	movs	r2, #170	; 0xaa
 8009ad8:	809a      	strh	r2, [r3, #4]
		len4_packet.closer[i] = BIT_1;
 8009ada:	4a66      	ldr	r2, [pc, #408]	; (8009c74 <init_bufs+0x2d0>)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3330      	adds	r3, #48	; 0x30
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	22aa      	movs	r2, #170	; 0xaa
 8009ae6:	80da      	strh	r2, [r3, #6]
		len5_packet.closer[i] = BIT_1;
 8009ae8:	4a63      	ldr	r2, [pc, #396]	; (8009c78 <init_bufs+0x2d4>)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	333c      	adds	r3, #60	; 0x3c
 8009aee:	21aa      	movs	r1, #170	; 0xaa
 8009af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len6_packet.closer[i] = BIT_1;
 8009af4:	4a61      	ldr	r2, [pc, #388]	; (8009c7c <init_bufs+0x2d8>)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3344      	adds	r3, #68	; 0x44
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	4413      	add	r3, r2
 8009afe:	22aa      	movs	r2, #170	; 0xaa
 8009b00:	805a      	strh	r2, [r3, #2]
	for(i=0;i<CLOSER_LEN;i++)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3301      	adds	r3, #1
 8009b06:	607b      	str	r3, [r7, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d9de      	bls.n	8009acc <init_bufs+0x128>
	}

	encode_byte(len3_packet.byte1,0xff);
 8009b0e:	21ff      	movs	r1, #255	; 0xff
 8009b10:	485b      	ldr	r0, [pc, #364]	; (8009c80 <init_bufs+0x2dc>)
 8009b12:	f7ff fea5 	bl	8009860 <encode_byte>
	encode_byte(len3_packet.byte2,0x00);
 8009b16:	2100      	movs	r1, #0
 8009b18:	485a      	ldr	r0, [pc, #360]	; (8009c84 <init_bufs+0x2e0>)
 8009b1a:	f7ff fea1 	bl	8009860 <encode_byte>
	encode_byte(len3_packet.errcheck,0xff);
 8009b1e:	21ff      	movs	r1, #255	; 0xff
 8009b20:	4859      	ldr	r0, [pc, #356]	; (8009c88 <init_bufs+0x2e4>)
 8009b22:	f7ff fe9d 	bl	8009860 <encode_byte>
	len3_packet.byte1_start=BIT_0;
 8009b26:	4b52      	ldr	r3, [pc, #328]	; (8009c70 <init_bufs+0x2cc>)
 8009b28:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b2c:	83da      	strh	r2, [r3, #30]
	len3_packet.byte2_start=BIT_0;
 8009b2e:	4b50      	ldr	r3, [pc, #320]	; (8009c70 <init_bufs+0x2cc>)
 8009b30:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b34:	861a      	strh	r2, [r3, #48]	; 0x30
	len3_packet.errdet_start=BIT_0;
 8009b36:	4b4e      	ldr	r3, [pc, #312]	; (8009c70 <init_bufs+0x2cc>)
 8009b38:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	encode_byte(len4_packet.byte1,0xff);
 8009b40:	21ff      	movs	r1, #255	; 0xff
 8009b42:	4852      	ldr	r0, [pc, #328]	; (8009c8c <init_bufs+0x2e8>)
 8009b44:	f7ff fe8c 	bl	8009860 <encode_byte>
	encode_byte(len4_packet.byte2,0x00);
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4851      	ldr	r0, [pc, #324]	; (8009c90 <init_bufs+0x2ec>)
 8009b4c:	f7ff fe88 	bl	8009860 <encode_byte>
	encode_byte(len4_packet.byte3,0x00);
 8009b50:	2100      	movs	r1, #0
 8009b52:	4850      	ldr	r0, [pc, #320]	; (8009c94 <init_bufs+0x2f0>)
 8009b54:	f7ff fe84 	bl	8009860 <encode_byte>
	encode_byte(len4_packet.errcheck,0xff);
 8009b58:	21ff      	movs	r1, #255	; 0xff
 8009b5a:	484f      	ldr	r0, [pc, #316]	; (8009c98 <init_bufs+0x2f4>)
 8009b5c:	f7ff fe80 	bl	8009860 <encode_byte>
	len4_packet.byte1_start=BIT_0;
 8009b60:	4b44      	ldr	r3, [pc, #272]	; (8009c74 <init_bufs+0x2d0>)
 8009b62:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b66:	83da      	strh	r2, [r3, #30]
	len4_packet.byte2_start=BIT_0;
 8009b68:	4b42      	ldr	r3, [pc, #264]	; (8009c74 <init_bufs+0x2d0>)
 8009b6a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b6e:	861a      	strh	r2, [r3, #48]	; 0x30
	len4_packet.byte3_start=BIT_0;
 8009b70:	4b40      	ldr	r3, [pc, #256]	; (8009c74 <init_bufs+0x2d0>)
 8009b72:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b76:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	len4_packet.errdet_start=BIT_0;
 8009b7a:	4b3e      	ldr	r3, [pc, #248]	; (8009c74 <init_bufs+0x2d0>)
 8009b7c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	encode_byte(len5_packet.byte1,0xff);
 8009b84:	21ff      	movs	r1, #255	; 0xff
 8009b86:	4845      	ldr	r0, [pc, #276]	; (8009c9c <init_bufs+0x2f8>)
 8009b88:	f7ff fe6a 	bl	8009860 <encode_byte>
	encode_byte(len5_packet.byte2,0x00);
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4844      	ldr	r0, [pc, #272]	; (8009ca0 <init_bufs+0x2fc>)
 8009b90:	f7ff fe66 	bl	8009860 <encode_byte>
	encode_byte(len5_packet.byte3,0x00);
 8009b94:	2100      	movs	r1, #0
 8009b96:	4843      	ldr	r0, [pc, #268]	; (8009ca4 <init_bufs+0x300>)
 8009b98:	f7ff fe62 	bl	8009860 <encode_byte>
	encode_byte(len5_packet.byte4,0x00);
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4842      	ldr	r0, [pc, #264]	; (8009ca8 <init_bufs+0x304>)
 8009ba0:	f7ff fe5e 	bl	8009860 <encode_byte>
	encode_byte(len5_packet.errcheck,0xff);
 8009ba4:	21ff      	movs	r1, #255	; 0xff
 8009ba6:	4841      	ldr	r0, [pc, #260]	; (8009cac <init_bufs+0x308>)
 8009ba8:	f7ff fe5a 	bl	8009860 <encode_byte>
	len5_packet.byte1_start=BIT_0;
 8009bac:	4b32      	ldr	r3, [pc, #200]	; (8009c78 <init_bufs+0x2d4>)
 8009bae:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009bb2:	83da      	strh	r2, [r3, #30]
	len5_packet.byte2_start=BIT_0;
 8009bb4:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <init_bufs+0x2d4>)
 8009bb6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009bba:	861a      	strh	r2, [r3, #48]	; 0x30
	len5_packet.byte3_start=BIT_0;
 8009bbc:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <init_bufs+0x2d4>)
 8009bbe:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009bc2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	len5_packet.byte4_start=BIT_0;
 8009bc6:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <init_bufs+0x2d4>)
 8009bc8:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009bcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	len5_packet.errdet_start=BIT_0;
 8009bd0:	4b29      	ldr	r3, [pc, #164]	; (8009c78 <init_bufs+0x2d4>)
 8009bd2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009bd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	encode_byte(len6_packet.byte1,0xff);
 8009bda:	21ff      	movs	r1, #255	; 0xff
 8009bdc:	4834      	ldr	r0, [pc, #208]	; (8009cb0 <init_bufs+0x30c>)
 8009bde:	f7ff fe3f 	bl	8009860 <encode_byte>
	encode_byte(len6_packet.byte2,0x00);
 8009be2:	2100      	movs	r1, #0
 8009be4:	4833      	ldr	r0, [pc, #204]	; (8009cb4 <init_bufs+0x310>)
 8009be6:	f7ff fe3b 	bl	8009860 <encode_byte>
	encode_byte(len6_packet.byte3,0x00);
 8009bea:	2100      	movs	r1, #0
 8009bec:	4832      	ldr	r0, [pc, #200]	; (8009cb8 <init_bufs+0x314>)
 8009bee:	f7ff fe37 	bl	8009860 <encode_byte>
	encode_byte(len6_packet.byte4,0x00);
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4831      	ldr	r0, [pc, #196]	; (8009cbc <init_bufs+0x318>)
 8009bf6:	f7ff fe33 	bl	8009860 <encode_byte>
	encode_byte(len6_packet.byte5,0x00);
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4830      	ldr	r0, [pc, #192]	; (8009cc0 <init_bufs+0x31c>)
 8009bfe:	f7ff fe2f 	bl	8009860 <encode_byte>
	encode_byte(len6_packet.errcheck,0xff);
 8009c02:	21ff      	movs	r1, #255	; 0xff
 8009c04:	482f      	ldr	r0, [pc, #188]	; (8009cc4 <init_bufs+0x320>)
 8009c06:	f7ff fe2b 	bl	8009860 <encode_byte>
	len6_packet.byte1_start=BIT_0;
 8009c0a:	4b1c      	ldr	r3, [pc, #112]	; (8009c7c <init_bufs+0x2d8>)
 8009c0c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c10:	83da      	strh	r2, [r3, #30]
	len6_packet.byte2_start=BIT_0;
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <init_bufs+0x2d8>)
 8009c14:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c18:	861a      	strh	r2, [r3, #48]	; 0x30
	len6_packet.byte3_start=BIT_0;
 8009c1a:	4b18      	ldr	r3, [pc, #96]	; (8009c7c <init_bufs+0x2d8>)
 8009c1c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c20:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	len6_packet.byte4_start=BIT_0;
 8009c24:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <init_bufs+0x2d8>)
 8009c26:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	len6_packet.byte5_start=BIT_0;
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <init_bufs+0x2d8>)
 8009c30:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	len6_packet.errdet_start=BIT_0;
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <init_bufs+0x2d8>)
 8009c3a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009c3e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	2000078c 	.word	0x2000078c
 8009c50:	20000914 	.word	0x20000914
 8009c54:	20000934 	.word	0x20000934
 8009c58:	20000946 	.word	0x20000946
 8009c5c:	20000958 	.word	0x20000958
 8009c60:	200007c4 	.word	0x200007c4
 8009c64:	200007e4 	.word	0x200007e4
 8009c68:	200007f6 	.word	0x200007f6
 8009c6c:	20000808 	.word	0x20000808
 8009c70:	200009ec 	.word	0x200009ec
 8009c74:	20000720 	.word	0x20000720
 8009c78:	20000b20 	.word	0x20000b20
 8009c7c:	20000880 	.word	0x20000880
 8009c80:	20000a0c 	.word	0x20000a0c
 8009c84:	20000a1e 	.word	0x20000a1e
 8009c88:	20000a30 	.word	0x20000a30
 8009c8c:	20000740 	.word	0x20000740
 8009c90:	20000752 	.word	0x20000752
 8009c94:	20000764 	.word	0x20000764
 8009c98:	20000776 	.word	0x20000776
 8009c9c:	20000b40 	.word	0x20000b40
 8009ca0:	20000b52 	.word	0x20000b52
 8009ca4:	20000b64 	.word	0x20000b64
 8009ca8:	20000b76 	.word	0x20000b76
 8009cac:	20000b88 	.word	0x20000b88
 8009cb0:	200008a0 	.word	0x200008a0
 8009cb4:	200008b2 	.word	0x200008b2
 8009cb8:	200008c4 	.word	0x200008c4
 8009cbc:	200008d6 	.word	0x200008d6
 8009cc0:	200008e8 	.word	0x200008e8
 8009cc4:	200008fa 	.word	0x200008fa

08009cc8 <insert_reset_packet>:

void insert_reset_packet(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
	debug_flag_pulse();
 8009ccc:	f000 fc64 	bl	800a598 <debug_flag_pulse>
	if ( main_track.main_power == 0)
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <insert_reset_packet+0x30>)
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00d      	beq.n	8009cf4 <insert_reset_packet+0x2c>
		return;
	while ( update_semaphore == 0);
 8009cd8:	bf00      	nop
 8009cda:	4b08      	ldr	r3, [pc, #32]	; (8009cfc <insert_reset_packet+0x34>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0fb      	beq.n	8009cda <insert_reset_packet+0x12>
	dcc_packet = (uint32_t *)&reset_packet ;
 8009ce2:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <insert_reset_packet+0x38>)
 8009ce4:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <insert_reset_packet+0x3c>)
 8009ce6:	601a      	str	r2, [r3, #0]
	dcc_packet_size = sizeof(idle_packet)/2;
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <insert_reset_packet+0x40>)
 8009cea:	222c      	movs	r2, #44	; 0x2c
 8009cec:	601a      	str	r2, [r3, #0]
	debug_flag_pulse();
 8009cee:	f000 fc53 	bl	800a598 <debug_flag_pulse>
 8009cf2:	e000      	b.n	8009cf6 <insert_reset_packet+0x2e>
		return;
 8009cf4:	bf00      	nop
}
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2000078c 	.word	0x2000078c
 8009cfc:	20000910 	.word	0x20000910
 8009d00:	2000071c 	.word	0x2000071c
 8009d04:	200007c4 	.word	0x200007c4
 8009d08:	2000064c 	.word	0x2000064c

08009d0c <insert_len3_packet>:

void insert_len3_packet(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
	debug_flag_pulse();
 8009d10:	f000 fc42 	bl	800a598 <debug_flag_pulse>
	if ( main_track.main_power == 0)
 8009d14:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <insert_len3_packet+0x30>)
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00d      	beq.n	8009d38 <insert_len3_packet+0x2c>
		return;
	while ( update_semaphore == 0);
 8009d1c:	bf00      	nop
 8009d1e:	4b08      	ldr	r3, [pc, #32]	; (8009d40 <insert_len3_packet+0x34>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0fb      	beq.n	8009d1e <insert_len3_packet+0x12>
	dcc_packet = (uint32_t *)&len3_packet ;
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <insert_len3_packet+0x38>)
 8009d28:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <insert_len3_packet+0x3c>)
 8009d2a:	601a      	str	r2, [r3, #0]
	dcc_packet_size = sizeof(idle_packet)/2;
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <insert_len3_packet+0x40>)
 8009d2e:	222c      	movs	r2, #44	; 0x2c
 8009d30:	601a      	str	r2, [r3, #0]
	debug_flag_pulse();
 8009d32:	f000 fc31 	bl	800a598 <debug_flag_pulse>
 8009d36:	e000      	b.n	8009d3a <insert_len3_packet+0x2e>
		return;
 8009d38:	bf00      	nop
}
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	2000078c 	.word	0x2000078c
 8009d40:	20000910 	.word	0x20000910
 8009d44:	2000071c 	.word	0x2000071c
 8009d48:	200009ec 	.word	0x200009ec
 8009d4c:	2000064c 	.word	0x2000064c

08009d50 <insert_len4_packet>:

void insert_len4_packet(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
	debug_flag_pulse();
 8009d54:	f000 fc20 	bl	800a598 <debug_flag_pulse>
	if ( main_track.main_power == 0)
 8009d58:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <insert_len4_packet+0x30>)
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00d      	beq.n	8009d7c <insert_len4_packet+0x2c>
		return;
	while ( update_semaphore == 0);
 8009d60:	bf00      	nop
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <insert_len4_packet+0x34>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0fb      	beq.n	8009d62 <insert_len4_packet+0x12>
	dcc_packet = (uint32_t *)&len4_packet ;
 8009d6a:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <insert_len4_packet+0x38>)
 8009d6c:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <insert_len4_packet+0x3c>)
 8009d6e:	601a      	str	r2, [r3, #0]
	dcc_packet_size = sizeof(s_len4_packet)/2;
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <insert_len4_packet+0x40>)
 8009d72:	2235      	movs	r2, #53	; 0x35
 8009d74:	601a      	str	r2, [r3, #0]
	debug_flag_pulse();
 8009d76:	f000 fc0f 	bl	800a598 <debug_flag_pulse>
 8009d7a:	e000      	b.n	8009d7e <insert_len4_packet+0x2e>
		return;
 8009d7c:	bf00      	nop

}
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	2000078c 	.word	0x2000078c
 8009d84:	20000910 	.word	0x20000910
 8009d88:	2000071c 	.word	0x2000071c
 8009d8c:	20000720 	.word	0x20000720
 8009d90:	2000064c 	.word	0x2000064c

08009d94 <one_byte_commands>:

char outbuf[64];

/* <f 1234 5678 9012> */
void one_byte_commands(char cmd)
{
 8009d94:	b5b0      	push	{r4, r5, r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	71fb      	strb	r3, [r7, #7]
	switch ( cmd)
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	3b30      	subs	r3, #48	; 0x30
 8009da2:	2b23      	cmp	r3, #35	; 0x23
 8009da4:	f200 8098 	bhi.w	8009ed8 <one_byte_commands+0x144>
 8009da8:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <one_byte_commands+0x1c>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e5b 	.word	0x08009e5b
 8009db8:	08009ed9 	.word	0x08009ed9
 8009dbc:	08009ed9 	.word	0x08009ed9
 8009dc0:	08009ed9 	.word	0x08009ed9
 8009dc4:	08009ed9 	.word	0x08009ed9
 8009dc8:	08009ed9 	.word	0x08009ed9
 8009dcc:	08009ed9 	.word	0x08009ed9
 8009dd0:	08009e7d 	.word	0x08009e7d
 8009dd4:	08009e93 	.word	0x08009e93
 8009dd8:	08009ed9 	.word	0x08009ed9
 8009ddc:	08009ed9 	.word	0x08009ed9
 8009de0:	08009ed9 	.word	0x08009ed9
 8009de4:	08009ed9 	.word	0x08009ed9
 8009de8:	08009ed9 	.word	0x08009ed9
 8009dec:	08009ed9 	.word	0x08009ed9
 8009df0:	08009ed9 	.word	0x08009ed9
 8009df4:	08009ed9 	.word	0x08009ed9
 8009df8:	08009ed9 	.word	0x08009ed9
 8009dfc:	08009ed9 	.word	0x08009ed9
 8009e00:	08009ed9 	.word	0x08009ed9
 8009e04:	08009ed9 	.word	0x08009ed9
 8009e08:	08009ed9 	.word	0x08009ed9
 8009e0c:	08009ed9 	.word	0x08009ed9
 8009e10:	08009ed9 	.word	0x08009ed9
 8009e14:	08009ed9 	.word	0x08009ed9
 8009e18:	08009ed9 	.word	0x08009ed9
 8009e1c:	08009ed9 	.word	0x08009ed9
 8009e20:	08009ed9 	.word	0x08009ed9
 8009e24:	08009ed9 	.word	0x08009ed9
 8009e28:	08009ed9 	.word	0x08009ed9
 8009e2c:	08009ed9 	.word	0x08009ed9
 8009e30:	08009ed9 	.word	0x08009ed9
 8009e34:	08009ed9 	.word	0x08009ed9
 8009e38:	08009eb1 	.word	0x08009eb1
 8009e3c:	08009ec9 	.word	0x08009ec9
	{
	case '0' 	: 	sprintf(outbuf,"P0 Main Off\n\r");
 8009e40:	4a2c      	ldr	r2, [pc, #176]	; (8009ef4 <one_byte_commands+0x160>)
 8009e42:	4b2d      	ldr	r3, [pc, #180]	; (8009ef8 <one_byte_commands+0x164>)
 8009e44:	4614      	mov	r4, r2
 8009e46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e48:	6020      	str	r0, [r4, #0]
 8009e4a:	6061      	str	r1, [r4, #4]
 8009e4c:	60a2      	str	r2, [r4, #8]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	81a3      	strh	r3, [r4, #12]
					main_track.main_power = 0;
 8009e52:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <one_byte_commands+0x168>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	801a      	strh	r2, [r3, #0]
					break;
 8009e58:	e047      	b.n	8009eea <one_byte_commands+0x156>
	case '1' 	: 	sprintf(outbuf,"P1 Main On\n\r");
 8009e5a:	4a26      	ldr	r2, [pc, #152]	; (8009ef4 <one_byte_commands+0x160>)
 8009e5c:	4b28      	ldr	r3, [pc, #160]	; (8009f00 <one_byte_commands+0x16c>)
 8009e5e:	4614      	mov	r4, r2
 8009e60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e62:	6020      	str	r0, [r4, #0]
 8009e64:	6061      	str	r1, [r4, #4]
 8009e66:	60a2      	str	r2, [r4, #8]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	7323      	strb	r3, [r4, #12]
					main_track.main_power = 1;
 8009e6c:	4b23      	ldr	r3, [pc, #140]	; (8009efc <one_byte_commands+0x168>)
 8009e6e:	2201      	movs	r2, #1
 8009e70:	801a      	strh	r2, [r3, #0]
					tim6_start();
 8009e72:	f000 fb15 	bl	800a4a0 <tim6_start>
					packet_callback();
 8009e76:	f000 fb2d 	bl	800a4d4 <packet_callback>
					break;
 8009e7a:	e036      	b.n	8009eea <one_byte_commands+0x156>
	case '8' 	: 	sprintf(outbuf,"All Off\n\r");
 8009e7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ef4 <one_byte_commands+0x160>)
 8009e7e:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <one_byte_commands+0x170>)
 8009e80:	cb03      	ldmia	r3!, {r0, r1}
 8009e82:	6010      	str	r0, [r2, #0]
 8009e84:	6051      	str	r1, [r2, #4]
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	8113      	strh	r3, [r2, #8]
					main_track.main_power = 0;
 8009e8a:	4b1c      	ldr	r3, [pc, #112]	; (8009efc <one_byte_commands+0x168>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	801a      	strh	r2, [r3, #0]
					break;
 8009e90:	e02b      	b.n	8009eea <one_byte_commands+0x156>
	case '9' 	: 	sprintf(outbuf,"All On\n\r");
 8009e92:	4a18      	ldr	r2, [pc, #96]	; (8009ef4 <one_byte_commands+0x160>)
 8009e94:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <one_byte_commands+0x174>)
 8009e96:	cb03      	ldmia	r3!, {r0, r1}
 8009e98:	6010      	str	r0, [r2, #0]
 8009e9a:	6051      	str	r1, [r2, #4]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	7213      	strb	r3, [r2, #8]
					main_track.main_power = 1;
 8009ea0:	4b16      	ldr	r3, [pc, #88]	; (8009efc <one_byte_commands+0x168>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	801a      	strh	r2, [r3, #0]
					tim6_start();
 8009ea6:	f000 fafb 	bl	800a4a0 <tim6_start>
					packet_callback();
 8009eaa:	f000 fb13 	bl	800a4d4 <packet_callback>
					break;
 8009eae:	e01c      	b.n	8009eea <one_byte_commands+0x156>
	case 'R' 	: 	sprintf(outbuf,"Sent RESET\n\r");
 8009eb0:	4a10      	ldr	r2, [pc, #64]	; (8009ef4 <one_byte_commands+0x160>)
 8009eb2:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <one_byte_commands+0x178>)
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009eb8:	6020      	str	r0, [r4, #0]
 8009eba:	6061      	str	r1, [r4, #4]
 8009ebc:	60a2      	str	r2, [r4, #8]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	7323      	strb	r3, [r4, #12]
					insert_reset_packet();
 8009ec2:	f7ff ff01 	bl	8009cc8 <insert_reset_packet>
					break;
 8009ec6:	e010      	b.n	8009eea <one_byte_commands+0x156>
	case 'S' 	: 	sprintf(outbuf,"Status\n\r");
 8009ec8:	4a0a      	ldr	r2, [pc, #40]	; (8009ef4 <one_byte_commands+0x160>)
 8009eca:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <one_byte_commands+0x17c>)
 8009ecc:	cb03      	ldmia	r3!, {r0, r1}
 8009ece:	6010      	str	r0, [r2, #0]
 8009ed0:	6051      	str	r1, [r2, #4]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	7213      	strb	r3, [r2, #8]
					break;
 8009ed6:	e008      	b.n	8009eea <one_byte_commands+0x156>
	default:	sprintf(outbuf,"Command error\n\r");
 8009ed8:	4a06      	ldr	r2, [pc, #24]	; (8009ef4 <one_byte_commands+0x160>)
 8009eda:	4b0e      	ldr	r3, [pc, #56]	; (8009f14 <one_byte_commands+0x180>)
 8009edc:	4614      	mov	r4, r2
 8009ede:	461d      	mov	r5, r3
 8009ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee2:	6020      	str	r0, [r4, #0]
 8009ee4:	6061      	str	r1, [r4, #4]
 8009ee6:	60a2      	str	r2, [r4, #8]
 8009ee8:	60e3      	str	r3, [r4, #12]
	}
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200005ac 	.word	0x200005ac
 8009ef8:	0800ceb0 	.word	0x0800ceb0
 8009efc:	2000078c 	.word	0x2000078c
 8009f00:	0800cec0 	.word	0x0800cec0
 8009f04:	0800ced0 	.word	0x0800ced0
 8009f08:	0800cedc 	.word	0x0800cedc
 8009f0c:	0800cee8 	.word	0x0800cee8
 8009f10:	0800cef8 	.word	0x0800cef8
 8009f14:	0800cf04 	.word	0x0800cf04

08009f18 <three_bytes_commands>:

void three_bytes_commands(char cmd,int p0,int p1)
{
 8009f18:	b5b0      	push	{r4, r5, r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	73fb      	strb	r3, [r7, #15]
	switch ( cmd)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b54      	cmp	r3, #84	; 0x54
 8009f2a:	d008      	beq.n	8009f3e <three_bytes_commands+0x26>
 8009f2c:	2b66      	cmp	r3, #102	; 0x66
 8009f2e:	d10d      	bne.n	8009f4c <three_bytes_commands+0x34>
	{
	case 'f' 	: 	sprintf(outbuf,"f %d %d\n\r",p0,p1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	490c      	ldr	r1, [pc, #48]	; (8009f68 <three_bytes_commands+0x50>)
 8009f36:	480d      	ldr	r0, [pc, #52]	; (8009f6c <three_bytes_commands+0x54>)
 8009f38:	f001 fe96 	bl	800bc68 <siprintf>
					break;
 8009f3c:	e00f      	b.n	8009f5e <three_bytes_commands+0x46>
	case 'T' 	: 	sprintf(outbuf,"T %d %d\n\r",p0,p1);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	490b      	ldr	r1, [pc, #44]	; (8009f70 <three_bytes_commands+0x58>)
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <three_bytes_commands+0x54>)
 8009f46:	f001 fe8f 	bl	800bc68 <siprintf>
					break;
 8009f4a:	e008      	b.n	8009f5e <three_bytes_commands+0x46>
	default:	sprintf(outbuf,"Command error\n\r");
 8009f4c:	4a07      	ldr	r2, [pc, #28]	; (8009f6c <three_bytes_commands+0x54>)
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <three_bytes_commands+0x5c>)
 8009f50:	4614      	mov	r4, r2
 8009f52:	461d      	mov	r5, r3
 8009f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f56:	6020      	str	r0, [r4, #0]
 8009f58:	6061      	str	r1, [r4, #4]
 8009f5a:	60a2      	str	r2, [r4, #8]
 8009f5c:	60e3      	str	r3, [r4, #12]
	}
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bdb0      	pop	{r4, r5, r7, pc}
 8009f66:	bf00      	nop
 8009f68:	0800cf14 	.word	0x0800cf14
 8009f6c:	200005ac 	.word	0x200005ac
 8009f70:	0800cf20 	.word	0x0800cf20
 8009f74:	0800cf04 	.word	0x0800cf04

08009f78 <four_bytes_commands>:

void four_bytes_commands(char cmd,int p0,int p1,int p2)
{
 8009f78:	b5b0      	push	{r4, r5, r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
	switch ( cmd)
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2b61      	cmp	r3, #97	; 0x61
 8009f8c:	d00d      	beq.n	8009faa <four_bytes_commands+0x32>
 8009f8e:	2b66      	cmp	r3, #102	; 0x66
 8009f90:	d002      	beq.n	8009f98 <four_bytes_commands+0x20>
 8009f92:	2b54      	cmp	r3, #84	; 0x54
 8009f94:	d012      	beq.n	8009fbc <four_bytes_commands+0x44>
 8009f96:	e027      	b.n	8009fe8 <four_bytes_commands+0x70>
	{
	case 'f' 	: 	sprintf(outbuf,"f %d %d %d\n\r",p0,p1,p2);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	4918      	ldr	r1, [pc, #96]	; (800a004 <four_bytes_commands+0x8c>)
 8009fa2:	4819      	ldr	r0, [pc, #100]	; (800a008 <four_bytes_commands+0x90>)
 8009fa4:	f001 fe60 	bl	800bc68 <siprintf>
					break;
 8009fa8:	e027      	b.n	8009ffa <four_bytes_commands+0x82>
	case 'a' 	: 	sprintf(outbuf,"a %d %d %d\n\r",p0,p1,p2);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	4916      	ldr	r1, [pc, #88]	; (800a00c <four_bytes_commands+0x94>)
 8009fb4:	4814      	ldr	r0, [pc, #80]	; (800a008 <four_bytes_commands+0x90>)
 8009fb6:	f001 fe57 	bl	800bc68 <siprintf>
					break;
 8009fba:	e01e      	b.n	8009ffa <four_bytes_commands+0x82>
	case 'T' 	: 	sprintf(outbuf,"T : Address %d , Speed %d , Direction %d\n\r",p0,p1,p2);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	4912      	ldr	r1, [pc, #72]	; (800a010 <four_bytes_commands+0x98>)
 8009fc6:	4810      	ldr	r0, [pc, #64]	; (800a008 <four_bytes_commands+0x90>)
 8009fc8:	f001 fe4e 	bl	800bc68 <siprintf>
					if ( encode_throttle(p0,p1,p2) == 0 )
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	68b8      	ldr	r0, [r7, #8]
 8009fd2:	f7ff fc73 	bl	80098bc <encode_throttle>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <four_bytes_commands+0x6a>
						insert_len3_packet();
 8009fdc:	f7ff fe96 	bl	8009d0c <insert_len3_packet>
					else
						insert_len4_packet();
					break;
 8009fe0:	e00b      	b.n	8009ffa <four_bytes_commands+0x82>
						insert_len4_packet();
 8009fe2:	f7ff feb5 	bl	8009d50 <insert_len4_packet>
					break;
 8009fe6:	e008      	b.n	8009ffa <four_bytes_commands+0x82>
	default:	sprintf(outbuf,"Command error\n\r");
 8009fe8:	4a07      	ldr	r2, [pc, #28]	; (800a008 <four_bytes_commands+0x90>)
 8009fea:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <four_bytes_commands+0x9c>)
 8009fec:	4614      	mov	r4, r2
 8009fee:	461d      	mov	r5, r3
 8009ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff2:	6020      	str	r0, [r4, #0]
 8009ff4:	6061      	str	r1, [r4, #4]
 8009ff6:	60a2      	str	r2, [r4, #8]
 8009ff8:	60e3      	str	r3, [r4, #12]
	}
}
 8009ffa:	bf00      	nop
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bdb0      	pop	{r4, r5, r7, pc}
 800a002:	bf00      	nop
 800a004:	0800cf2c 	.word	0x0800cf2c
 800a008:	200005ac 	.word	0x200005ac
 800a00c:	0800cf3c 	.word	0x0800cf3c
 800a010:	0800cf4c 	.word	0x0800cf4c
 800a014:	0800cf04 	.word	0x0800cf04

0800a018 <five_bytes_commands>:

void five_bytes_commands(char cmd,int p0,int p1,int p2,int p3)
{
 800a018:	b5b0      	push	{r4, r5, r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607a      	str	r2, [r7, #4]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4603      	mov	r3, r0
 800a026:	73fb      	strb	r3, [r7, #15]
	switch ( cmd)
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	2b54      	cmp	r3, #84	; 0x54
 800a02c:	d10a      	bne.n	800a044 <five_bytes_commands+0x2c>
	{
	case 'T' 	: 	sprintf(outbuf,"Throttle %d %d %d %d\n\r",p0,p1,p2,p3);
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4909      	ldr	r1, [pc, #36]	; (800a060 <five_bytes_commands+0x48>)
 800a03c:	4809      	ldr	r0, [pc, #36]	; (800a064 <five_bytes_commands+0x4c>)
 800a03e:	f001 fe13 	bl	800bc68 <siprintf>
					break;
 800a042:	e008      	b.n	800a056 <five_bytes_commands+0x3e>
	default:	sprintf(outbuf,"Command error\n\r");
 800a044:	4a07      	ldr	r2, [pc, #28]	; (800a064 <five_bytes_commands+0x4c>)
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <five_bytes_commands+0x50>)
 800a048:	4614      	mov	r4, r2
 800a04a:	461d      	mov	r5, r3
 800a04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a04e:	6020      	str	r0, [r4, #0]
 800a050:	6061      	str	r1, [r4, #4]
 800a052:	60a2      	str	r2, [r4, #8]
 800a054:	60e3      	str	r3, [r4, #12]
	}
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bdb0      	pop	{r4, r5, r7, pc}
 800a05e:	bf00      	nop
 800a060:	0800cf78 	.word	0x0800cf78
 800a064:	200005ac 	.word	0x200005ac
 800a068:	0800cf04 	.word	0x0800cf04

0800a06c <parser>:

void parser(uint32_t source_buf)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b099      	sub	sp, #100	; 0x64
 800a070:	af08      	add	r7, sp, #32
 800a072:	6078      	str	r0, [r7, #4]
int	p0,p1,p2,p3,p4,p5,p6,p7,pnum;
char cmd, lbuf[USBUART_BUFLEN];

	if ( source_buf == FROM_UART )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10d      	bne.n	800a096 <parser+0x2a>
		memcpy(lbuf,&uart_rxbuf.packet[1],USBUART_BUFLEN);
 800a07a:	4a3e      	ldr	r2, [pc, #248]	; (800a174 <parser+0x108>)
 800a07c:	f107 030c 	add.w	r3, r7, #12
 800a080:	1c94      	adds	r4, r2, #2
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	6861      	ldr	r1, [r4, #4]
 800a086:	68a2      	ldr	r2, [r4, #8]
 800a088:	c307      	stmia	r3!, {r0, r1, r2}
 800a08a:	89a2      	ldrh	r2, [r4, #12]
 800a08c:	7ba1      	ldrb	r1, [r4, #14]
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	460a      	mov	r2, r1
 800a092:	709a      	strb	r2, [r3, #2]
 800a094:	e00c      	b.n	800a0b0 <parser+0x44>
	else
		memcpy(lbuf,&usb_rxbuf.packet[1],USBUART_BUFLEN);
 800a096:	4a38      	ldr	r2, [pc, #224]	; (800a178 <parser+0x10c>)
 800a098:	f107 030c 	add.w	r3, r7, #12
 800a09c:	1c94      	adds	r4, r2, #2
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	6861      	ldr	r1, [r4, #4]
 800a0a2:	68a2      	ldr	r2, [r4, #8]
 800a0a4:	c307      	stmia	r3!, {r0, r1, r2}
 800a0a6:	89a2      	ldrh	r2, [r4, #12]
 800a0a8:	7ba1      	ldrb	r1, [r4, #14]
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	709a      	strb	r2, [r3, #2]
	pnum = sscanf(lbuf,"%c %d %d %d %d %d %d %d %d",&cmd,&p0,&p1,&p2,&p3,&p4,&p5,&p6,&p7);
 800a0b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a0b4:	f107 021b 	add.w	r2, r7, #27
 800a0b8:	f107 000c 	add.w	r0, r7, #12
 800a0bc:	f107 031c 	add.w	r3, r7, #28
 800a0c0:	9306      	str	r3, [sp, #24]
 800a0c2:	f107 0320 	add.w	r3, r7, #32
 800a0c6:	9305      	str	r3, [sp, #20]
 800a0c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0d2:	9303      	str	r3, [sp, #12]
 800a0d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0d8:	9302      	str	r3, [sp, #8]
 800a0da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4924      	ldr	r1, [pc, #144]	; (800a17c <parser+0x110>)
 800a0ea:	f001 fddd 	bl	800bca8 <siscanf>
 800a0ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	switch (pnum)
 800a0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d82a      	bhi.n	800a14e <parser+0xe2>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <parser+0x94>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a115 	.word	0x0800a115
 800a104:	0800a14f 	.word	0x0800a14f
 800a108:	0800a11f 	.word	0x0800a11f
 800a10c:	0800a12d 	.word	0x0800a12d
 800a110:	0800a13b 	.word	0x0800a13b
	{
	case 1 :	one_byte_commands(cmd);
 800a114:	7efb      	ldrb	r3, [r7, #27]
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fe3c 	bl	8009d94 <one_byte_commands>
				break;
 800a11c:	e01c      	b.n	800a158 <parser+0xec>
				/*
	case 2 :	sprintf(outbuf,"cmd : %c %d\n\r",cmd,p0);
				break;
				*/
	case 3 :	three_bytes_commands(cmd,p0,p1);
 800a11e:	7efb      	ldrb	r3, [r7, #27]
 800a120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff fef7 	bl	8009f18 <three_bytes_commands>
				break;
 800a12a:	e015      	b.n	800a158 <parser+0xec>
	case 4 :	four_bytes_commands(cmd,p0,p1,p2);
 800a12c:	7ef8      	ldrb	r0, [r7, #27]
 800a12e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	f7ff ff20 	bl	8009f78 <four_bytes_commands>
				break;
 800a138:	e00e      	b.n	800a158 <parser+0xec>
	case 5 :	five_bytes_commands(cmd,p0,p1,p2,p3);
 800a13a:	7ef8      	ldrb	r0, [r7, #27]
 800a13c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a140:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4623      	mov	r3, r4
 800a148:	f7ff ff66 	bl	800a018 <five_bytes_commands>
				break;
 800a14c:	e004      	b.n	800a158 <parser+0xec>
	default:	sprintf(outbuf,"Command error %d\n\r",pnum);
 800a14e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a150:	490b      	ldr	r1, [pc, #44]	; (800a180 <parser+0x114>)
 800a152:	480c      	ldr	r0, [pc, #48]	; (800a184 <parser+0x118>)
 800a154:	f001 fd88 	bl	800bc68 <siprintf>
	}


	if ( source_buf == FROM_UART )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d103      	bne.n	800a166 <parser+0xfa>
		uart_tx_buffer((uint8_t *)(outbuf));
 800a15e:	4809      	ldr	r0, [pc, #36]	; (800a184 <parser+0x118>)
 800a160:	f000 f812 	bl	800a188 <uart_tx_buffer>
	else
	{
		usb_tx_buffer((uint8_t *)(outbuf));
	}
}
 800a164:	e002      	b.n	800a16c <parser+0x100>
		usb_tx_buffer((uint8_t *)(outbuf));
 800a166:	4807      	ldr	r0, [pc, #28]	; (800a184 <parser+0x118>)
 800a168:	f000 f828 	bl	800a1bc <usb_tx_buffer>
}
 800a16c:	bf00      	nop
 800a16e:	3744      	adds	r7, #68	; 0x44
 800a170:	46bd      	mov	sp, r7
 800a172:	bd90      	pop	{r4, r7, pc}
 800a174:	20000ad0 	.word	0x20000ad0
 800a178:	20000790 	.word	0x20000790
 800a17c:	0800cf90 	.word	0x0800cf90
 800a180:	0800cfac 	.word	0x0800cfac
 800a184:	200005ac 	.word	0x200005ac

0800a188 <uart_tx_buffer>:
uint16_t 	usb_rx_index=0 , usb_received_bytes = 0;
extern 		s_rxbuf usb_rxbuf;
extern		uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void uart_tx_buffer(uint8_t *pData)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	uart_busy_flag = 1;
 800a190:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <uart_tx_buffer+0x2c>)
 800a192:	2201      	movs	r2, #1
 800a194:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, pData, strlen((char *)pData));
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7f6 f842 	bl	8000220 <strlen>
 800a19c:	4603      	mov	r3, r0
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <uart_tx_buffer+0x30>)
 800a1a6:	f7fa fdbd 	bl	8004d24 <HAL_UART_Transmit_DMA>
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	2000036e 	.word	0x2000036e
 800a1b8:	20000a44 	.word	0x20000a44

0800a1bc <usb_tx_buffer>:
void usb_tx_buffer(uint8_t *pData)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
	usb_busy_flag = 1;
 800a1c4:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <usb_tx_buffer+0x28>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(pData,strlen((char *)pData));
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7f6 f828 	bl	8000220 <strlen>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 f900 	bl	800b3dc <CDC_Transmit_FS>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000374 	.word	0x20000374

0800a1e8 <uart_start>:
void uart_start(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	4904      	ldr	r1, [pc, #16]	; (800a200 <uart_start+0x18>)
 800a1f0:	4804      	ldr	r0, [pc, #16]	; (800a204 <uart_start+0x1c>)
 800a1f2:	f7fa fcbf 	bl	8004b74 <HAL_UART_Receive_IT>
	uart_tx_buffer((uint8_t *)("Hyera DCC Command Station\n\r"));
 800a1f6:	4804      	ldr	r0, [pc, #16]	; (800a208 <uart_start+0x20>)
 800a1f8:	f7ff ffc6 	bl	800a188 <uart_tx_buffer>
}
 800a1fc:	bf00      	nop
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000ad1 	.word	0x20000ad1
 800a204:	20000a44 	.word	0x20000a44
 800a208:	0800cfc0 	.word	0x0800cfc0

0800a20c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	if ( uart_header == 0 )
 800a214:	4b2a      	ldr	r3, [pc, #168]	; (800a2c0 <HAL_UART_RxCpltCallback+0xb4>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d115      	bne.n	800a248 <HAL_UART_RxCpltCallback+0x3c>
	{
		if (uart_rxbuf.packet[0]== '<')
 800a21c:	4b29      	ldr	r3, [pc, #164]	; (800a2c4 <HAL_UART_RxCpltCallback+0xb8>)
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b3c      	cmp	r3, #60	; 0x3c
 800a222:	d105      	bne.n	800a230 <HAL_UART_RxCpltCallback+0x24>
			uart_header = uart_rx_index = 1;
 800a224:	4b28      	ldr	r3, [pc, #160]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a226:	2201      	movs	r2, #1
 800a228:	801a      	strh	r2, [r3, #0]
 800a22a:	4b25      	ldr	r3, [pc, #148]	; (800a2c0 <HAL_UART_RxCpltCallback+0xb4>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[uart_rx_index], 1);
 800a230:	4b25      	ldr	r3, [pc, #148]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	4b23      	ldr	r3, [pc, #140]	; (800a2c4 <HAL_UART_RxCpltCallback+0xb8>)
 800a238:	4413      	add	r3, r2
 800a23a:	3301      	adds	r3, #1
 800a23c:	2201      	movs	r2, #1
 800a23e:	4619      	mov	r1, r3
 800a240:	4822      	ldr	r0, [pc, #136]	; (800a2cc <HAL_UART_RxCpltCallback+0xc0>)
 800a242:	f7fa fc97 	bl	8004b74 <HAL_UART_Receive_IT>
			if ( uart_rx_index >= USBUART_BUFLEN)
				uart_header = uart_rx_index = 0;
			HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[uart_rx_index], 1);
		}
	}
}
 800a246:	e036      	b.n	800a2b6 <HAL_UART_RxCpltCallback+0xaa>
		if( uart_rxbuf.packet[uart_rx_index] == '>')
 800a248:	4b1f      	ldr	r3, [pc, #124]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <HAL_UART_RxCpltCallback+0xb8>)
 800a250:	4413      	add	r3, r2
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	2b3e      	cmp	r3, #62	; 0x3e
 800a256:	d113      	bne.n	800a280 <HAL_UART_RxCpltCallback+0x74>
			uart2_rx_buffer_ready=1;
 800a258:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <HAL_UART_RxCpltCallback+0xc4>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	701a      	strb	r2, [r3, #0]
			uart_rxbuf.byte_count = uart_rx_index;
 800a25e:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a260:	881b      	ldrh	r3, [r3, #0]
 800a262:	b2da      	uxtb	r2, r3
 800a264:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <HAL_UART_RxCpltCallback+0xb8>)
 800a266:	701a      	strb	r2, [r3, #0]
			uart_header = uart_rx_index = 0;
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	801a      	strh	r2, [r3, #0]
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <HAL_UART_RxCpltCallback+0xb4>)
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
 800a274:	2201      	movs	r2, #1
 800a276:	4917      	ldr	r1, [pc, #92]	; (800a2d4 <HAL_UART_RxCpltCallback+0xc8>)
 800a278:	4814      	ldr	r0, [pc, #80]	; (800a2cc <HAL_UART_RxCpltCallback+0xc0>)
 800a27a:	f7fa fc7b 	bl	8004b74 <HAL_UART_Receive_IT>
}
 800a27e:	e01a      	b.n	800a2b6 <HAL_UART_RxCpltCallback+0xaa>
			uart_rx_index++;
 800a280:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	3301      	adds	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a28a:	801a      	strh	r2, [r3, #0]
			if ( uart_rx_index >= USBUART_BUFLEN)
 800a28c:	4b0e      	ldr	r3, [pc, #56]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	2b0e      	cmp	r3, #14
 800a292:	d905      	bls.n	800a2a0 <HAL_UART_RxCpltCallback+0x94>
				uart_header = uart_rx_index = 0;
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a296:	2200      	movs	r2, #0
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <HAL_UART_RxCpltCallback+0xb4>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[uart_rx_index], 1);
 800a2a0:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <HAL_UART_RxCpltCallback+0xbc>)
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <HAL_UART_RxCpltCallback+0xb8>)
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4806      	ldr	r0, [pc, #24]	; (800a2cc <HAL_UART_RxCpltCallback+0xc0>)
 800a2b2:	f7fa fc5f 	bl	8004b74 <HAL_UART_Receive_IT>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000036d 	.word	0x2000036d
 800a2c4:	20000ad0 	.word	0x20000ad0
 800a2c8:	20000370 	.word	0x20000370
 800a2cc:	20000a44 	.word	0x20000a44
 800a2d0:	2000081c 	.word	0x2000081c
 800a2d4:	20000ad1 	.word	0x20000ad1

0800a2d8 <USB_UART_RxCpltCallback>:

uint32_t USB_UART_RxCpltCallback(void)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
	if ( usb_header == 0 )
 800a2dc:	4b1e      	ldr	r3, [pc, #120]	; (800a358 <USB_UART_RxCpltCallback+0x80>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <USB_UART_RxCpltCallback+0x22>
	{
		if (usb_rxbuf.packet[0]== '<')
 800a2e4:	4b1d      	ldr	r3, [pc, #116]	; (800a35c <USB_UART_RxCpltCallback+0x84>)
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	2b3c      	cmp	r3, #60	; 0x3c
 800a2ea:	d12e      	bne.n	800a34a <USB_UART_RxCpltCallback+0x72>
			usb_header = usb_rx_index = 1;
 800a2ec:	4b1c      	ldr	r3, [pc, #112]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	801a      	strh	r2, [r3, #0]
 800a2f2:	4b19      	ldr	r3, [pc, #100]	; (800a358 <USB_UART_RxCpltCallback+0x80>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e027      	b.n	800a34a <USB_UART_RxCpltCallback+0x72>
	}
	else
	{
		if( usb_rxbuf.packet[usb_rx_index] == '>')
 800a2fa:	4b19      	ldr	r3, [pc, #100]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	4b16      	ldr	r3, [pc, #88]	; (800a35c <USB_UART_RxCpltCallback+0x84>)
 800a302:	4413      	add	r3, r2
 800a304:	785b      	ldrb	r3, [r3, #1]
 800a306:	2b3e      	cmp	r3, #62	; 0x3e
 800a308:	d10f      	bne.n	800a32a <USB_UART_RxCpltCallback+0x52>
		{
			uart2_rx_buffer_ready=1;
 800a30a:	4b16      	ldr	r3, [pc, #88]	; (800a364 <USB_UART_RxCpltCallback+0x8c>)
 800a30c:	2201      	movs	r2, #1
 800a30e:	701a      	strb	r2, [r3, #0]
			usb_rxbuf.byte_count = usb_rx_index;
 800a310:	4b13      	ldr	r3, [pc, #76]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	4b11      	ldr	r3, [pc, #68]	; (800a35c <USB_UART_RxCpltCallback+0x84>)
 800a318:	701a      	strb	r2, [r3, #0]
			usb_header = usb_rx_index = 0;
 800a31a:	4b11      	ldr	r3, [pc, #68]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	4b0d      	ldr	r3, [pc, #52]	; (800a358 <USB_UART_RxCpltCallback+0x80>)
 800a322:	2200      	movs	r2, #0
 800a324:	701a      	strb	r2, [r3, #0]
			return 1; /* Return 1 when packet finished */
 800a326:	2301      	movs	r3, #1
 800a328:	e010      	b.n	800a34c <USB_UART_RxCpltCallback+0x74>
		}
		else
		{
			usb_rx_index++;
 800a32a:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	3301      	adds	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a334:	801a      	strh	r2, [r3, #0]
			if ( usb_rx_index >= USBUART_BUFLEN)
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	2b0e      	cmp	r3, #14
 800a33c:	d905      	bls.n	800a34a <USB_UART_RxCpltCallback+0x72>
				usb_header = usb_rx_index = 0;
 800a33e:	4b08      	ldr	r3, [pc, #32]	; (800a360 <USB_UART_RxCpltCallback+0x88>)
 800a340:	2200      	movs	r2, #0
 800a342:	801a      	strh	r2, [r3, #0]
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <USB_UART_RxCpltCallback+0x80>)
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20000372 	.word	0x20000372
 800a35c:	20000790 	.word	0x20000790
 800a360:	20000376 	.word	0x20000376
 800a364:	2000081c 	.word	0x2000081c

0800a368 <fast_DMA_SetConfig>:
#include "main.h"

extern	TIM_HandleTypeDef htim1;
extern 	TIM_HandleTypeDef htim6;
static void fast_DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a37e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <fast_DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a390:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	f003 021f 	and.w	r2, r3, #31
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	2101      	movs	r1, #1
 800a3a0:	fa01 f202 	lsl.w	r2, r1, r2
 800a3a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	60da      	str	r2, [r3, #12]
}
 800a3be:	bf00      	nop
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <fast_HAL_DMA_Start_IT>:

HAL_StatusTypeDef fast_HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	603b      	str	r3, [r7, #0]
	/* Disable the peripheral */
	__HAL_DMA_DISABLE(hdma);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0201 	bic.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

	/* Configure the source, destination address and the data length & clear flags*/
	fast_DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff ffba 	bl	800a368 <fast_DMA_SetConfig>

	__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f022 0204 	bic.w	r2, r2, #4
 800a402:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 020a 	orr.w	r2, r2, #10
 800a412:	601a      	str	r2, [r3, #0]

	/* Enable the Peripheral */
	__HAL_DMA_ENABLE(hdma);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <PWM_Start_DMA_Tim1>:

//TIM1_CHANNEL_1
void PWM_Start_DMA_Tim1(uint32_t *pData, uint16_t Length)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	807b      	strh	r3, [r7, #2]
	/* Set the DMA error callback */
	htim1.hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a43c:	4b16      	ldr	r3, [pc, #88]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	4a16      	ldr	r2, [pc, #88]	; (800a49c <PWM_Start_DMA_Tim1+0x6c>)
 800a442:	635a      	str	r2, [r3, #52]	; 0x34
	/* Enable the DMA channel */
	fast_HAL_DMA_Start_IT( htim1.hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim1.Instance->PSC, Length);
 800a444:	4b14      	ldr	r3, [pc, #80]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a446:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3328      	adds	r3, #40	; 0x28
 800a450:	461a      	mov	r2, r3
 800a452:	887b      	ldrh	r3, [r7, #2]
 800a454:	f7ff ffb9 	bl	800a3ca <fast_HAL_DMA_Start_IT>
	/* Enable the TIM Capture/Compare 1 DMA request */
	htim1.Instance->DIER |= TIM_DMA_CC1;
 800a458:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	4b0e      	ldr	r3, [pc, #56]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a466:	60da      	str	r2, [r3, #12]
	/* Enable the Capture compare channel */
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2201      	movs	r2, #1
 800a46e:	2100      	movs	r1, #0
 800a470:	4618      	mov	r0, r3
 800a472:	f7fa f96f 	bl	8004754 <TIM_CCxChannelCmd>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //starts PWM on CH1N pin
 800a476:	2100      	movs	r1, #0
 800a478:	4807      	ldr	r0, [pc, #28]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a47a:	f7fa f991 	bl	80047a0 <HAL_TIMEx_PWMN_Start>
	htim1.Instance->BDTR|=TIM_BDTR_MOE;
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <PWM_Start_DMA_Tim1+0x68>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a48c:	645a      	str	r2, [r3, #68]	; 0x44
	/* Enable the Peripheral */
	//htim1.Instance->CR1|=TIM_CR1_CEN;
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200009ac 	.word	0x200009ac
 800a49c:	08003eed 	.word	0x08003eed

0800a4a0 <tim6_start>:

void tim6_start(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <tim6_start+0x30>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <tim6_start+0x30>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0201 	orr.w	r2, r2, #1
 800a4b2:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  __HAL_TIM_ENABLE(&htim6);
 800a4b4:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <tim6_start+0x30>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <tim6_start+0x30>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0201 	orr.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000096c 	.word	0x2000096c

0800a4d4 <packet_callback>:
/* USER CODE BEGIN 0 */
uint32_t 	*dcc_packet;
uint32_t	dcc_packet_size;

void packet_callback(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
	  htim1.Instance->CR1 &= ~TIM_CR1_CEN;
 800a4d8:	4b12      	ldr	r3, [pc, #72]	; (800a524 <packet_callback+0x50>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b11      	ldr	r3, [pc, #68]	; (800a524 <packet_callback+0x50>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0201 	bic.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
	  if ( main_track.main_power == 1 )
 800a4e8:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <packet_callback+0x54>)
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d10b      	bne.n	800a508 <packet_callback+0x34>
	  {
		  HAL_TIM_Base_Start_IT(&htim6);
 800a4f0:	480e      	ldr	r0, [pc, #56]	; (800a52c <packet_callback+0x58>)
 800a4f2:	f7f9 f84b 	bl	800358c <HAL_TIM_Base_Start_IT>
		  update_semaphore = 0;
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <packet_callback+0x5c>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
		  htim16.Instance->PSC = TIM16_BLINK_ACTIVE;
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <packet_callback+0x60>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f241 0268 	movw	r2, #4200	; 0x1068
 800a504:	629a      	str	r2, [r3, #40]	; 0x28
 800a506:	e004      	b.n	800a512 <packet_callback+0x3e>
	  }
	  else
		  htim16.Instance->PSC = TIM16_BLINK_INACTIVE;
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <packet_callback+0x60>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800a510:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin,GPIO_PIN_RESET);
 800a512:	2200      	movs	r2, #0
 800a514:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a51c:	f7f6 ffe2 	bl	80014e4 <HAL_GPIO_WritePin>
}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200009ac 	.word	0x200009ac
 800a528:	2000078c 	.word	0x2000078c
 800a52c:	2000096c 	.word	0x2000096c
 800a530:	20000910 	.word	0x20000910
 800a534:	20000ae0 	.word	0x20000ae0

0800a538 <cutout_callback>:

void cutout_callback(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
	  PWM_Start_DMA_Tim1( dcc_packet , dcc_packet_size);
 800a53c:	4b11      	ldr	r3, [pc, #68]	; (800a584 <cutout_callback+0x4c>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	4b11      	ldr	r3, [pc, #68]	; (800a588 <cutout_callback+0x50>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7ff ff71 	bl	800a430 <PWM_Start_DMA_Tim1>
	  htim1.Instance->CR1|=TIM_CR1_CEN;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <cutout_callback+0x54>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <cutout_callback+0x54>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f042 0201 	orr.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin,GPIO_PIN_SET);
 800a55e:	2201      	movs	r2, #1
 800a560:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a568:	f7f6 ffbc 	bl	80014e4 <HAL_GPIO_WritePin>
	  dcc_packet = (uint32_t *)&idle_packet ;
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <cutout_callback+0x4c>)
 800a56e:	4a08      	ldr	r2, [pc, #32]	; (800a590 <cutout_callback+0x58>)
 800a570:	601a      	str	r2, [r3, #0]
	  dcc_packet_size = sizeof(idle_packet)/2;
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <cutout_callback+0x50>)
 800a574:	222c      	movs	r2, #44	; 0x2c
 800a576:	601a      	str	r2, [r3, #0]
	  update_semaphore = 1;
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <cutout_callback+0x5c>)
 800a57a:	2201      	movs	r2, #1
 800a57c:	601a      	str	r2, [r3, #0]
}
 800a57e:	bf00      	nop
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	2000071c 	.word	0x2000071c
 800a588:	2000064c 	.word	0x2000064c
 800a58c:	200009ac 	.word	0x200009ac
 800a590:	20000914 	.word	0x20000914
 800a594:	20000910 	.word	0x20000910

0800a598 <debug_flag_pulse>:

void debug_flag_pulse(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(DEBUG_FLAG_GPIO_Port, DEBUG_FLAG_Pin,GPIO_PIN_SET);
 800a59c:	2201      	movs	r2, #1
 800a59e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5a6:	f7f6 ff9d 	bl	80014e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_FLAG_GPIO_Port, DEBUG_FLAG_Pin,GPIO_PIN_RESET);
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5b4:	f7f6 ff96 	bl	80014e4 <HAL_GPIO_WritePin>
}
 800a5b8:	bf00      	nop
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a5c0:	f7f6 f82f 	bl	8000622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a5c4:	f000 f87c 	bl	800a6c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a5c8:	f000 fb38 	bl	800ac3c <MX_GPIO_Init>
  MX_DMA_Init();
 800a5cc:	f000 fb04 	bl	800abd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800a5d0:	f000 fab6 	bl	800ab40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800a5d4:	f000 f948 	bl	800a868 <MX_TIM1_Init>
  MX_TIM16_Init();
 800a5d8:	f000 fa36 	bl	800aa48 <MX_TIM16_Init>
  MX_TIM6_Init();
 800a5dc:	f000 f9f4 	bl	800a9c8 <MX_TIM6_Init>
  MX_COMP1_Init();
 800a5e0:	f000 f8da 	bl	800a798 <MX_COMP1_Init>
  MX_USB_Device_Init();
 800a5e4:	f000 fe2c 	bl	800b240 <MX_USB_Device_Init>
  MX_I2C1_Init();
 800a5e8:	f000 f8fe 	bl	800a7e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16,0); /* Used for live led */
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4829      	ldr	r0, [pc, #164]	; (800a694 <main+0xd8>)
 800a5f0:	f7f9 f82c 	bl	800364c <HAL_TIM_PWM_Start>

  init_bufs();
 800a5f4:	f7ff f9d6 	bl	80099a4 <init_bufs>
  uart_start();
 800a5f8:	f7ff fdf6 	bl	800a1e8 <uart_start>
  update_semaphore = 1;
 800a5fc:	4b26      	ldr	r3, [pc, #152]	; (800a698 <main+0xdc>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	601a      	str	r2, [r3, #0]
  main_track.main_power = 0;
 800a602:	4b26      	ldr	r3, [pc, #152]	; (800a69c <main+0xe0>)
 800a604:	2200      	movs	r2, #0
 800a606:	801a      	strh	r2, [r3, #0]

  dcc_packet = (uint32_t *)&idle_packet ;
 800a608:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <main+0xe4>)
 800a60a:	4a26      	ldr	r2, [pc, #152]	; (800a6a4 <main+0xe8>)
 800a60c:	601a      	str	r2, [r3, #0]
  dcc_packet_size = sizeof(idle_packet)/2;
 800a60e:	4b26      	ldr	r3, [pc, #152]	; (800a6a8 <main+0xec>)
 800a610:	222c      	movs	r2, #44	; 0x2c
 800a612:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rbuffer_size=0;
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <main+0xf0>)
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
   usb_index=0;
 800a61a:	4b25      	ldr	r3, [pc, #148]	; (800a6b0 <main+0xf4>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]
   while (1)
   {
 		if ( uart2_rx_buffer_ready ==1 )
 800a620:	4b24      	ldr	r3, [pc, #144]	; (800a6b4 <main+0xf8>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d105      	bne.n	800a634 <main+0x78>
 		{
 			uart2_rx_buffer_ready = 0;
 800a628:	4b22      	ldr	r3, [pc, #136]	; (800a6b4 <main+0xf8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
 			parser(FROM_UART);
 800a62e:	2000      	movs	r0, #0
 800a630:	f7ff fd1c 	bl	800a06c <parser>
 		}
 		// usb_rx_buffer_ready
 		if ( rbuffer_size != 0)
 800a634:	4b1d      	ldr	r3, [pc, #116]	; (800a6ac <main+0xf0>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0f1      	beq.n	800a620 <main+0x64>
 		{
 			if ( rbuffer[0] == '<')
 800a63c:	4b1e      	ldr	r3, [pc, #120]	; (800a6b8 <main+0xfc>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	2b3c      	cmp	r3, #60	; 0x3c
 800a642:	d102      	bne.n	800a64a <main+0x8e>
 				usb_rxbuf.byte_count = 0;
 800a644:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <main+0x100>)
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]

 			usb_rxbuf.packet[usb_rxbuf.byte_count] = rbuffer[0];
 800a64a:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <main+0x100>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	4619      	mov	r1, r3
 800a650:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <main+0xfc>)
 800a652:	781a      	ldrb	r2, [r3, #0]
 800a654:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <main+0x100>)
 800a656:	440b      	add	r3, r1
 800a658:	705a      	strb	r2, [r3, #1]
 			usb_rxbuf.byte_count++;
 800a65a:	4b18      	ldr	r3, [pc, #96]	; (800a6bc <main+0x100>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <main+0x100>)
 800a664:	701a      	strb	r2, [r3, #0]
 			if ( usb_rxbuf.byte_count >= USBUART_BUFLEN)
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <main+0x100>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b0e      	cmp	r3, #14
 800a66c:	d902      	bls.n	800a674 <main+0xb8>
 				usb_rxbuf.byte_count = 0;
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <main+0x100>)
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
 			if ( USB_UART_RxCpltCallback() )
 800a674:	f7ff fe30 	bl	800a2d8 <USB_UART_RxCpltCallback>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <main+0xce>
 			{
 				//CDC_Transmit_FS(usb_rxbuf.packet,usb_rxbuf.byte_count);
 				parser(FROM_USB);
 800a67e:	2001      	movs	r0, #1
 800a680:	f7ff fcf4 	bl	800a06c <parser>
 				usb_rxbuf.byte_count=0;
 800a684:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <main+0x100>)
 800a686:	2200      	movs	r2, #0
 800a688:	701a      	strb	r2, [r3, #0]
 			}
 			rbuffer_size=0;
 800a68a:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <main+0xf0>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
 		if ( uart2_rx_buffer_ready ==1 )
 800a690:	e7c6      	b.n	800a620 <main+0x64>
 800a692:	bf00      	nop
 800a694:	20000ae0 	.word	0x20000ae0
 800a698:	20000910 	.word	0x20000910
 800a69c:	2000078c 	.word	0x2000078c
 800a6a0:	2000071c 	.word	0x2000071c
 800a6a4:	20000914 	.word	0x20000914
 800a6a8:	2000064c 	.word	0x2000064c
 800a6ac:	2000090e 	.word	0x2000090e
 800a6b0:	2000078e 	.word	0x2000078e
 800a6b4:	2000081c 	.word	0x2000081c
 800a6b8:	20000650 	.word	0x20000650
 800a6bc:	20000790 	.word	0x20000790

0800a6c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b0a4      	sub	sp, #144	; 0x90
 800a6c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a6c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a6ca:	2238      	movs	r2, #56	; 0x38
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 fac2 	bl	800bc58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a6d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	605a      	str	r2, [r3, #4]
 800a6de:	609a      	str	r2, [r3, #8]
 800a6e0:	60da      	str	r2, [r3, #12]
 800a6e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	2244      	movs	r2, #68	; 0x44
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 fab4 	bl	800bc58 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f7f7 ff57 	bl	80025a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800a6f6:	2322      	movs	r3, #34	; 0x22
 800a6f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a6fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a704:	2301      	movs	r3, #1
 800a706:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a708:	2302      	movs	r3, #2
 800a70a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a70c:	2302      	movs	r3, #2
 800a70e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a710:	2304      	movs	r3, #4
 800a712:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a714:	2355      	movs	r3, #85	; 0x55
 800a716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 800a71a:	2314      	movs	r3, #20
 800a71c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a720:	2302      	movs	r3, #2
 800a722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a726:	2302      	movs	r3, #2
 800a728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a72c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a730:	4618      	mov	r0, r3
 800a732:	f7f7 ffdb 	bl	80026ec <HAL_RCC_OscConfig>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800a73c:	f000 fabe 	bl	800acbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a740:	230f      	movs	r3, #15
 800a742:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a744:	2303      	movs	r3, #3
 800a746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a748:	2300      	movs	r3, #0
 800a74a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a74c:	2300      	movs	r3, #0
 800a74e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a750:	2300      	movs	r3, #0
 800a752:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800a754:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a758:	2108      	movs	r1, #8
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f8 fade 	bl	8002d1c <HAL_RCC_ClockConfig>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800a766:	f000 faa9 	bl	800acbc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800a76a:	f242 0342 	movw	r3, #8258	; 0x2042
 800a76e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800a770:	2308      	movs	r3, #8
 800a772:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a774:	2300      	movs	r3, #0
 800a776:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a778:	2300      	movs	r3, #0
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a77c:	463b      	mov	r3, r7
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f8 fce8 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800a78a:	f000 fa97 	bl	800acbc <Error_Handler>
  }
}
 800a78e:	bf00      	nop
 800a790:	3790      	adds	r7, #144	; 0x90
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800a79c:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a79e:	4a10      	ldr	r2, [pc, #64]	; (800a7e0 <MX_COMP1_Init+0x48>)
 800a7a0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800a7a2:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_3_4VREFINT;
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7aa:	4a0e      	ldr	r2, [pc, #56]	; (800a7e4 <MX_COMP1_Init+0x4c>)
 800a7ac:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a7ae:	4b0b      	ldr	r3, [pc, #44]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a7ba:	4b08      	ldr	r3, [pc, #32]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800a7c6:	4805      	ldr	r0, [pc, #20]	; (800a7dc <MX_COMP1_Init+0x44>)
 800a7c8:	f7f6 f844 	bl	8000854 <HAL_COMP_Init>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800a7d2:	f000 fa73 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800a7d6:	bf00      	nop
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200007a0 	.word	0x200007a0
 800a7e0:	40010200 	.word	0x40010200
 800a7e4:	00c00020 	.word	0x00c00020

0800a7e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <MX_I2C1_Init+0x74>)
 800a7ee:	4a1c      	ldr	r2, [pc, #112]	; (800a860 <MX_I2C1_Init+0x78>)
 800a7f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800a7f2:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <MX_I2C1_Init+0x74>)
 800a7f4:	4a1b      	ldr	r2, [pc, #108]	; (800a864 <MX_I2C1_Init+0x7c>)
 800a7f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a7f8:	4b18      	ldr	r3, [pc, #96]	; (800a85c <MX_I2C1_Init+0x74>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <MX_I2C1_Init+0x74>)
 800a800:	2201      	movs	r2, #1
 800a802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <MX_I2C1_Init+0x74>)
 800a806:	2200      	movs	r2, #0
 800a808:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a80a:	4b14      	ldr	r3, [pc, #80]	; (800a85c <MX_I2C1_Init+0x74>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a810:	4b12      	ldr	r3, [pc, #72]	; (800a85c <MX_I2C1_Init+0x74>)
 800a812:	2200      	movs	r2, #0
 800a814:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <MX_I2C1_Init+0x74>)
 800a818:	2200      	movs	r2, #0
 800a81a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a81c:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <MX_I2C1_Init+0x74>)
 800a81e:	2200      	movs	r2, #0
 800a820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a822:	480e      	ldr	r0, [pc, #56]	; (800a85c <MX_I2C1_Init+0x74>)
 800a824:	f7f6 fe76 	bl	8001514 <HAL_I2C_Init>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a82e:	f000 fa45 	bl	800acbc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a832:	2100      	movs	r1, #0
 800a834:	4809      	ldr	r0, [pc, #36]	; (800a85c <MX_I2C1_Init+0x74>)
 800a836:	f7f6 fefc 	bl	8001632 <HAL_I2CEx_ConfigAnalogFilter>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a840:	f000 fa3c 	bl	800acbc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a844:	2100      	movs	r1, #0
 800a846:	4805      	ldr	r0, [pc, #20]	; (800a85c <MX_I2C1_Init+0x74>)
 800a848:	f7f6 ff3e 	bl	80016c8 <HAL_I2CEx_ConfigDigitalFilter>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a852:	f000 fa33 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	200006d0 	.word	0x200006d0
 800a860:	40005400 	.word	0x40005400
 800a864:	30a0a7fb 	.word	0x30a0a7fb

0800a868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b09c      	sub	sp, #112	; 0x70
 800a86c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a86e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	605a      	str	r2, [r3, #4]
 800a878:	609a      	str	r2, [r3, #8]
 800a87a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a87c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	605a      	str	r2, [r3, #4]
 800a892:	609a      	str	r2, [r3, #8]
 800a894:	60da      	str	r2, [r3, #12]
 800a896:	611a      	str	r2, [r3, #16]
 800a898:	615a      	str	r2, [r3, #20]
 800a89a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a89c:	1d3b      	adds	r3, r7, #4
 800a89e:	2234      	movs	r2, #52	; 0x34
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 f9d8 	bl	800bc58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a8a8:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8aa:	4a46      	ldr	r2, [pc, #280]	; (800a9c4 <MX_TIM1_Init+0x15c>)
 800a8ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170;
 800a8ae:	4b44      	ldr	r3, [pc, #272]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8b0:	22aa      	movs	r2, #170	; 0xaa
 800a8b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8b4:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 112;
 800a8ba:	4b41      	ldr	r3, [pc, #260]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8bc:	2270      	movs	r2, #112	; 0x70
 800a8be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8c0:	4b3f      	ldr	r3, [pc, #252]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a8c6:	4b3e      	ldr	r3, [pc, #248]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8cc:	4b3c      	ldr	r3, [pc, #240]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a8d2:	483b      	ldr	r0, [pc, #236]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8d4:	f7f8 fe2e 	bl	8003534 <HAL_TIM_Base_Init>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800a8de:	f000 f9ed 	bl	800acbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a8e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4834      	ldr	r0, [pc, #208]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a8f0:	f7f9 f9e2 	bl	8003cb8 <HAL_TIM_ConfigClockSource>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800a8fa:	f000 f9df 	bl	800acbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a8fe:	4830      	ldr	r0, [pc, #192]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a900:	f7f8 fe6e 	bl	80035e0 <HAL_TIM_PWM_Init>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800a90a:	f000 f9d7 	bl	800acbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a90e:	2300      	movs	r3, #0
 800a910:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a912:	2300      	movs	r3, #0
 800a914:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a916:	2300      	movs	r3, #0
 800a918:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a91a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a91e:	4619      	mov	r1, r3
 800a920:	4827      	ldr	r0, [pc, #156]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a922:	f7f9 ff6d 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800a92c:	f000 f9c6 	bl	800acbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a930:	2360      	movs	r3, #96	; 0x60
 800a932:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 56;
 800a934:	2338      	movs	r3, #56	; 0x38
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a938:	2300      	movs	r3, #0
 800a93a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a93c:	2300      	movs	r3, #0
 800a93e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a940:	2300      	movs	r3, #0
 800a942:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a944:	2300      	movs	r3, #0
 800a946:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a948:	2300      	movs	r3, #0
 800a94a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a94c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	481a      	ldr	r0, [pc, #104]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a956:	f7f9 f897 	bl	8003a88 <HAL_TIM_PWM_ConfigChannel>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800a960:	f000 f9ac 	bl	800acbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a964:	2300      	movs	r3, #0
 800a966:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a968:	2300      	movs	r3, #0
 800a96a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a97c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a982:	2300      	movs	r3, #0
 800a984:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a986:	2300      	movs	r3, #0
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a98a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a98e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a994:	2300      	movs	r3, #0
 800a996:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a998:	2300      	movs	r3, #0
 800a99a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a99c:	1d3b      	adds	r3, r7, #4
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4807      	ldr	r0, [pc, #28]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a9a2:	f7f9 ff8b 	bl	80048bc <HAL_TIMEx_ConfigBreakDeadTime>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800a9ac:	f000 f986 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a9b0:	4803      	ldr	r0, [pc, #12]	; (800a9c0 <MX_TIM1_Init+0x158>)
 800a9b2:	f000 faeb 	bl	800af8c <HAL_TIM_MspPostInit>

}
 800a9b6:	bf00      	nop
 800a9b8:	3770      	adds	r7, #112	; 0x70
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200009ac 	.word	0x200009ac
 800a9c4:	40012c00 	.word	0x40012c00

0800a9c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	605a      	str	r2, [r3, #4]
 800a9d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a9d8:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9da:	4a1a      	ldr	r2, [pc, #104]	; (800aa44 <MX_TIM6_Init+0x7c>)
 800a9dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 800a9de:	4b18      	ldr	r3, [pc, #96]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9e0:	22aa      	movs	r2, #170	; 0xaa
 800a9e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9e4:	4b16      	ldr	r3, [pc, #88]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 487;
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9ec:	f240 12e7 	movw	r2, #487	; 0x1e7
 800a9f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9f2:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a9f8:	4811      	ldr	r0, [pc, #68]	; (800aa40 <MX_TIM6_Init+0x78>)
 800a9fa:	f7f8 fd9b 	bl	8003534 <HAL_TIM_Base_Init>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800aa04:	f000 f95a 	bl	800acbc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800aa08:	2108      	movs	r1, #8
 800aa0a:	480d      	ldr	r0, [pc, #52]	; (800aa40 <MX_TIM6_Init+0x78>)
 800aa0c:	f7f8 fe76 	bl	80036fc <HAL_TIM_OnePulse_Init>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 800aa16:	f000 f951 	bl	800acbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800aa22:	1d3b      	adds	r3, r7, #4
 800aa24:	4619      	mov	r1, r3
 800aa26:	4806      	ldr	r0, [pc, #24]	; (800aa40 <MX_TIM6_Init+0x78>)
 800aa28:	f7f9 feea 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 800aa32:	f000 f943 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000096c 	.word	0x2000096c
 800aa44:	40001000 	.word	0x40001000

0800aa48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b094      	sub	sp, #80	; 0x50
 800aa4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800aa4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	605a      	str	r2, [r3, #4]
 800aa58:	609a      	str	r2, [r3, #8]
 800aa5a:	60da      	str	r2, [r3, #12]
 800aa5c:	611a      	str	r2, [r3, #16]
 800aa5e:	615a      	str	r2, [r3, #20]
 800aa60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800aa62:	463b      	mov	r3, r7
 800aa64:	2234      	movs	r2, #52	; 0x34
 800aa66:	2100      	movs	r1, #0
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 f8f5 	bl	800bc58 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800aa6e:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa70:	4a32      	ldr	r2, [pc, #200]	; (800ab3c <MX_TIM16_Init+0xf4>)
 800aa72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16800;
 800aa74:	4b30      	ldr	r3, [pc, #192]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa76:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800aa7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa7c:	4b2e      	ldr	r3, [pc, #184]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 800aa82:	4b2d      	ldr	r3, [pc, #180]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa84:	f644 6220 	movw	r2, #20000	; 0x4e20
 800aa88:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa8a:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800aa90:	4b29      	ldr	r3, [pc, #164]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa96:	4b28      	ldr	r3, [pc, #160]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800aa9c:	4826      	ldr	r0, [pc, #152]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aa9e:	f7f8 fd49 	bl	8003534 <HAL_TIM_Base_Init>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800aaa8:	f000 f908 	bl	800acbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800aaac:	4822      	ldr	r0, [pc, #136]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aaae:	f7f8 fd97 	bl	80035e0 <HAL_TIM_PWM_Init>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800aab8:	f000 f900 	bl	800acbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aabc:	2360      	movs	r3, #96	; 0x60
 800aabe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1000;
 800aac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aaca:	2300      	movs	r3, #0
 800aacc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aace:	2300      	movs	r3, #0
 800aad0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aad2:	2300      	movs	r3, #0
 800aad4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aad6:	2300      	movs	r3, #0
 800aad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aade:	2200      	movs	r2, #0
 800aae0:	4619      	mov	r1, r3
 800aae2:	4815      	ldr	r0, [pc, #84]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800aae4:	f7f8 ffd0 	bl	8003a88 <HAL_TIM_PWM_ConfigChannel>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 800aaee:	f000 f8e5 	bl	800acbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800aafa:	2300      	movs	r3, #0
 800aafc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ab06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800ab14:	463b      	mov	r3, r7
 800ab16:	4619      	mov	r1, r3
 800ab18:	4807      	ldr	r0, [pc, #28]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800ab1a:	f7f9 fecf 	bl	80048bc <HAL_TIMEx_ConfigBreakDeadTime>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 800ab24:	f000 f8ca 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800ab28:	4803      	ldr	r0, [pc, #12]	; (800ab38 <MX_TIM16_Init+0xf0>)
 800ab2a:	f000 fa2f 	bl	800af8c <HAL_TIM_MspPostInit>

}
 800ab2e:	bf00      	nop
 800ab30:	3750      	adds	r7, #80	; 0x50
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000ae0 	.word	0x20000ae0
 800ab3c:	40014400 	.word	0x40014400

0800ab40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ab44:	4b22      	ldr	r3, [pc, #136]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab46:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <MX_USART2_UART_Init+0x94>)
 800ab48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ab4a:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ab52:	4b1f      	ldr	r3, [pc, #124]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ab58:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ab5e:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab64:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab66:	220c      	movs	r2, #12
 800ab68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab6a:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab70:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab76:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab7c:	4b14      	ldr	r3, [pc, #80]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab82:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab88:	4811      	ldr	r0, [pc, #68]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab8a:	f7f9 ffa2 	bl	8004ad2 <HAL_UART_Init>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800ab94:	f000 f892 	bl	800acbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab98:	2100      	movs	r1, #0
 800ab9a:	480d      	ldr	r0, [pc, #52]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800ab9c:	f7fc f8a9 	bl	8006cf2 <HAL_UARTEx_SetTxFifoThreshold>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800aba6:	f000 f889 	bl	800acbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800abaa:	2100      	movs	r1, #0
 800abac:	4808      	ldr	r0, [pc, #32]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800abae:	f7fc f8de 	bl	8006d6e <HAL_UARTEx_SetRxFifoThreshold>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800abb8:	f000 f880 	bl	800acbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800abbc:	4804      	ldr	r0, [pc, #16]	; (800abd0 <MX_USART2_UART_Init+0x90>)
 800abbe:	f7fc f85f 	bl	8006c80 <HAL_UARTEx_DisableFifoMode>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800abc8:	f000 f878 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800abcc:	bf00      	nop
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000a44 	.word	0x20000a44
 800abd4:	40004400 	.word	0x40004400

0800abd8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800abde:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <MX_DMA_Init+0x60>)
 800abe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <MX_DMA_Init+0x60>)
 800abe4:	f043 0304 	orr.w	r3, r3, #4
 800abe8:	6493      	str	r3, [r2, #72]	; 0x48
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <MX_DMA_Init+0x60>)
 800abec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abee:	f003 0304 	and.w	r3, r3, #4
 800abf2:	607b      	str	r3, [r7, #4]
 800abf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800abf6:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <MX_DMA_Init+0x60>)
 800abf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abfa:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <MX_DMA_Init+0x60>)
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	6493      	str	r3, [r2, #72]	; 0x48
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <MX_DMA_Init+0x60>)
 800ac04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2100      	movs	r1, #0
 800ac12:	200b      	movs	r0, #11
 800ac14:	f7f5 ffd5 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ac18:	200b      	movs	r0, #11
 800ac1a:	f7f5 ffec 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2100      	movs	r1, #0
 800ac22:	200c      	movs	r0, #12
 800ac24:	f7f5 ffcd 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800ac28:	200c      	movs	r0, #12
 800ac2a:	f7f5 ffe4 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

}
 800ac2e:	bf00      	nop
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	40021000 	.word	0x40021000

0800ac3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac42:	f107 030c 	add.w	r3, r7, #12
 800ac46:	2200      	movs	r2, #0
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	605a      	str	r2, [r3, #4]
 800ac4c:	609a      	str	r2, [r3, #8]
 800ac4e:	60da      	str	r2, [r3, #12]
 800ac50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac52:	4b19      	ldr	r3, [pc, #100]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac56:	4a18      	ldr	r2, [pc, #96]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac5e:	4b16      	ldr	r3, [pc, #88]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	60bb      	str	r3, [r7, #8]
 800ac68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6e:	4a12      	ldr	r2, [pc, #72]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac70:	f043 0302 	orr.w	r3, r3, #2
 800ac74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac76:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <MX_GPIO_Init+0x7c>)
 800ac78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	607b      	str	r3, [r7, #4]
 800ac80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|DEBUG_FLAG_Pin, GPIO_PIN_RESET);
 800ac82:	2200      	movs	r2, #0
 800ac84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ac88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac8c:	f7f6 fc2a 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin DEBUG_FLAG_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DEBUG_FLAG_Pin;
 800ac90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ac94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac96:	2301      	movs	r3, #1
 800ac98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aca2:	f107 030c 	add.w	r3, r7, #12
 800aca6:	4619      	mov	r1, r3
 800aca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acac:	f7f6 fa98 	bl	80011e0 <HAL_GPIO_Init>

}
 800acb0:	bf00      	nop
 800acb2:	3720      	adds	r7, #32
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	40021000 	.word	0x40021000

0800acbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800acc0:	bf00      	nop
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
	...

0800accc <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	4a04      	ldr	r2, [pc, #16]	; (800ace8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800acd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acda:	6093      	str	r3, [r2, #8]
}
 800acdc:	bf00      	nop
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40007000 	.word	0x40007000

0800acec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <HAL_MspInit+0x44>)
 800acf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf6:	4a0e      	ldr	r2, [pc, #56]	; (800ad30 <HAL_MspInit+0x44>)
 800acf8:	f043 0301 	orr.w	r3, r3, #1
 800acfc:	6613      	str	r3, [r2, #96]	; 0x60
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <HAL_MspInit+0x44>)
 800ad00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad0a:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <HAL_MspInit+0x44>)
 800ad0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0e:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <HAL_MspInit+0x44>)
 800ad10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad14:	6593      	str	r3, [r2, #88]	; 0x58
 800ad16:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <HAL_MspInit+0x44>)
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800ad22:	f7ff ffd3 	bl	800accc <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	40021000 	.word	0x40021000

0800ad34 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	60da      	str	r2, [r3, #12]
 800ad4a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a18      	ldr	r2, [pc, #96]	; (800adb4 <HAL_COMP_MspInit+0x80>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d129      	bne.n	800adaa <HAL_COMP_MspInit+0x76>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad56:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <HAL_COMP_MspInit+0x84>)
 800ad58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <HAL_COMP_MspInit+0x84>)
 800ad5c:	f043 0301 	orr.w	r3, r3, #1
 800ad60:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <HAL_COMP_MspInit+0x84>)
 800ad64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	60bb      	str	r3, [r7, #8]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad72:	2302      	movs	r3, #2
 800ad74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 800ad7e:	2308      	movs	r3, #8
 800ad80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4619      	mov	r1, r3
 800ad88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad8c:	f7f6 fa28 	bl	80011e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_Pin;
 800ad90:	2302      	movs	r3, #2
 800ad92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad94:	2303      	movs	r3, #3
 800ad96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	4619      	mov	r1, r3
 800ada2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ada6:	f7f6 fa1b 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800adaa:	bf00      	nop
 800adac:	3720      	adds	r7, #32
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	40010200 	.word	0x40010200
 800adb8:	40021000 	.word	0x40021000

0800adbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08a      	sub	sp, #40	; 0x28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adc4:	f107 0314 	add.w	r3, r7, #20
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	605a      	str	r2, [r3, #4]
 800adce:	609a      	str	r2, [r3, #8]
 800add0:	60da      	str	r2, [r3, #12]
 800add2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a26      	ldr	r2, [pc, #152]	; (800ae74 <HAL_I2C_MspInit+0xb8>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d145      	bne.n	800ae6a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adde:	4b26      	ldr	r3, [pc, #152]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	4a25      	ldr	r2, [pc, #148]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ade4:	f043 0301 	orr.w	r3, r3, #1
 800ade8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adea:	4b23      	ldr	r3, [pc, #140]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800adec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800adf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adfa:	4a1f      	ldr	r2, [pc, #124]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800adfc:	f043 0302 	orr.w	r3, r3, #2
 800ae00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae02:	4b1d      	ldr	r3, [pc, #116]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ae04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ae0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ae14:	2312      	movs	r3, #18
 800ae16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ae20:	2304      	movs	r3, #4
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae2e:	f7f6 f9d7 	bl	80011e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ae32:	2380      	movs	r3, #128	; 0x80
 800ae34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ae36:	2312      	movs	r3, #18
 800ae38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ae42:	2304      	movs	r3, #4
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae46:	f107 0314 	add.w	r3, r7, #20
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	480b      	ldr	r0, [pc, #44]	; (800ae7c <HAL_I2C_MspInit+0xc0>)
 800ae4e:	f7f6 f9c7 	bl	80011e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ae52:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ae54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae56:	4a08      	ldr	r2, [pc, #32]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ae58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae5c:	6593      	str	r3, [r2, #88]	; 0x58
 800ae5e:	4b06      	ldr	r3, [pc, #24]	; (800ae78 <HAL_I2C_MspInit+0xbc>)
 800ae60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae66:	60bb      	str	r3, [r7, #8]
 800ae68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ae6a:	bf00      	nop
 800ae6c:	3728      	adds	r7, #40	; 0x28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	40005400 	.word	0x40005400
 800ae78:	40021000 	.word	0x40021000
 800ae7c:	48000400 	.word	0x48000400

0800ae80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a39      	ldr	r2, [pc, #228]	; (800af74 <HAL_TIM_Base_MspInit+0xf4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d140      	bne.n	800af14 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ae92:	4b39      	ldr	r3, [pc, #228]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800ae94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae96:	4a38      	ldr	r2, [pc, #224]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800ae98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae9c:	6613      	str	r3, [r2, #96]	; 0x60
 800ae9e:	4b36      	ldr	r3, [pc, #216]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800aea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 800aeaa:	4b34      	ldr	r3, [pc, #208]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aeac:	4a34      	ldr	r2, [pc, #208]	; (800af80 <HAL_TIM_Base_MspInit+0x100>)
 800aeae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800aeb0:	4b32      	ldr	r3, [pc, #200]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aeb2:	222a      	movs	r2, #42	; 0x2a
 800aeb4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aeb6:	4b31      	ldr	r3, [pc, #196]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aeb8:	2210      	movs	r2, #16
 800aeba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aebc:	4b2f      	ldr	r3, [pc, #188]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800aec2:	4b2e      	ldr	r3, [pc, #184]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aec4:	2280      	movs	r2, #128	; 0x80
 800aec6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aec8:	4b2c      	ldr	r3, [pc, #176]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aeca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aece:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aed0:	4b2a      	ldr	r3, [pc, #168]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aed6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800aed8:	4b28      	ldr	r3, [pc, #160]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800aede:	4b27      	ldr	r3, [pc, #156]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aee0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aee4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800aee6:	4825      	ldr	r0, [pc, #148]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aee8:	f7f5 fea0 	bl	8000c2c <HAL_DMA_Init>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800aef2:	f7ff fee3 	bl	800acbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a20      	ldr	r2, [pc, #128]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24
 800aefc:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <HAL_TIM_Base_MspInit+0xfc>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800af02:	2200      	movs	r2, #0
 800af04:	2100      	movs	r1, #0
 800af06:	201a      	movs	r0, #26
 800af08:	f7f5 fe5b 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800af0c:	201a      	movs	r0, #26
 800af0e:	f7f5 fe72 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800af12:	e02a      	b.n	800af6a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a1a      	ldr	r2, [pc, #104]	; (800af84 <HAL_TIM_Base_MspInit+0x104>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d114      	bne.n	800af48 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800af1e:	4b16      	ldr	r3, [pc, #88]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af22:	4a15      	ldr	r2, [pc, #84]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af24:	f043 0310 	orr.w	r3, r3, #16
 800af28:	6593      	str	r3, [r2, #88]	; 0x58
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	f003 0310 	and.w	r3, r3, #16
 800af32:	613b      	str	r3, [r7, #16]
 800af34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	2036      	movs	r0, #54	; 0x36
 800af3c:	f7f5 fe41 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800af40:	2036      	movs	r0, #54	; 0x36
 800af42:	f7f5 fe58 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
}
 800af46:	e010      	b.n	800af6a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a0e      	ldr	r2, [pc, #56]	; (800af88 <HAL_TIM_Base_MspInit+0x108>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d10b      	bne.n	800af6a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800af52:	4b09      	ldr	r3, [pc, #36]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af56:	4a08      	ldr	r2, [pc, #32]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af5c:	6613      	str	r3, [r2, #96]	; 0x60
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <HAL_TIM_Base_MspInit+0xf8>)
 800af60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	68fb      	ldr	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	40012c00 	.word	0x40012c00
 800af78:	40021000 	.word	0x40021000
 800af7c:	200005ec 	.word	0x200005ec
 800af80:	40020008 	.word	0x40020008
 800af84:	40001000 	.word	0x40001000
 800af88:	40014400 	.word	0x40014400

0800af8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	605a      	str	r2, [r3, #4]
 800af9e:	609a      	str	r2, [r3, #8]
 800afa0:	60da      	str	r2, [r3, #12]
 800afa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a23      	ldr	r2, [pc, #140]	; (800b038 <HAL_TIM_MspPostInit+0xac>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d11e      	bne.n	800afec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800afb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb2:	4a22      	ldr	r2, [pc, #136]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800afb4:	f043 0301 	orr.w	r3, r3, #1
 800afb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afba:	4b20      	ldr	r3, [pc, #128]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800afbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800afc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800afca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afcc:	2302      	movs	r3, #2
 800afce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afd4:	2300      	movs	r3, #0
 800afd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800afd8:	2306      	movs	r3, #6
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	4619      	mov	r1, r3
 800afe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800afe6:	f7f6 f8fb 	bl	80011e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800afea:	e021      	b.n	800b030 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a13      	ldr	r2, [pc, #76]	; (800b040 <HAL_TIM_MspPostInit+0xb4>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d11c      	bne.n	800b030 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aff6:	4b11      	ldr	r3, [pc, #68]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800aff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affa:	4a10      	ldr	r2, [pc, #64]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800affc:	f043 0302 	orr.w	r3, r3, #2
 800b000:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b002:	4b0e      	ldr	r3, [pc, #56]	; (800b03c <HAL_TIM_MspPostInit+0xb0>)
 800b004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM16_CH1_LED_Pin;
 800b00e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b014:	2302      	movs	r3, #2
 800b016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b01c:	2300      	movs	r3, #0
 800b01e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800b020:	2301      	movs	r3, #1
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM16_CH1_LED_GPIO_Port, &GPIO_InitStruct);
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	4619      	mov	r1, r3
 800b02a:	4806      	ldr	r0, [pc, #24]	; (800b044 <HAL_TIM_MspPostInit+0xb8>)
 800b02c:	f7f6 f8d8 	bl	80011e0 <HAL_GPIO_Init>
}
 800b030:	bf00      	nop
 800b032:	3728      	adds	r7, #40	; 0x28
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40021000 	.word	0x40021000
 800b040:	40014400 	.word	0x40014400
 800b044:	48000400 	.word	0x48000400

0800b048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b050:	f107 0314 	add.w	r3, r7, #20
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	605a      	str	r2, [r3, #4]
 800b05a:	609a      	str	r2, [r3, #8]
 800b05c:	60da      	str	r2, [r3, #12]
 800b05e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a30      	ldr	r2, [pc, #192]	; (800b128 <HAL_UART_MspInit+0xe0>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d159      	bne.n	800b11e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b06a:	4b30      	ldr	r3, [pc, #192]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06e:	4a2f      	ldr	r2, [pc, #188]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b074:	6593      	str	r3, [r2, #88]	; 0x58
 800b076:	4b2d      	ldr	r3, [pc, #180]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07e:	613b      	str	r3, [r7, #16]
 800b080:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b082:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b086:	4a29      	ldr	r2, [pc, #164]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b088:	f043 0301 	orr.w	r3, r3, #1
 800b08c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b08e:	4b27      	ldr	r3, [pc, #156]	; (800b12c <HAL_UART_MspInit+0xe4>)
 800b090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800b09a:	230c      	movs	r3, #12
 800b09c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b0aa:	2307      	movs	r3, #7
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0ae:	f107 0314 	add.w	r3, r7, #20
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0b8:	f7f6 f892 	bl	80011e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800b0bc:	4b1c      	ldr	r3, [pc, #112]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0be:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <HAL_UART_MspInit+0xec>)
 800b0c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800b0c2:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0c4:	221b      	movs	r2, #27
 800b0c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0c8:	4b19      	ldr	r3, [pc, #100]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0ca:	2210      	movs	r2, #16
 800b0cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0ce:	4b18      	ldr	r3, [pc, #96]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b0d4:	4b16      	ldr	r3, [pc, #88]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0d6:	2280      	movs	r2, #128	; 0x80
 800b0d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0da:	4b15      	ldr	r3, [pc, #84]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0e0:	4b13      	ldr	r3, [pc, #76]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b0e6:	4b12      	ldr	r3, [pc, #72]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b0ec:	4b10      	ldr	r3, [pc, #64]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b0f2:	480f      	ldr	r0, [pc, #60]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b0f4:	f7f5 fd9a 	bl	8000c2c <HAL_DMA_Init>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800b0fe:	f7ff fddd 	bl	800acbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a0a      	ldr	r2, [pc, #40]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b106:	675a      	str	r2, [r3, #116]	; 0x74
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <HAL_UART_MspInit+0xe8>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800b10e:	2200      	movs	r2, #0
 800b110:	2100      	movs	r1, #0
 800b112:	2026      	movs	r0, #38	; 0x26
 800b114:	f7f5 fd55 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b118:	2026      	movs	r0, #38	; 0x26
 800b11a:	f7f5 fd6c 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b11e:	bf00      	nop
 800b120:	3728      	adds	r7, #40	; 0x28
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40004400 	.word	0x40004400
 800b12c:	40021000 	.word	0x40021000
 800b130:	20000820 	.word	0x20000820
 800b134:	4002001c 	.word	0x4002001c

0800b138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b13c:	bf00      	nop
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b146:	b480      	push	{r7}
 800b148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b14a:	e7fe      	b.n	800b14a <HardFault_Handler+0x4>

0800b14c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b150:	e7fe      	b.n	800b150 <MemManage_Handler+0x4>

0800b152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b152:	b480      	push	{r7}
 800b154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b156:	e7fe      	b.n	800b156 <BusFault_Handler+0x4>

0800b158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b158:	b480      	push	{r7}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b15c:	e7fe      	b.n	800b15c <UsageFault_Handler+0x4>

0800b15e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b15e:	b480      	push	{r7}
 800b160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b162:	bf00      	nop
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b170:	bf00      	nop
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b17a:	b480      	push	{r7}
 800b17c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b17e:	bf00      	nop
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b18c:	f7f5 fa9c 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b190:	bf00      	nop
 800b192:	bd80      	pop	{r7, pc}

0800b194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800b198:	4803      	ldr	r0, [pc, #12]	; (800b1a8 <DMA1_Channel1_IRQHandler+0x14>)
 800b19a:	f7f5 fed1 	bl	8000f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  packet_callback();
 800b19e:	f7ff f999 	bl	800a4d4 <packet_callback>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b1a2:	bf00      	nop
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200005ec 	.word	0x200005ec

0800b1ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b1b0:	4802      	ldr	r0, [pc, #8]	; (800b1bc <DMA1_Channel2_IRQHandler+0x10>)
 800b1b2:	f7f5 fec5 	bl	8000f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800b1b6:	bf00      	nop
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000820 	.word	0x20000820

0800b1c0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b1c4:	4802      	ldr	r0, [pc, #8]	; (800b1d0 <USB_LP_IRQHandler+0x10>)
 800b1c6:	f7f6 fba8 	bl	800191a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800b1ca:	bf00      	nop
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20001630 	.word	0x20001630

0800b1d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b1d8:	4802      	ldr	r0, [pc, #8]	; (800b1e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800b1da:	f7f8 fad5 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200009ac 	.word	0x200009ac

0800b1e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b1ec:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <USART2_IRQHandler+0x10>)
 800b1ee:	f7f9 fe19 	bl	8004e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000a44 	.word	0x20000a44

0800b1fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b200:	4803      	ldr	r0, [pc, #12]	; (800b210 <TIM6_DAC_IRQHandler+0x14>)
 800b202:	f7f8 fac1 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  cutout_callback();
 800b206:	f7ff f997 	bl	800a538 <cutout_callback>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	2000096c 	.word	0x2000096c

0800b214 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b214:	b480      	push	{r7}
 800b216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <SystemInit+0x28>)
 800b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21e:	4a07      	ldr	r2, [pc, #28]	; (800b23c <SystemInit+0x28>)
 800b220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <SystemInit+0x28>)
 800b22a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b22e:	609a      	str	r2, [r3, #8]
#endif
}
 800b230:	bf00      	nop
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	e000ed00 	.word	0xe000ed00

0800b240 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b244:	2200      	movs	r2, #0
 800b246:	4912      	ldr	r1, [pc, #72]	; (800b290 <MX_USB_Device_Init+0x50>)
 800b248:	4812      	ldr	r0, [pc, #72]	; (800b294 <MX_USB_Device_Init+0x54>)
 800b24a:	f7fd fa4b 	bl	80086e4 <USBD_Init>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b254:	f7ff fd32 	bl	800acbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b258:	490f      	ldr	r1, [pc, #60]	; (800b298 <MX_USB_Device_Init+0x58>)
 800b25a:	480e      	ldr	r0, [pc, #56]	; (800b294 <MX_USB_Device_Init+0x54>)
 800b25c:	f7fd fa6d 	bl	800873a <USBD_RegisterClass>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b266:	f7ff fd29 	bl	800acbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b26a:	490c      	ldr	r1, [pc, #48]	; (800b29c <MX_USB_Device_Init+0x5c>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <MX_USB_Device_Init+0x54>)
 800b26e:	f7fd f99b 	bl	80085a8 <USBD_CDC_RegisterInterface>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b278:	f7ff fd20 	bl	800acbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <MX_USB_Device_Init+0x54>)
 800b27e:	f7fd fa76 	bl	800876e <USBD_Start>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b288:	f7ff fd18 	bl	800acbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b28c:	bf00      	nop
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	2000012c 	.word	0x2000012c
 800b294:	20000b9c 	.word	0x20000b9c
 800b298:	20000014 	.word	0x20000014
 800b29c:	2000011c 	.word	0x2000011c

0800b2a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4905      	ldr	r1, [pc, #20]	; (800b2bc <CDC_Init_FS+0x1c>)
 800b2a8:	4805      	ldr	r0, [pc, #20]	; (800b2c0 <CDC_Init_FS+0x20>)
 800b2aa:	f7fd f994 	bl	80085d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2ae:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <CDC_Init_FS+0x24>)
 800b2b0:	4803      	ldr	r0, [pc, #12]	; (800b2c0 <CDC_Init_FS+0x20>)
 800b2b2:	f7fd f9aa 	bl	800860a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20001248 	.word	0x20001248
 800b2c0:	20000b9c 	.word	0x20000b9c
 800b2c4:	20000e60 	.word	0x20000e60

0800b2c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	2b23      	cmp	r3, #35	; 0x23
 800b2ec:	d84a      	bhi.n	800b384 <CDC_Control_FS+0xac>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <CDC_Control_FS+0x1c>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b385 	.word	0x0800b385
 800b2f8:	0800b385 	.word	0x0800b385
 800b2fc:	0800b385 	.word	0x0800b385
 800b300:	0800b385 	.word	0x0800b385
 800b304:	0800b385 	.word	0x0800b385
 800b308:	0800b385 	.word	0x0800b385
 800b30c:	0800b385 	.word	0x0800b385
 800b310:	0800b385 	.word	0x0800b385
 800b314:	0800b385 	.word	0x0800b385
 800b318:	0800b385 	.word	0x0800b385
 800b31c:	0800b385 	.word	0x0800b385
 800b320:	0800b385 	.word	0x0800b385
 800b324:	0800b385 	.word	0x0800b385
 800b328:	0800b385 	.word	0x0800b385
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b385 	.word	0x0800b385
 800b334:	0800b385 	.word	0x0800b385
 800b338:	0800b385 	.word	0x0800b385
 800b33c:	0800b385 	.word	0x0800b385
 800b340:	0800b385 	.word	0x0800b385
 800b344:	0800b385 	.word	0x0800b385
 800b348:	0800b385 	.word	0x0800b385
 800b34c:	0800b385 	.word	0x0800b385
 800b350:	0800b385 	.word	0x0800b385
 800b354:	0800b385 	.word	0x0800b385
 800b358:	0800b385 	.word	0x0800b385
 800b35c:	0800b385 	.word	0x0800b385
 800b360:	0800b385 	.word	0x0800b385
 800b364:	0800b385 	.word	0x0800b385
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b385 	.word	0x0800b385
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b385 	.word	0x0800b385
 800b37c:	0800b385 	.word	0x0800b385
 800b380:	0800b385 	.word	0x0800b385
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b384:	bf00      	nop
  }

  return (USBD_OK);
 800b386:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
extern uint8_t rbuffer[128];
extern uint8_t rbuffer_size;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	480b      	ldr	r0, [pc, #44]	; (800b3d0 <CDC_Receive_FS+0x3c>)
 800b3a2:	f7fd f932 	bl	800860a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3a6:	480a      	ldr	r0, [pc, #40]	; (800b3d0 <CDC_Receive_FS+0x3c>)
 800b3a8:	f7fd f972 	bl	8008690 <USBD_CDC_ReceivePacket>
  rbuffer_size = *Len;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <CDC_Receive_FS+0x40>)
 800b3b4:	701a      	strb	r2, [r3, #0]
  strncpy((char *)rbuffer,(char *)Buf,rbuffer_size);
 800b3b6:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <CDC_Receive_FS+0x40>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	4806      	ldr	r0, [pc, #24]	; (800b3d8 <CDC_Receive_FS+0x44>)
 800b3c0:	f000 fc9e 	bl	800bd00 <strncpy>
  return (USBD_OK);
 800b3c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000b9c 	.word	0x20000b9c
 800b3d4:	2000090e 	.word	0x2000090e
 800b3d8:	20000650 	.word	0x20000650

0800b3dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3ec:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <CDC_Transmit_FS+0x48>)
 800b3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e00b      	b.n	800b41a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b402:	887b      	ldrh	r3, [r7, #2]
 800b404:	461a      	mov	r2, r3
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	4806      	ldr	r0, [pc, #24]	; (800b424 <CDC_Transmit_FS+0x48>)
 800b40a:	f7fd f8e4 	bl	80085d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b40e:	4805      	ldr	r0, [pc, #20]	; (800b424 <CDC_Transmit_FS+0x48>)
 800b410:	f7fd f90f 	bl	8008632 <USBD_CDC_TransmitPacket>
 800b414:	4603      	mov	r3, r0
 800b416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000b9c 	.word	0x20000b9c

0800b428 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a0d      	ldr	r2, [pc, #52]	; (800b46c <HAL_PCD_MspInit+0x44>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d113      	bne.n	800b462 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b43a:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <HAL_PCD_MspInit+0x48>)
 800b43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43e:	4a0c      	ldr	r2, [pc, #48]	; (800b470 <HAL_PCD_MspInit+0x48>)
 800b440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b444:	6593      	str	r3, [r2, #88]	; 0x58
 800b446:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <HAL_PCD_MspInit+0x48>)
 800b448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b452:	2200      	movs	r2, #0
 800b454:	2100      	movs	r1, #0
 800b456:	2014      	movs	r0, #20
 800b458:	f7f5 fbb3 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b45c:	2014      	movs	r0, #20
 800b45e:	f7f5 fbca 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	40005c00 	.word	0x40005c00
 800b470:	40021000 	.word	0x40021000

0800b474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b488:	4619      	mov	r1, r3
 800b48a:	4610      	mov	r0, r2
 800b48c:	f7fd f9b8 	bl	8008800 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	015b      	lsls	r3, r3, #5
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	f7fd f9eb 	bl	8008896 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b4da:	78fb      	ldrb	r3, [r7, #3]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	015b      	lsls	r3, r3, #5
 800b4e0:	4413      	add	r3, r2
 800b4e2:	333c      	adds	r3, #60	; 0x3c
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f7fd fa45 	bl	8008978 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b4ee:	bf00      	nop
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b504:	4618      	mov	r0, r3
 800b506:	f7fd fb58 	bl	8008bba <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b50a:	bf00      	nop
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b51a:	2301      	movs	r3, #1
 800b51c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d001      	beq.n	800b52a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b526:	f7ff fbc9 	bl	800acbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b530:	7bfa      	ldrb	r2, [r7, #15]
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd fb05 	bl	8008b44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b540:	4618      	mov	r0, r3
 800b542:	f7fd fabe 	bl	8008ac2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd fb00 	bl	8008b64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d005      	beq.n	800b578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <HAL_PCD_SuspendCallback+0x30>)
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	4a03      	ldr	r2, [pc, #12]	; (800b580 <HAL_PCD_SuspendCallback+0x30>)
 800b572:	f043 0306 	orr.w	r3, r3, #6
 800b576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	e000ed00 	.word	0xe000ed00

0800b584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d007      	beq.n	800b5a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <HAL_PCD_ResumeCallback+0x34>)
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <HAL_PCD_ResumeCallback+0x34>)
 800b59a:	f023 0306 	bic.w	r3, r3, #6
 800b59e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5a0:	f000 f9f6 	bl	800b990 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fd faef 	bl	8008b8e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b5b0:	bf00      	nop
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	e000ed00 	.word	0xe000ed00

0800b5bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b5c4:	4a2b      	ldr	r2, [pc, #172]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a29      	ldr	r2, [pc, #164]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b5d4:	4b27      	ldr	r3, [pc, #156]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5d6:	4a28      	ldr	r2, [pc, #160]	; (800b678 <USBD_LL_Init+0xbc>)
 800b5d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b5da:	4b26      	ldr	r3, [pc, #152]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5dc:	2208      	movs	r2, #8
 800b5de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b5e0:	4b24      	ldr	r3, [pc, #144]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5e6:	4b23      	ldr	r3, [pc, #140]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b5ec:	4b21      	ldr	r3, [pc, #132]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b5f2:	4b20      	ldr	r3, [pc, #128]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b5f8:	4b1e      	ldr	r3, [pc, #120]	; (800b674 <USBD_LL_Init+0xb8>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5fe:	4b1d      	ldr	r3, [pc, #116]	; (800b674 <USBD_LL_Init+0xb8>)
 800b600:	2200      	movs	r2, #0
 800b602:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b604:	481b      	ldr	r0, [pc, #108]	; (800b674 <USBD_LL_Init+0xb8>)
 800b606:	f7f6 f8ab 	bl	8001760 <HAL_PCD_Init>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b610:	f7ff fb54 	bl	800acbc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b61a:	2318      	movs	r3, #24
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	f7f6 ff58 	bl	80024d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b62a:	2358      	movs	r3, #88	; 0x58
 800b62c:	2200      	movs	r2, #0
 800b62e:	2180      	movs	r1, #128	; 0x80
 800b630:	f7f6 ff50 	bl	80024d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b63a:	23c0      	movs	r3, #192	; 0xc0
 800b63c:	2200      	movs	r2, #0
 800b63e:	2181      	movs	r1, #129	; 0x81
 800b640:	f7f6 ff48 	bl	80024d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b64a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b64e:	2200      	movs	r2, #0
 800b650:	2101      	movs	r1, #1
 800b652:	f7f6 ff3f 	bl	80024d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b65c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b660:	2200      	movs	r2, #0
 800b662:	2182      	movs	r1, #130	; 0x82
 800b664:	f7f6 ff36 	bl	80024d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20001630 	.word	0x20001630
 800b678:	40005c00 	.word	0x40005c00

0800b67c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b692:	4618      	mov	r0, r3
 800b694:	f7f6 f91f 	bl	80018d6 <HAL_PCD_Start>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 f97c 	bl	800b99c <USBD_Get_USB_Status>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	461a      	mov	r2, r3
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	70fb      	strb	r3, [r7, #3]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70bb      	strb	r3, [r7, #2]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6da:	78bb      	ldrb	r3, [r7, #2]
 800b6dc:	883a      	ldrh	r2, [r7, #0]
 800b6de:	78f9      	ldrb	r1, [r7, #3]
 800b6e0:	f7f6 fa99 	bl	8001c16 <HAL_PCD_EP_Open>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f956 	bl	800b99c <USBD_Get_USB_Status>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b718:	78fa      	ldrb	r2, [r7, #3]
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7f6 fada 	bl	8001cd6 <HAL_PCD_EP_Close>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f937 	bl	800b99c <USBD_Get_USB_Status>
 800b72e:	4603      	mov	r3, r0
 800b730:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b732:	7bbb      	ldrb	r3, [r7, #14]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b756:	78fa      	ldrb	r2, [r7, #3]
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f6 fb85 	bl	8001e6a <HAL_PCD_EP_SetStall>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f918 	bl	800b99c <USBD_Get_USB_Status>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b770:	7bbb      	ldrb	r3, [r7, #14]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f7f6 fbc0 	bl	8001f1e <HAL_PCD_EP_ClrStall>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f8f9 	bl	800b99c <USBD_Get_USB_Status>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b7cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	da08      	bge.n	800b7e6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	015b      	lsls	r3, r3, #5
 800b7de:	4413      	add	r3, r2
 800b7e0:	332a      	adds	r3, #42	; 0x2a
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	e008      	b.n	800b7f8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	015b      	lsls	r3, r3, #5
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b7f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f7f6 f9d2 	bl	8001bcc <HAL_PCD_SetAddress>
 800b828:	4603      	mov	r3, r0
 800b82a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f8b4 	bl	800b99c <USBD_Get_USB_Status>
 800b834:	4603      	mov	r3, r0
 800b836:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b838:	7bbb      	ldrb	r3, [r7, #14]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	461a      	mov	r2, r3
 800b84e:	460b      	mov	r3, r1
 800b850:	72fb      	strb	r3, [r7, #11]
 800b852:	4613      	mov	r3, r2
 800b854:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b864:	893b      	ldrh	r3, [r7, #8]
 800b866:	7af9      	ldrb	r1, [r7, #11]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	f7f6 fac5 	bl	8001df8 <HAL_PCD_EP_Transmit>
 800b86e:	4603      	mov	r3, r0
 800b870:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b872:	7dfb      	ldrb	r3, [r7, #23]
 800b874:	4618      	mov	r0, r3
 800b876:	f000 f891 	bl	800b99c <USBD_Get_USB_Status>
 800b87a:	4603      	mov	r3, r0
 800b87c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b87e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	607a      	str	r2, [r7, #4]
 800b892:	461a      	mov	r2, r3
 800b894:	460b      	mov	r3, r1
 800b896:	72fb      	strb	r3, [r7, #11]
 800b898:	4613      	mov	r3, r2
 800b89a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8aa:	893b      	ldrh	r3, [r7, #8]
 800b8ac:	7af9      	ldrb	r1, [r7, #11]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	f7f6 fa53 	bl	8001d5a <HAL_PCD_EP_Receive>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 f86e 	bl	800b99c <USBD_Get_USB_Status>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800b8c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8e0:	78fa      	ldrb	r2, [r7, #3]
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7f6 fa72 	bl	8001dce <HAL_PCD_EP_GetRxCount>
 800b8ea:	4603      	mov	r3, r0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <HAL_PCDEx_LPM_Callback+0x18>
 800b906:	2b01      	cmp	r3, #1
 800b908:	d013      	beq.n	800b932 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800b90a:	e023      	b.n	800b954 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d007      	beq.n	800b924 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b914:	f000 f83c 	bl	800b990 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <HAL_PCDEx_LPM_Callback+0x68>)
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	4a0f      	ldr	r2, [pc, #60]	; (800b95c <HAL_PCDEx_LPM_Callback+0x68>)
 800b91e:	f023 0306 	bic.w	r3, r3, #6
 800b922:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fd f92f 	bl	8008b8e <USBD_LL_Resume>
    break;
 800b930:	e010      	b.n	800b954 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fd f913 	bl	8008b64 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d005      	beq.n	800b952 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b946:	4b05      	ldr	r3, [pc, #20]	; (800b95c <HAL_PCDEx_LPM_Callback+0x68>)
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	4a04      	ldr	r2, [pc, #16]	; (800b95c <HAL_PCDEx_LPM_Callback+0x68>)
 800b94c:	f043 0306 	orr.w	r3, r3, #6
 800b950:	6113      	str	r3, [r2, #16]
    break;   
 800b952:	bf00      	nop
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	e000ed00 	.word	0xe000ed00

0800b960 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b968:	4b03      	ldr	r3, [pc, #12]	; (800b978 <USBD_static_malloc+0x18>)
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	20000378 	.word	0x20000378

0800b97c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]

}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b994:	f7fe fe94 	bl	800a6c0 <SystemClock_Config>
}
 800b998:	bf00      	nop
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d817      	bhi.n	800b9e0 <USBD_Get_USB_Status+0x44>
 800b9b0:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <USBD_Get_USB_Status+0x1c>)
 800b9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b6:	bf00      	nop
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800b9cf 	.word	0x0800b9cf
 800b9c0:	0800b9d5 	.word	0x0800b9d5
 800b9c4:	0800b9db 	.word	0x0800b9db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b9cc:	e00b      	b.n	800b9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d2:	e008      	b.n	800b9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d8:	e005      	b.n	800b9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9da:	2302      	movs	r3, #2
 800b9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9de:	e002      	b.n	800b9e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e4:	bf00      	nop
  }
  return usb_status;
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6039      	str	r1, [r7, #0]
 800b9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2212      	movs	r2, #18
 800ba04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ba06:	4b03      	ldr	r3, [pc, #12]	; (800ba14 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	2000014c 	.word	0x2000014c

0800ba18 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	6039      	str	r1, [r7, #0]
 800ba22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2204      	movs	r2, #4
 800ba28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba2a:	4b03      	ldr	r3, [pc, #12]	; (800ba38 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	20000160 	.word	0x20000160

0800ba3c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	6039      	str	r1, [r7, #0]
 800ba46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba48:	79fb      	ldrb	r3, [r7, #7]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d105      	bne.n	800ba5a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4907      	ldr	r1, [pc, #28]	; (800ba70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ba52:	4808      	ldr	r0, [pc, #32]	; (800ba74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ba54:	f7fd fe26 	bl	80096a4 <USBD_GetString>
 800ba58:	e004      	b.n	800ba64 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	4904      	ldr	r1, [pc, #16]	; (800ba70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ba5e:	4805      	ldr	r0, [pc, #20]	; (800ba74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ba60:	f7fd fe20 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba64:	4b02      	ldr	r3, [pc, #8]	; (800ba70 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	200018a4 	.word	0x200018a4
 800ba74:	0800cfdc 	.word	0x0800cfdc

0800ba78 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	4603      	mov	r3, r0
 800ba80:	6039      	str	r1, [r7, #0]
 800ba82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	4904      	ldr	r1, [pc, #16]	; (800ba98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ba88:	4804      	ldr	r0, [pc, #16]	; (800ba9c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ba8a:	f7fd fe0b 	bl	80096a4 <USBD_GetString>
  return USBD_StrDesc;
 800ba8e:	4b02      	ldr	r3, [pc, #8]	; (800ba98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200018a4 	.word	0x200018a4
 800ba9c:	0800cff0 	.word	0x0800cff0

0800baa0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	221a      	movs	r2, #26
 800bab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bab2:	f000 f843 	bl	800bb3c <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bab6:	4b02      	ldr	r3, [pc, #8]	; (800bac0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20000164 	.word	0x20000164

0800bac4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4907      	ldr	r1, [pc, #28]	; (800baf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bada:	4808      	ldr	r0, [pc, #32]	; (800bafc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800badc:	f7fd fde2 	bl	80096a4 <USBD_GetString>
 800bae0:	e004      	b.n	800baec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	4904      	ldr	r1, [pc, #16]	; (800baf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bae6:	4805      	ldr	r0, [pc, #20]	; (800bafc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bae8:	f7fd fddc 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800baec:	4b02      	ldr	r3, [pc, #8]	; (800baf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	200018a4 	.word	0x200018a4
 800bafc:	0800cffc 	.word	0x0800cffc

0800bb00 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	6039      	str	r1, [r7, #0]
 800bb0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d105      	bne.n	800bb1e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4907      	ldr	r1, [pc, #28]	; (800bb34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bb16:	4808      	ldr	r0, [pc, #32]	; (800bb38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bb18:	f7fd fdc4 	bl	80096a4 <USBD_GetString>
 800bb1c:	e004      	b.n	800bb28 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	4904      	ldr	r1, [pc, #16]	; (800bb34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bb22:	4805      	ldr	r0, [pc, #20]	; (800bb38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bb24:	f7fd fdbe 	bl	80096a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb28:	4b02      	ldr	r3, [pc, #8]	; (800bb34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200018a4 	.word	0x200018a4
 800bb38:	0800d008 	.word	0x0800d008

0800bb3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb42:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <Get_SerialNum+0x44>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb48:	4b0e      	ldr	r3, [pc, #56]	; (800bb84 <Get_SerialNum+0x48>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb4e:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <Get_SerialNum+0x4c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4413      	add	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb62:	2208      	movs	r2, #8
 800bb64:	4909      	ldr	r1, [pc, #36]	; (800bb8c <Get_SerialNum+0x50>)
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 f814 	bl	800bb94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	4908      	ldr	r1, [pc, #32]	; (800bb90 <Get_SerialNum+0x54>)
 800bb70:	68b8      	ldr	r0, [r7, #8]
 800bb72:	f000 f80f 	bl	800bb94 <IntToUnicode>
  }
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	1fff7590 	.word	0x1fff7590
 800bb84:	1fff7594 	.word	0x1fff7594
 800bb88:	1fff7598 	.word	0x1fff7598
 800bb8c:	20000166 	.word	0x20000166
 800bb90:	20000176 	.word	0x20000176

0800bb94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
 800bbaa:	e027      	b.n	800bbfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	0f1b      	lsrs	r3, r3, #28
 800bbb0:	2b09      	cmp	r3, #9
 800bbb2:	d80b      	bhi.n	800bbcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0f1b      	lsrs	r3, r3, #28
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3230      	adds	r2, #48	; 0x30
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e00a      	b.n	800bbe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	0f1b      	lsrs	r3, r3, #28
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	440b      	add	r3, r1
 800bbdc:	3237      	adds	r2, #55	; 0x37
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	011b      	lsls	r3, r3, #4
 800bbe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	3301      	adds	r3, #1
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	75fb      	strb	r3, [r7, #23]
 800bbfc:	7dfa      	ldrb	r2, [r7, #23]
 800bbfe:	79fb      	ldrb	r3, [r7, #7]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d3d3      	bcc.n	800bbac <IntToUnicode+0x18>
  }
}
 800bc04:	bf00      	nop
 800bc06:	371c      	adds	r7, #28
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <__libc_init_array>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	4e0d      	ldr	r6, [pc, #52]	; (800bc48 <__libc_init_array+0x38>)
 800bc14:	4c0d      	ldr	r4, [pc, #52]	; (800bc4c <__libc_init_array+0x3c>)
 800bc16:	1ba4      	subs	r4, r4, r6
 800bc18:	10a4      	asrs	r4, r4, #2
 800bc1a:	2500      	movs	r5, #0
 800bc1c:	42a5      	cmp	r5, r4
 800bc1e:	d109      	bne.n	800bc34 <__libc_init_array+0x24>
 800bc20:	4e0b      	ldr	r6, [pc, #44]	; (800bc50 <__libc_init_array+0x40>)
 800bc22:	4c0c      	ldr	r4, [pc, #48]	; (800bc54 <__libc_init_array+0x44>)
 800bc24:	f001 f930 	bl	800ce88 <_init>
 800bc28:	1ba4      	subs	r4, r4, r6
 800bc2a:	10a4      	asrs	r4, r4, #2
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	42a5      	cmp	r5, r4
 800bc30:	d105      	bne.n	800bc3e <__libc_init_array+0x2e>
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc38:	4798      	blx	r3
 800bc3a:	3501      	adds	r5, #1
 800bc3c:	e7ee      	b.n	800bc1c <__libc_init_array+0xc>
 800bc3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc42:	4798      	blx	r3
 800bc44:	3501      	adds	r5, #1
 800bc46:	e7f2      	b.n	800bc2e <__libc_init_array+0x1e>
 800bc48:	0800d200 	.word	0x0800d200
 800bc4c:	0800d200 	.word	0x0800d200
 800bc50:	0800d200 	.word	0x0800d200
 800bc54:	0800d204 	.word	0x0800d204

0800bc58 <memset>:
 800bc58:	4402      	add	r2, r0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d100      	bne.n	800bc62 <memset+0xa>
 800bc60:	4770      	bx	lr
 800bc62:	f803 1b01 	strb.w	r1, [r3], #1
 800bc66:	e7f9      	b.n	800bc5c <memset+0x4>

0800bc68 <siprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b500      	push	{lr}
 800bc6c:	b09c      	sub	sp, #112	; 0x70
 800bc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800bc70:	9002      	str	r0, [sp, #8]
 800bc72:	9006      	str	r0, [sp, #24]
 800bc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc78:	4809      	ldr	r0, [pc, #36]	; (800bca0 <siprintf+0x38>)
 800bc7a:	9107      	str	r1, [sp, #28]
 800bc7c:	9104      	str	r1, [sp, #16]
 800bc7e:	4909      	ldr	r1, [pc, #36]	; (800bca4 <siprintf+0x3c>)
 800bc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc84:	9105      	str	r1, [sp, #20]
 800bc86:	6800      	ldr	r0, [r0, #0]
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	a902      	add	r1, sp, #8
 800bc8c:	f000 f8a8 	bl	800bde0 <_svfiprintf_r>
 800bc90:	9b02      	ldr	r3, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	b01c      	add	sp, #112	; 0x70
 800bc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc9c:	b003      	add	sp, #12
 800bc9e:	4770      	bx	lr
 800bca0:	20000180 	.word	0x20000180
 800bca4:	ffff0208 	.word	0xffff0208

0800bca8 <siscanf>:
 800bca8:	b40e      	push	{r1, r2, r3}
 800bcaa:	b530      	push	{r4, r5, lr}
 800bcac:	b09c      	sub	sp, #112	; 0x70
 800bcae:	ac1f      	add	r4, sp, #124	; 0x7c
 800bcb0:	f44f 7201 	mov.w	r2, #516	; 0x204
 800bcb4:	f854 5b04 	ldr.w	r5, [r4], #4
 800bcb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bcbc:	9002      	str	r0, [sp, #8]
 800bcbe:	9006      	str	r0, [sp, #24]
 800bcc0:	f7f4 faae 	bl	8000220 <strlen>
 800bcc4:	4b0b      	ldr	r3, [pc, #44]	; (800bcf4 <siscanf+0x4c>)
 800bcc6:	9003      	str	r0, [sp, #12]
 800bcc8:	9007      	str	r0, [sp, #28]
 800bcca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bccc:	480a      	ldr	r0, [pc, #40]	; (800bcf8 <siscanf+0x50>)
 800bcce:	9401      	str	r4, [sp, #4]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcd4:	9314      	str	r3, [sp, #80]	; 0x50
 800bcd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcda:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcde:	462a      	mov	r2, r5
 800bce0:	4623      	mov	r3, r4
 800bce2:	a902      	add	r1, sp, #8
 800bce4:	6800      	ldr	r0, [r0, #0]
 800bce6:	f000 f9cd 	bl	800c084 <__ssvfiscanf_r>
 800bcea:	b01c      	add	sp, #112	; 0x70
 800bcec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcf0:	b003      	add	sp, #12
 800bcf2:	4770      	bx	lr
 800bcf4:	0800bcfd 	.word	0x0800bcfd
 800bcf8:	20000180 	.word	0x20000180

0800bcfc <__seofread>:
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	4770      	bx	lr

0800bd00 <strncpy>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	3901      	subs	r1, #1
 800bd04:	4604      	mov	r4, r0
 800bd06:	b902      	cbnz	r2, 800bd0a <strncpy+0xa>
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
 800bd0a:	4623      	mov	r3, r4
 800bd0c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bd10:	f803 5b01 	strb.w	r5, [r3], #1
 800bd14:	1e56      	subs	r6, r2, #1
 800bd16:	b92d      	cbnz	r5, 800bd24 <strncpy+0x24>
 800bd18:	4414      	add	r4, r2
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	d0f4      	beq.n	800bd08 <strncpy+0x8>
 800bd1e:	f803 5b01 	strb.w	r5, [r3], #1
 800bd22:	e7fa      	b.n	800bd1a <strncpy+0x1a>
 800bd24:	461c      	mov	r4, r3
 800bd26:	4632      	mov	r2, r6
 800bd28:	e7ed      	b.n	800bd06 <strncpy+0x6>

0800bd2a <__ssputs_r>:
 800bd2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2e:	688e      	ldr	r6, [r1, #8]
 800bd30:	429e      	cmp	r6, r3
 800bd32:	4682      	mov	sl, r0
 800bd34:	460c      	mov	r4, r1
 800bd36:	4690      	mov	r8, r2
 800bd38:	4699      	mov	r9, r3
 800bd3a:	d837      	bhi.n	800bdac <__ssputs_r+0x82>
 800bd3c:	898a      	ldrh	r2, [r1, #12]
 800bd3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd42:	d031      	beq.n	800bda8 <__ssputs_r+0x7e>
 800bd44:	6825      	ldr	r5, [r4, #0]
 800bd46:	6909      	ldr	r1, [r1, #16]
 800bd48:	1a6f      	subs	r7, r5, r1
 800bd4a:	6965      	ldr	r5, [r4, #20]
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd52:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd56:	f109 0301 	add.w	r3, r9, #1
 800bd5a:	443b      	add	r3, r7
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	bf38      	it	cc
 800bd60:	461d      	movcc	r5, r3
 800bd62:	0553      	lsls	r3, r2, #21
 800bd64:	d530      	bpl.n	800bdc8 <__ssputs_r+0x9e>
 800bd66:	4629      	mov	r1, r5
 800bd68:	f000 ffd8 	bl	800cd1c <_malloc_r>
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	b950      	cbnz	r0, 800bd86 <__ssputs_r+0x5c>
 800bd70:	230c      	movs	r3, #12
 800bd72:	f8ca 3000 	str.w	r3, [sl]
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd86:	463a      	mov	r2, r7
 800bd88:	6921      	ldr	r1, [r4, #16]
 800bd8a:	f000 ff55 	bl	800cc38 <memcpy>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	6126      	str	r6, [r4, #16]
 800bd9c:	6165      	str	r5, [r4, #20]
 800bd9e:	443e      	add	r6, r7
 800bda0:	1bed      	subs	r5, r5, r7
 800bda2:	6026      	str	r6, [r4, #0]
 800bda4:	60a5      	str	r5, [r4, #8]
 800bda6:	464e      	mov	r6, r9
 800bda8:	454e      	cmp	r6, r9
 800bdaa:	d900      	bls.n	800bdae <__ssputs_r+0x84>
 800bdac:	464e      	mov	r6, r9
 800bdae:	4632      	mov	r2, r6
 800bdb0:	4641      	mov	r1, r8
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	f000 ff4b 	bl	800cc4e <memmove>
 800bdb8:	68a3      	ldr	r3, [r4, #8]
 800bdba:	1b9b      	subs	r3, r3, r6
 800bdbc:	60a3      	str	r3, [r4, #8]
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	441e      	add	r6, r3
 800bdc2:	6026      	str	r6, [r4, #0]
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	e7dc      	b.n	800bd82 <__ssputs_r+0x58>
 800bdc8:	462a      	mov	r2, r5
 800bdca:	f001 f801 	bl	800cdd0 <_realloc_r>
 800bdce:	4606      	mov	r6, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d1e2      	bne.n	800bd9a <__ssputs_r+0x70>
 800bdd4:	6921      	ldr	r1, [r4, #16]
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	f000 ff52 	bl	800cc80 <_free_r>
 800bddc:	e7c8      	b.n	800bd70 <__ssputs_r+0x46>
	...

0800bde0 <_svfiprintf_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	461d      	mov	r5, r3
 800bde6:	898b      	ldrh	r3, [r1, #12]
 800bde8:	061f      	lsls	r7, r3, #24
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4680      	mov	r8, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d50f      	bpl.n	800be14 <_svfiprintf_r+0x34>
 800bdf4:	690b      	ldr	r3, [r1, #16]
 800bdf6:	b96b      	cbnz	r3, 800be14 <_svfiprintf_r+0x34>
 800bdf8:	2140      	movs	r1, #64	; 0x40
 800bdfa:	f000 ff8f 	bl	800cd1c <_malloc_r>
 800bdfe:	6020      	str	r0, [r4, #0]
 800be00:	6120      	str	r0, [r4, #16]
 800be02:	b928      	cbnz	r0, 800be10 <_svfiprintf_r+0x30>
 800be04:	230c      	movs	r3, #12
 800be06:	f8c8 3000 	str.w	r3, [r8]
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be0e:	e0c8      	b.n	800bfa2 <_svfiprintf_r+0x1c2>
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	6163      	str	r3, [r4, #20]
 800be14:	2300      	movs	r3, #0
 800be16:	9309      	str	r3, [sp, #36]	; 0x24
 800be18:	2320      	movs	r3, #32
 800be1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be1e:	2330      	movs	r3, #48	; 0x30
 800be20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be24:	9503      	str	r5, [sp, #12]
 800be26:	f04f 0b01 	mov.w	fp, #1
 800be2a:	4637      	mov	r7, r6
 800be2c:	463d      	mov	r5, r7
 800be2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be32:	b10b      	cbz	r3, 800be38 <_svfiprintf_r+0x58>
 800be34:	2b25      	cmp	r3, #37	; 0x25
 800be36:	d13e      	bne.n	800beb6 <_svfiprintf_r+0xd6>
 800be38:	ebb7 0a06 	subs.w	sl, r7, r6
 800be3c:	d00b      	beq.n	800be56 <_svfiprintf_r+0x76>
 800be3e:	4653      	mov	r3, sl
 800be40:	4632      	mov	r2, r6
 800be42:	4621      	mov	r1, r4
 800be44:	4640      	mov	r0, r8
 800be46:	f7ff ff70 	bl	800bd2a <__ssputs_r>
 800be4a:	3001      	adds	r0, #1
 800be4c:	f000 80a4 	beq.w	800bf98 <_svfiprintf_r+0x1b8>
 800be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be52:	4453      	add	r3, sl
 800be54:	9309      	str	r3, [sp, #36]	; 0x24
 800be56:	783b      	ldrb	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 809d 	beq.w	800bf98 <_svfiprintf_r+0x1b8>
 800be5e:	2300      	movs	r3, #0
 800be60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	9307      	str	r3, [sp, #28]
 800be6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be70:	931a      	str	r3, [sp, #104]	; 0x68
 800be72:	462f      	mov	r7, r5
 800be74:	2205      	movs	r2, #5
 800be76:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be7a:	4850      	ldr	r0, [pc, #320]	; (800bfbc <_svfiprintf_r+0x1dc>)
 800be7c:	f7f4 f9d8 	bl	8000230 <memchr>
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	b9d0      	cbnz	r0, 800beba <_svfiprintf_r+0xda>
 800be84:	06d9      	lsls	r1, r3, #27
 800be86:	bf44      	itt	mi
 800be88:	2220      	movmi	r2, #32
 800be8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be8e:	071a      	lsls	r2, r3, #28
 800be90:	bf44      	itt	mi
 800be92:	222b      	movmi	r2, #43	; 0x2b
 800be94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be98:	782a      	ldrb	r2, [r5, #0]
 800be9a:	2a2a      	cmp	r2, #42	; 0x2a
 800be9c:	d015      	beq.n	800beca <_svfiprintf_r+0xea>
 800be9e:	9a07      	ldr	r2, [sp, #28]
 800bea0:	462f      	mov	r7, r5
 800bea2:	2000      	movs	r0, #0
 800bea4:	250a      	movs	r5, #10
 800bea6:	4639      	mov	r1, r7
 800bea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beac:	3b30      	subs	r3, #48	; 0x30
 800beae:	2b09      	cmp	r3, #9
 800beb0:	d94d      	bls.n	800bf4e <_svfiprintf_r+0x16e>
 800beb2:	b1b8      	cbz	r0, 800bee4 <_svfiprintf_r+0x104>
 800beb4:	e00f      	b.n	800bed6 <_svfiprintf_r+0xf6>
 800beb6:	462f      	mov	r7, r5
 800beb8:	e7b8      	b.n	800be2c <_svfiprintf_r+0x4c>
 800beba:	4a40      	ldr	r2, [pc, #256]	; (800bfbc <_svfiprintf_r+0x1dc>)
 800bebc:	1a80      	subs	r0, r0, r2
 800bebe:	fa0b f000 	lsl.w	r0, fp, r0
 800bec2:	4318      	orrs	r0, r3
 800bec4:	9004      	str	r0, [sp, #16]
 800bec6:	463d      	mov	r5, r7
 800bec8:	e7d3      	b.n	800be72 <_svfiprintf_r+0x92>
 800beca:	9a03      	ldr	r2, [sp, #12]
 800becc:	1d11      	adds	r1, r2, #4
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	9103      	str	r1, [sp, #12]
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	db01      	blt.n	800beda <_svfiprintf_r+0xfa>
 800bed6:	9207      	str	r2, [sp, #28]
 800bed8:	e004      	b.n	800bee4 <_svfiprintf_r+0x104>
 800beda:	4252      	negs	r2, r2
 800bedc:	f043 0302 	orr.w	r3, r3, #2
 800bee0:	9207      	str	r2, [sp, #28]
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	783b      	ldrb	r3, [r7, #0]
 800bee6:	2b2e      	cmp	r3, #46	; 0x2e
 800bee8:	d10c      	bne.n	800bf04 <_svfiprintf_r+0x124>
 800beea:	787b      	ldrb	r3, [r7, #1]
 800beec:	2b2a      	cmp	r3, #42	; 0x2a
 800beee:	d133      	bne.n	800bf58 <_svfiprintf_r+0x178>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9203      	str	r2, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfb8      	it	lt
 800befc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf00:	3702      	adds	r7, #2
 800bf02:	9305      	str	r3, [sp, #20]
 800bf04:	4d2e      	ldr	r5, [pc, #184]	; (800bfc0 <_svfiprintf_r+0x1e0>)
 800bf06:	7839      	ldrb	r1, [r7, #0]
 800bf08:	2203      	movs	r2, #3
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7f4 f990 	bl	8000230 <memchr>
 800bf10:	b138      	cbz	r0, 800bf22 <_svfiprintf_r+0x142>
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	1b40      	subs	r0, r0, r5
 800bf16:	fa03 f000 	lsl.w	r0, r3, r0
 800bf1a:	9b04      	ldr	r3, [sp, #16]
 800bf1c:	4303      	orrs	r3, r0
 800bf1e:	3701      	adds	r7, #1
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	7839      	ldrb	r1, [r7, #0]
 800bf24:	4827      	ldr	r0, [pc, #156]	; (800bfc4 <_svfiprintf_r+0x1e4>)
 800bf26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf2a:	2206      	movs	r2, #6
 800bf2c:	1c7e      	adds	r6, r7, #1
 800bf2e:	f7f4 f97f 	bl	8000230 <memchr>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d038      	beq.n	800bfa8 <_svfiprintf_r+0x1c8>
 800bf36:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <_svfiprintf_r+0x1e8>)
 800bf38:	bb13      	cbnz	r3, 800bf80 <_svfiprintf_r+0x1a0>
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	3307      	adds	r3, #7
 800bf3e:	f023 0307 	bic.w	r3, r3, #7
 800bf42:	3308      	adds	r3, #8
 800bf44:	9303      	str	r3, [sp, #12]
 800bf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf48:	444b      	add	r3, r9
 800bf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4c:	e76d      	b.n	800be2a <_svfiprintf_r+0x4a>
 800bf4e:	fb05 3202 	mla	r2, r5, r2, r3
 800bf52:	2001      	movs	r0, #1
 800bf54:	460f      	mov	r7, r1
 800bf56:	e7a6      	b.n	800bea6 <_svfiprintf_r+0xc6>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	3701      	adds	r7, #1
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	250a      	movs	r5, #10
 800bf62:	4638      	mov	r0, r7
 800bf64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf68:	3a30      	subs	r2, #48	; 0x30
 800bf6a:	2a09      	cmp	r2, #9
 800bf6c:	d903      	bls.n	800bf76 <_svfiprintf_r+0x196>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0c8      	beq.n	800bf04 <_svfiprintf_r+0x124>
 800bf72:	9105      	str	r1, [sp, #20]
 800bf74:	e7c6      	b.n	800bf04 <_svfiprintf_r+0x124>
 800bf76:	fb05 2101 	mla	r1, r5, r1, r2
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	e7f0      	b.n	800bf62 <_svfiprintf_r+0x182>
 800bf80:	ab03      	add	r3, sp, #12
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	4622      	mov	r2, r4
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <_svfiprintf_r+0x1ec>)
 800bf88:	a904      	add	r1, sp, #16
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	f3af 8000 	nop.w
 800bf90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bf94:	4681      	mov	r9, r0
 800bf96:	d1d6      	bne.n	800bf46 <_svfiprintf_r+0x166>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	065b      	lsls	r3, r3, #25
 800bf9c:	f53f af35 	bmi.w	800be0a <_svfiprintf_r+0x2a>
 800bfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfa2:	b01d      	add	sp, #116	; 0x74
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	ab03      	add	r3, sp, #12
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	4622      	mov	r2, r4
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <_svfiprintf_r+0x1ec>)
 800bfb0:	a904      	add	r1, sp, #16
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	f000 fa2c 	bl	800c410 <_printf_i>
 800bfb8:	e7ea      	b.n	800bf90 <_svfiprintf_r+0x1b0>
 800bfba:	bf00      	nop
 800bfbc:	0800d03c 	.word	0x0800d03c
 800bfc0:	0800d042 	.word	0x0800d042
 800bfc4:	0800d046 	.word	0x0800d046
 800bfc8:	00000000 	.word	0x00000000
 800bfcc:	0800bd2b 	.word	0x0800bd2b

0800bfd0 <_sungetc_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	1c4b      	adds	r3, r1, #1
 800bfd4:	4614      	mov	r4, r2
 800bfd6:	d103      	bne.n	800bfe0 <_sungetc_r+0x10>
 800bfd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bfdc:	4628      	mov	r0, r5
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	8993      	ldrh	r3, [r2, #12]
 800bfe2:	f023 0320 	bic.w	r3, r3, #32
 800bfe6:	8193      	strh	r3, [r2, #12]
 800bfe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfea:	6852      	ldr	r2, [r2, #4]
 800bfec:	b2cd      	uxtb	r5, r1
 800bfee:	b18b      	cbz	r3, 800c014 <_sungetc_r+0x44>
 800bff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bff2:	4293      	cmp	r3, r2
 800bff4:	dd08      	ble.n	800c008 <_sungetc_r+0x38>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	1e5a      	subs	r2, r3, #1
 800bffa:	6022      	str	r2, [r4, #0]
 800bffc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	3301      	adds	r3, #1
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	e7e9      	b.n	800bfdc <_sungetc_r+0xc>
 800c008:	4621      	mov	r1, r4
 800c00a:	f000 fdb7 	bl	800cb7c <__submore>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d0f1      	beq.n	800bff6 <_sungetc_r+0x26>
 800c012:	e7e1      	b.n	800bfd8 <_sungetc_r+0x8>
 800c014:	6921      	ldr	r1, [r4, #16]
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	b151      	cbz	r1, 800c030 <_sungetc_r+0x60>
 800c01a:	4299      	cmp	r1, r3
 800c01c:	d208      	bcs.n	800c030 <_sungetc_r+0x60>
 800c01e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c022:	42a9      	cmp	r1, r5
 800c024:	d104      	bne.n	800c030 <_sungetc_r+0x60>
 800c026:	3b01      	subs	r3, #1
 800c028:	3201      	adds	r2, #1
 800c02a:	6023      	str	r3, [r4, #0]
 800c02c:	6062      	str	r2, [r4, #4]
 800c02e:	e7d5      	b.n	800bfdc <_sungetc_r+0xc>
 800c030:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c038:	6363      	str	r3, [r4, #52]	; 0x34
 800c03a:	2303      	movs	r3, #3
 800c03c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c03e:	4623      	mov	r3, r4
 800c040:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	2301      	movs	r3, #1
 800c048:	e7dc      	b.n	800c004 <_sungetc_r+0x34>

0800c04a <__ssrefill_r>:
 800c04a:	b510      	push	{r4, lr}
 800c04c:	460c      	mov	r4, r1
 800c04e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c050:	b169      	cbz	r1, 800c06e <__ssrefill_r+0x24>
 800c052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c056:	4299      	cmp	r1, r3
 800c058:	d001      	beq.n	800c05e <__ssrefill_r+0x14>
 800c05a:	f000 fe11 	bl	800cc80 <_free_r>
 800c05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	2000      	movs	r0, #0
 800c064:	6360      	str	r0, [r4, #52]	; 0x34
 800c066:	b113      	cbz	r3, 800c06e <__ssrefill_r+0x24>
 800c068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	2300      	movs	r3, #0
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f043 0320 	orr.w	r3, r3, #32
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c082:	e7f3      	b.n	800c06c <__ssrefill_r+0x22>

0800c084 <__ssvfiscanf_r>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c08c:	460c      	mov	r4, r1
 800c08e:	2100      	movs	r1, #0
 800c090:	9144      	str	r1, [sp, #272]	; 0x110
 800c092:	9145      	str	r1, [sp, #276]	; 0x114
 800c094:	499f      	ldr	r1, [pc, #636]	; (800c314 <__ssvfiscanf_r+0x290>)
 800c096:	91a0      	str	r1, [sp, #640]	; 0x280
 800c098:	f10d 0804 	add.w	r8, sp, #4
 800c09c:	499e      	ldr	r1, [pc, #632]	; (800c318 <__ssvfiscanf_r+0x294>)
 800c09e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800c31c <__ssvfiscanf_r+0x298>
 800c0a2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	4692      	mov	sl, r2
 800c0aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	270a      	movs	r7, #10
 800c0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 812a 	beq.w	800c30e <__ssvfiscanf_r+0x28a>
 800c0ba:	4655      	mov	r5, sl
 800c0bc:	f000 fd9c 	bl	800cbf8 <__locale_ctype_ptr>
 800c0c0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800c0c4:	4458      	add	r0, fp
 800c0c6:	7843      	ldrb	r3, [r0, #1]
 800c0c8:	f013 0308 	ands.w	r3, r3, #8
 800c0cc:	d01c      	beq.n	800c108 <__ssvfiscanf_r+0x84>
 800c0ce:	6863      	ldr	r3, [r4, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dd12      	ble.n	800c0fa <__ssvfiscanf_r+0x76>
 800c0d4:	f000 fd90 	bl	800cbf8 <__locale_ctype_ptr>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	4410      	add	r0, r2
 800c0de:	7842      	ldrb	r2, [r0, #1]
 800c0e0:	0712      	lsls	r2, r2, #28
 800c0e2:	d401      	bmi.n	800c0e8 <__ssvfiscanf_r+0x64>
 800c0e4:	46aa      	mov	sl, r5
 800c0e6:	e7e3      	b.n	800c0b0 <__ssvfiscanf_r+0x2c>
 800c0e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0ea:	3201      	adds	r2, #1
 800c0ec:	9245      	str	r2, [sp, #276]	; 0x114
 800c0ee:	6862      	ldr	r2, [r4, #4]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	3a01      	subs	r2, #1
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	e7e9      	b.n	800c0ce <__ssvfiscanf_r+0x4a>
 800c0fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4630      	mov	r0, r6
 800c100:	4798      	blx	r3
 800c102:	2800      	cmp	r0, #0
 800c104:	d0e6      	beq.n	800c0d4 <__ssvfiscanf_r+0x50>
 800c106:	e7ed      	b.n	800c0e4 <__ssvfiscanf_r+0x60>
 800c108:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800c10c:	f040 8082 	bne.w	800c214 <__ssvfiscanf_r+0x190>
 800c110:	9343      	str	r3, [sp, #268]	; 0x10c
 800c112:	9341      	str	r3, [sp, #260]	; 0x104
 800c114:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c118:	2b2a      	cmp	r3, #42	; 0x2a
 800c11a:	d103      	bne.n	800c124 <__ssvfiscanf_r+0xa0>
 800c11c:	2310      	movs	r3, #16
 800c11e:	9341      	str	r3, [sp, #260]	; 0x104
 800c120:	f10a 0502 	add.w	r5, sl, #2
 800c124:	46aa      	mov	sl, r5
 800c126:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c12a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c12e:	2a09      	cmp	r2, #9
 800c130:	d922      	bls.n	800c178 <__ssvfiscanf_r+0xf4>
 800c132:	2203      	movs	r2, #3
 800c134:	4879      	ldr	r0, [pc, #484]	; (800c31c <__ssvfiscanf_r+0x298>)
 800c136:	f7f4 f87b 	bl	8000230 <memchr>
 800c13a:	b138      	cbz	r0, 800c14c <__ssvfiscanf_r+0xc8>
 800c13c:	eba0 0309 	sub.w	r3, r0, r9
 800c140:	2001      	movs	r0, #1
 800c142:	4098      	lsls	r0, r3
 800c144:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c146:	4318      	orrs	r0, r3
 800c148:	9041      	str	r0, [sp, #260]	; 0x104
 800c14a:	46aa      	mov	sl, r5
 800c14c:	f89a 3000 	ldrb.w	r3, [sl]
 800c150:	2b67      	cmp	r3, #103	; 0x67
 800c152:	f10a 0501 	add.w	r5, sl, #1
 800c156:	d82b      	bhi.n	800c1b0 <__ssvfiscanf_r+0x12c>
 800c158:	2b65      	cmp	r3, #101	; 0x65
 800c15a:	f080 809f 	bcs.w	800c29c <__ssvfiscanf_r+0x218>
 800c15e:	2b47      	cmp	r3, #71	; 0x47
 800c160:	d810      	bhi.n	800c184 <__ssvfiscanf_r+0x100>
 800c162:	2b45      	cmp	r3, #69	; 0x45
 800c164:	f080 809a 	bcs.w	800c29c <__ssvfiscanf_r+0x218>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d06c      	beq.n	800c246 <__ssvfiscanf_r+0x1c2>
 800c16c:	2b25      	cmp	r3, #37	; 0x25
 800c16e:	d051      	beq.n	800c214 <__ssvfiscanf_r+0x190>
 800c170:	2303      	movs	r3, #3
 800c172:	9347      	str	r3, [sp, #284]	; 0x11c
 800c174:	9742      	str	r7, [sp, #264]	; 0x108
 800c176:	e027      	b.n	800c1c8 <__ssvfiscanf_r+0x144>
 800c178:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c17a:	fb07 1303 	mla	r3, r7, r3, r1
 800c17e:	3b30      	subs	r3, #48	; 0x30
 800c180:	9343      	str	r3, [sp, #268]	; 0x10c
 800c182:	e7cf      	b.n	800c124 <__ssvfiscanf_r+0xa0>
 800c184:	2b5b      	cmp	r3, #91	; 0x5b
 800c186:	d06a      	beq.n	800c25e <__ssvfiscanf_r+0x1da>
 800c188:	d80c      	bhi.n	800c1a4 <__ssvfiscanf_r+0x120>
 800c18a:	2b58      	cmp	r3, #88	; 0x58
 800c18c:	d1f0      	bne.n	800c170 <__ssvfiscanf_r+0xec>
 800c18e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c194:	9241      	str	r2, [sp, #260]	; 0x104
 800c196:	2210      	movs	r2, #16
 800c198:	9242      	str	r2, [sp, #264]	; 0x108
 800c19a:	2b6e      	cmp	r3, #110	; 0x6e
 800c19c:	bf8c      	ite	hi
 800c19e:	2304      	movhi	r3, #4
 800c1a0:	2303      	movls	r3, #3
 800c1a2:	e010      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c1a4:	2b63      	cmp	r3, #99	; 0x63
 800c1a6:	d065      	beq.n	800c274 <__ssvfiscanf_r+0x1f0>
 800c1a8:	2b64      	cmp	r3, #100	; 0x64
 800c1aa:	d1e1      	bne.n	800c170 <__ssvfiscanf_r+0xec>
 800c1ac:	9742      	str	r7, [sp, #264]	; 0x108
 800c1ae:	e7f4      	b.n	800c19a <__ssvfiscanf_r+0x116>
 800c1b0:	2b70      	cmp	r3, #112	; 0x70
 800c1b2:	d04b      	beq.n	800c24c <__ssvfiscanf_r+0x1c8>
 800c1b4:	d826      	bhi.n	800c204 <__ssvfiscanf_r+0x180>
 800c1b6:	2b6e      	cmp	r3, #110	; 0x6e
 800c1b8:	d062      	beq.n	800c280 <__ssvfiscanf_r+0x1fc>
 800c1ba:	d84c      	bhi.n	800c256 <__ssvfiscanf_r+0x1d2>
 800c1bc:	2b69      	cmp	r3, #105	; 0x69
 800c1be:	d1d7      	bne.n	800c170 <__ssvfiscanf_r+0xec>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	9342      	str	r3, [sp, #264]	; 0x108
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	dd68      	ble.n	800c2a0 <__ssvfiscanf_r+0x21c>
 800c1ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1d0:	0659      	lsls	r1, r3, #25
 800c1d2:	d407      	bmi.n	800c1e4 <__ssvfiscanf_r+0x160>
 800c1d4:	f000 fd10 	bl	800cbf8 <__locale_ctype_ptr>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	4410      	add	r0, r2
 800c1de:	7842      	ldrb	r2, [r0, #1]
 800c1e0:	0712      	lsls	r2, r2, #28
 800c1e2:	d464      	bmi.n	800c2ae <__ssvfiscanf_r+0x22a>
 800c1e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	dc73      	bgt.n	800c2d2 <__ssvfiscanf_r+0x24e>
 800c1ea:	466b      	mov	r3, sp
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	a941      	add	r1, sp, #260	; 0x104
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 fa1f 	bl	800c634 <_scanf_chars>
 800c1f6:	2801      	cmp	r0, #1
 800c1f8:	f000 8089 	beq.w	800c30e <__ssvfiscanf_r+0x28a>
 800c1fc:	2802      	cmp	r0, #2
 800c1fe:	f47f af71 	bne.w	800c0e4 <__ssvfiscanf_r+0x60>
 800c202:	e01d      	b.n	800c240 <__ssvfiscanf_r+0x1bc>
 800c204:	2b75      	cmp	r3, #117	; 0x75
 800c206:	d0d1      	beq.n	800c1ac <__ssvfiscanf_r+0x128>
 800c208:	2b78      	cmp	r3, #120	; 0x78
 800c20a:	d0c0      	beq.n	800c18e <__ssvfiscanf_r+0x10a>
 800c20c:	2b73      	cmp	r3, #115	; 0x73
 800c20e:	d1af      	bne.n	800c170 <__ssvfiscanf_r+0xec>
 800c210:	2302      	movs	r3, #2
 800c212:	e7d8      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c214:	6863      	ldr	r3, [r4, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	dd0c      	ble.n	800c234 <__ssvfiscanf_r+0x1b0>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	455a      	cmp	r2, fp
 800c220:	d175      	bne.n	800c30e <__ssvfiscanf_r+0x28a>
 800c222:	3301      	adds	r3, #1
 800c224:	6862      	ldr	r2, [r4, #4]
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c22a:	3a01      	subs	r2, #1
 800c22c:	3301      	adds	r3, #1
 800c22e:	6062      	str	r2, [r4, #4]
 800c230:	9345      	str	r3, [sp, #276]	; 0x114
 800c232:	e757      	b.n	800c0e4 <__ssvfiscanf_r+0x60>
 800c234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c236:	4621      	mov	r1, r4
 800c238:	4630      	mov	r0, r6
 800c23a:	4798      	blx	r3
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0ec      	beq.n	800c21a <__ssvfiscanf_r+0x196>
 800c240:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c242:	2800      	cmp	r0, #0
 800c244:	d159      	bne.n	800c2fa <__ssvfiscanf_r+0x276>
 800c246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c24a:	e05c      	b.n	800c306 <__ssvfiscanf_r+0x282>
 800c24c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c24e:	f042 0220 	orr.w	r2, r2, #32
 800c252:	9241      	str	r2, [sp, #260]	; 0x104
 800c254:	e79b      	b.n	800c18e <__ssvfiscanf_r+0x10a>
 800c256:	2308      	movs	r3, #8
 800c258:	9342      	str	r3, [sp, #264]	; 0x108
 800c25a:	2304      	movs	r3, #4
 800c25c:	e7b3      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c25e:	4629      	mov	r1, r5
 800c260:	4640      	mov	r0, r8
 800c262:	f000 fb3f 	bl	800c8e4 <__sccl>
 800c266:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26c:	9341      	str	r3, [sp, #260]	; 0x104
 800c26e:	4605      	mov	r5, r0
 800c270:	2301      	movs	r3, #1
 800c272:	e7a8      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c274:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c27a:	9341      	str	r3, [sp, #260]	; 0x104
 800c27c:	2300      	movs	r3, #0
 800c27e:	e7a2      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c280:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c282:	06c3      	lsls	r3, r0, #27
 800c284:	f53f af2e 	bmi.w	800c0e4 <__ssvfiscanf_r+0x60>
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c28c:	1d19      	adds	r1, r3, #4
 800c28e:	9100      	str	r1, [sp, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	07c0      	lsls	r0, r0, #31
 800c294:	bf4c      	ite	mi
 800c296:	801a      	strhmi	r2, [r3, #0]
 800c298:	601a      	strpl	r2, [r3, #0]
 800c29a:	e723      	b.n	800c0e4 <__ssvfiscanf_r+0x60>
 800c29c:	2305      	movs	r3, #5
 800c29e:	e792      	b.n	800c1c6 <__ssvfiscanf_r+0x142>
 800c2a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4798      	blx	r3
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d090      	beq.n	800c1ce <__ssvfiscanf_r+0x14a>
 800c2ac:	e7c8      	b.n	800c240 <__ssvfiscanf_r+0x1bc>
 800c2ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2b0:	3201      	adds	r2, #1
 800c2b2:	9245      	str	r2, [sp, #276]	; 0x114
 800c2b4:	6862      	ldr	r2, [r4, #4]
 800c2b6:	3a01      	subs	r2, #1
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	6062      	str	r2, [r4, #4]
 800c2bc:	dd02      	ble.n	800c2c4 <__ssvfiscanf_r+0x240>
 800c2be:	3301      	adds	r3, #1
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	e787      	b.n	800c1d4 <__ssvfiscanf_r+0x150>
 800c2c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4798      	blx	r3
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d081      	beq.n	800c1d4 <__ssvfiscanf_r+0x150>
 800c2d0:	e7b6      	b.n	800c240 <__ssvfiscanf_r+0x1bc>
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	dc06      	bgt.n	800c2e4 <__ssvfiscanf_r+0x260>
 800c2d6:	466b      	mov	r3, sp
 800c2d8:	4622      	mov	r2, r4
 800c2da:	a941      	add	r1, sp, #260	; 0x104
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f000 fa0d 	bl	800c6fc <_scanf_i>
 800c2e2:	e788      	b.n	800c1f6 <__ssvfiscanf_r+0x172>
 800c2e4:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <__ssvfiscanf_r+0x29c>)
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f43f aefc 	beq.w	800c0e4 <__ssvfiscanf_r+0x60>
 800c2ec:	466b      	mov	r3, sp
 800c2ee:	4622      	mov	r2, r4
 800c2f0:	a941      	add	r1, sp, #260	; 0x104
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f3af 8000 	nop.w
 800c2f8:	e77d      	b.n	800c1f6 <__ssvfiscanf_r+0x172>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c300:	bf18      	it	ne
 800c302:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c306:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c310:	e7f9      	b.n	800c306 <__ssvfiscanf_r+0x282>
 800c312:	bf00      	nop
 800c314:	0800bfd1 	.word	0x0800bfd1
 800c318:	0800c04b 	.word	0x0800c04b
 800c31c:	0800d042 	.word	0x0800d042
 800c320:	00000000 	.word	0x00000000

0800c324 <_printf_common>:
 800c324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c328:	4691      	mov	r9, r2
 800c32a:	461f      	mov	r7, r3
 800c32c:	688a      	ldr	r2, [r1, #8]
 800c32e:	690b      	ldr	r3, [r1, #16]
 800c330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c334:	4293      	cmp	r3, r2
 800c336:	bfb8      	it	lt
 800c338:	4613      	movlt	r3, r2
 800c33a:	f8c9 3000 	str.w	r3, [r9]
 800c33e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c342:	4606      	mov	r6, r0
 800c344:	460c      	mov	r4, r1
 800c346:	b112      	cbz	r2, 800c34e <_printf_common+0x2a>
 800c348:	3301      	adds	r3, #1
 800c34a:	f8c9 3000 	str.w	r3, [r9]
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	0699      	lsls	r1, r3, #26
 800c352:	bf42      	ittt	mi
 800c354:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c358:	3302      	addmi	r3, #2
 800c35a:	f8c9 3000 	strmi.w	r3, [r9]
 800c35e:	6825      	ldr	r5, [r4, #0]
 800c360:	f015 0506 	ands.w	r5, r5, #6
 800c364:	d107      	bne.n	800c376 <_printf_common+0x52>
 800c366:	f104 0a19 	add.w	sl, r4, #25
 800c36a:	68e3      	ldr	r3, [r4, #12]
 800c36c:	f8d9 2000 	ldr.w	r2, [r9]
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	42ab      	cmp	r3, r5
 800c374:	dc28      	bgt.n	800c3c8 <_printf_common+0xa4>
 800c376:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	3300      	adds	r3, #0
 800c37e:	bf18      	it	ne
 800c380:	2301      	movne	r3, #1
 800c382:	0692      	lsls	r2, r2, #26
 800c384:	d42d      	bmi.n	800c3e2 <_printf_common+0xbe>
 800c386:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c38a:	4639      	mov	r1, r7
 800c38c:	4630      	mov	r0, r6
 800c38e:	47c0      	blx	r8
 800c390:	3001      	adds	r0, #1
 800c392:	d020      	beq.n	800c3d6 <_printf_common+0xb2>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	68e5      	ldr	r5, [r4, #12]
 800c398:	f8d9 2000 	ldr.w	r2, [r9]
 800c39c:	f003 0306 	and.w	r3, r3, #6
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	bf08      	it	eq
 800c3a4:	1aad      	subeq	r5, r5, r2
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	6922      	ldr	r2, [r4, #16]
 800c3aa:	bf0c      	ite	eq
 800c3ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3b0:	2500      	movne	r5, #0
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	bfc4      	itt	gt
 800c3b6:	1a9b      	subgt	r3, r3, r2
 800c3b8:	18ed      	addgt	r5, r5, r3
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	341a      	adds	r4, #26
 800c3c0:	454d      	cmp	r5, r9
 800c3c2:	d11a      	bne.n	800c3fa <_printf_common+0xd6>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e008      	b.n	800c3da <_printf_common+0xb6>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	4652      	mov	r2, sl
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	47c0      	blx	r8
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d103      	bne.n	800c3de <_printf_common+0xba>
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3de:	3501      	adds	r5, #1
 800c3e0:	e7c3      	b.n	800c36a <_printf_common+0x46>
 800c3e2:	18e1      	adds	r1, r4, r3
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	2030      	movs	r0, #48	; 0x30
 800c3e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3ec:	4422      	add	r2, r4
 800c3ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3f6:	3302      	adds	r3, #2
 800c3f8:	e7c5      	b.n	800c386 <_printf_common+0x62>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	4639      	mov	r1, r7
 800c400:	4630      	mov	r0, r6
 800c402:	47c0      	blx	r8
 800c404:	3001      	adds	r0, #1
 800c406:	d0e6      	beq.n	800c3d6 <_printf_common+0xb2>
 800c408:	f109 0901 	add.w	r9, r9, #1
 800c40c:	e7d8      	b.n	800c3c0 <_printf_common+0x9c>
	...

0800c410 <_printf_i>:
 800c410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c414:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c418:	460c      	mov	r4, r1
 800c41a:	7e09      	ldrb	r1, [r1, #24]
 800c41c:	b085      	sub	sp, #20
 800c41e:	296e      	cmp	r1, #110	; 0x6e
 800c420:	4617      	mov	r7, r2
 800c422:	4606      	mov	r6, r0
 800c424:	4698      	mov	r8, r3
 800c426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c428:	f000 80b3 	beq.w	800c592 <_printf_i+0x182>
 800c42c:	d822      	bhi.n	800c474 <_printf_i+0x64>
 800c42e:	2963      	cmp	r1, #99	; 0x63
 800c430:	d036      	beq.n	800c4a0 <_printf_i+0x90>
 800c432:	d80a      	bhi.n	800c44a <_printf_i+0x3a>
 800c434:	2900      	cmp	r1, #0
 800c436:	f000 80b9 	beq.w	800c5ac <_printf_i+0x19c>
 800c43a:	2958      	cmp	r1, #88	; 0x58
 800c43c:	f000 8083 	beq.w	800c546 <_printf_i+0x136>
 800c440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c444:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c448:	e032      	b.n	800c4b0 <_printf_i+0xa0>
 800c44a:	2964      	cmp	r1, #100	; 0x64
 800c44c:	d001      	beq.n	800c452 <_printf_i+0x42>
 800c44e:	2969      	cmp	r1, #105	; 0x69
 800c450:	d1f6      	bne.n	800c440 <_printf_i+0x30>
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	6813      	ldr	r3, [r2, #0]
 800c456:	0605      	lsls	r5, r0, #24
 800c458:	f103 0104 	add.w	r1, r3, #4
 800c45c:	d52a      	bpl.n	800c4b4 <_printf_i+0xa4>
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6011      	str	r1, [r2, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	da03      	bge.n	800c46e <_printf_i+0x5e>
 800c466:	222d      	movs	r2, #45	; 0x2d
 800c468:	425b      	negs	r3, r3
 800c46a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c46e:	486f      	ldr	r0, [pc, #444]	; (800c62c <_printf_i+0x21c>)
 800c470:	220a      	movs	r2, #10
 800c472:	e039      	b.n	800c4e8 <_printf_i+0xd8>
 800c474:	2973      	cmp	r1, #115	; 0x73
 800c476:	f000 809d 	beq.w	800c5b4 <_printf_i+0x1a4>
 800c47a:	d808      	bhi.n	800c48e <_printf_i+0x7e>
 800c47c:	296f      	cmp	r1, #111	; 0x6f
 800c47e:	d020      	beq.n	800c4c2 <_printf_i+0xb2>
 800c480:	2970      	cmp	r1, #112	; 0x70
 800c482:	d1dd      	bne.n	800c440 <_printf_i+0x30>
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	f043 0320 	orr.w	r3, r3, #32
 800c48a:	6023      	str	r3, [r4, #0]
 800c48c:	e003      	b.n	800c496 <_printf_i+0x86>
 800c48e:	2975      	cmp	r1, #117	; 0x75
 800c490:	d017      	beq.n	800c4c2 <_printf_i+0xb2>
 800c492:	2978      	cmp	r1, #120	; 0x78
 800c494:	d1d4      	bne.n	800c440 <_printf_i+0x30>
 800c496:	2378      	movs	r3, #120	; 0x78
 800c498:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c49c:	4864      	ldr	r0, [pc, #400]	; (800c630 <_printf_i+0x220>)
 800c49e:	e055      	b.n	800c54c <_printf_i+0x13c>
 800c4a0:	6813      	ldr	r3, [r2, #0]
 800c4a2:	1d19      	adds	r1, r3, #4
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6011      	str	r1, [r2, #0]
 800c4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e08c      	b.n	800c5ce <_printf_i+0x1be>
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6011      	str	r1, [r2, #0]
 800c4b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4bc:	bf18      	it	ne
 800c4be:	b21b      	sxthne	r3, r3
 800c4c0:	e7cf      	b.n	800c462 <_printf_i+0x52>
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	6825      	ldr	r5, [r4, #0]
 800c4c6:	1d18      	adds	r0, r3, #4
 800c4c8:	6010      	str	r0, [r2, #0]
 800c4ca:	0628      	lsls	r0, r5, #24
 800c4cc:	d501      	bpl.n	800c4d2 <_printf_i+0xc2>
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	e002      	b.n	800c4d8 <_printf_i+0xc8>
 800c4d2:	0668      	lsls	r0, r5, #25
 800c4d4:	d5fb      	bpl.n	800c4ce <_printf_i+0xbe>
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	4854      	ldr	r0, [pc, #336]	; (800c62c <_printf_i+0x21c>)
 800c4da:	296f      	cmp	r1, #111	; 0x6f
 800c4dc:	bf14      	ite	ne
 800c4de:	220a      	movne	r2, #10
 800c4e0:	2208      	moveq	r2, #8
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4e8:	6865      	ldr	r5, [r4, #4]
 800c4ea:	60a5      	str	r5, [r4, #8]
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	f2c0 8095 	blt.w	800c61c <_printf_i+0x20c>
 800c4f2:	6821      	ldr	r1, [r4, #0]
 800c4f4:	f021 0104 	bic.w	r1, r1, #4
 800c4f8:	6021      	str	r1, [r4, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d13d      	bne.n	800c57a <_printf_i+0x16a>
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	f040 808e 	bne.w	800c620 <_printf_i+0x210>
 800c504:	4665      	mov	r5, ip
 800c506:	2a08      	cmp	r2, #8
 800c508:	d10b      	bne.n	800c522 <_printf_i+0x112>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	07db      	lsls	r3, r3, #31
 800c50e:	d508      	bpl.n	800c522 <_printf_i+0x112>
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	6862      	ldr	r2, [r4, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	bfde      	ittt	le
 800c518:	2330      	movle	r3, #48	; 0x30
 800c51a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c51e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c522:	ebac 0305 	sub.w	r3, ip, r5
 800c526:	6123      	str	r3, [r4, #16]
 800c528:	f8cd 8000 	str.w	r8, [sp]
 800c52c:	463b      	mov	r3, r7
 800c52e:	aa03      	add	r2, sp, #12
 800c530:	4621      	mov	r1, r4
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff fef6 	bl	800c324 <_printf_common>
 800c538:	3001      	adds	r0, #1
 800c53a:	d14d      	bne.n	800c5d8 <_printf_i+0x1c8>
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c540:	b005      	add	sp, #20
 800c542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c546:	4839      	ldr	r0, [pc, #228]	; (800c62c <_printf_i+0x21c>)
 800c548:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c54c:	6813      	ldr	r3, [r2, #0]
 800c54e:	6821      	ldr	r1, [r4, #0]
 800c550:	1d1d      	adds	r5, r3, #4
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6015      	str	r5, [r2, #0]
 800c556:	060a      	lsls	r2, r1, #24
 800c558:	d50b      	bpl.n	800c572 <_printf_i+0x162>
 800c55a:	07ca      	lsls	r2, r1, #31
 800c55c:	bf44      	itt	mi
 800c55e:	f041 0120 	orrmi.w	r1, r1, #32
 800c562:	6021      	strmi	r1, [r4, #0]
 800c564:	b91b      	cbnz	r3, 800c56e <_printf_i+0x15e>
 800c566:	6822      	ldr	r2, [r4, #0]
 800c568:	f022 0220 	bic.w	r2, r2, #32
 800c56c:	6022      	str	r2, [r4, #0]
 800c56e:	2210      	movs	r2, #16
 800c570:	e7b7      	b.n	800c4e2 <_printf_i+0xd2>
 800c572:	064d      	lsls	r5, r1, #25
 800c574:	bf48      	it	mi
 800c576:	b29b      	uxthmi	r3, r3
 800c578:	e7ef      	b.n	800c55a <_printf_i+0x14a>
 800c57a:	4665      	mov	r5, ip
 800c57c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c580:	fb02 3311 	mls	r3, r2, r1, r3
 800c584:	5cc3      	ldrb	r3, [r0, r3]
 800c586:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c58a:	460b      	mov	r3, r1
 800c58c:	2900      	cmp	r1, #0
 800c58e:	d1f5      	bne.n	800c57c <_printf_i+0x16c>
 800c590:	e7b9      	b.n	800c506 <_printf_i+0xf6>
 800c592:	6813      	ldr	r3, [r2, #0]
 800c594:	6825      	ldr	r5, [r4, #0]
 800c596:	6961      	ldr	r1, [r4, #20]
 800c598:	1d18      	adds	r0, r3, #4
 800c59a:	6010      	str	r0, [r2, #0]
 800c59c:	0628      	lsls	r0, r5, #24
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	d501      	bpl.n	800c5a6 <_printf_i+0x196>
 800c5a2:	6019      	str	r1, [r3, #0]
 800c5a4:	e002      	b.n	800c5ac <_printf_i+0x19c>
 800c5a6:	066a      	lsls	r2, r5, #25
 800c5a8:	d5fb      	bpl.n	800c5a2 <_printf_i+0x192>
 800c5aa:	8019      	strh	r1, [r3, #0]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6123      	str	r3, [r4, #16]
 800c5b0:	4665      	mov	r5, ip
 800c5b2:	e7b9      	b.n	800c528 <_printf_i+0x118>
 800c5b4:	6813      	ldr	r3, [r2, #0]
 800c5b6:	1d19      	adds	r1, r3, #4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	681d      	ldr	r5, [r3, #0]
 800c5bc:	6862      	ldr	r2, [r4, #4]
 800c5be:	2100      	movs	r1, #0
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f7f3 fe35 	bl	8000230 <memchr>
 800c5c6:	b108      	cbz	r0, 800c5cc <_printf_i+0x1bc>
 800c5c8:	1b40      	subs	r0, r0, r5
 800c5ca:	6060      	str	r0, [r4, #4]
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	6123      	str	r3, [r4, #16]
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d6:	e7a7      	b.n	800c528 <_printf_i+0x118>
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	462a      	mov	r2, r5
 800c5dc:	4639      	mov	r1, r7
 800c5de:	4630      	mov	r0, r6
 800c5e0:	47c0      	blx	r8
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d0aa      	beq.n	800c53c <_printf_i+0x12c>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	079b      	lsls	r3, r3, #30
 800c5ea:	d413      	bmi.n	800c614 <_printf_i+0x204>
 800c5ec:	68e0      	ldr	r0, [r4, #12]
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	4298      	cmp	r0, r3
 800c5f2:	bfb8      	it	lt
 800c5f4:	4618      	movlt	r0, r3
 800c5f6:	e7a3      	b.n	800c540 <_printf_i+0x130>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	464a      	mov	r2, r9
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	4630      	mov	r0, r6
 800c600:	47c0      	blx	r8
 800c602:	3001      	adds	r0, #1
 800c604:	d09a      	beq.n	800c53c <_printf_i+0x12c>
 800c606:	3501      	adds	r5, #1
 800c608:	68e3      	ldr	r3, [r4, #12]
 800c60a:	9a03      	ldr	r2, [sp, #12]
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	42ab      	cmp	r3, r5
 800c610:	dcf2      	bgt.n	800c5f8 <_printf_i+0x1e8>
 800c612:	e7eb      	b.n	800c5ec <_printf_i+0x1dc>
 800c614:	2500      	movs	r5, #0
 800c616:	f104 0919 	add.w	r9, r4, #25
 800c61a:	e7f5      	b.n	800c608 <_printf_i+0x1f8>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ac      	bne.n	800c57a <_printf_i+0x16a>
 800c620:	7803      	ldrb	r3, [r0, #0]
 800c622:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c626:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c62a:	e76c      	b.n	800c506 <_printf_i+0xf6>
 800c62c:	0800d04d 	.word	0x0800d04d
 800c630:	0800d05e 	.word	0x0800d05e

0800c634 <_scanf_chars>:
 800c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c638:	4615      	mov	r5, r2
 800c63a:	688a      	ldr	r2, [r1, #8]
 800c63c:	4680      	mov	r8, r0
 800c63e:	460c      	mov	r4, r1
 800c640:	b932      	cbnz	r2, 800c650 <_scanf_chars+0x1c>
 800c642:	698a      	ldr	r2, [r1, #24]
 800c644:	2a00      	cmp	r2, #0
 800c646:	bf14      	ite	ne
 800c648:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c64c:	2201      	moveq	r2, #1
 800c64e:	608a      	str	r2, [r1, #8]
 800c650:	6822      	ldr	r2, [r4, #0]
 800c652:	06d1      	lsls	r1, r2, #27
 800c654:	bf5f      	itttt	pl
 800c656:	681a      	ldrpl	r2, [r3, #0]
 800c658:	1d11      	addpl	r1, r2, #4
 800c65a:	6019      	strpl	r1, [r3, #0]
 800c65c:	6817      	ldrpl	r7, [r2, #0]
 800c65e:	2600      	movs	r6, #0
 800c660:	69a3      	ldr	r3, [r4, #24]
 800c662:	b1db      	cbz	r3, 800c69c <_scanf_chars+0x68>
 800c664:	2b01      	cmp	r3, #1
 800c666:	d107      	bne.n	800c678 <_scanf_chars+0x44>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	6962      	ldr	r2, [r4, #20]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	5cd3      	ldrb	r3, [r2, r3]
 800c670:	b9a3      	cbnz	r3, 800c69c <_scanf_chars+0x68>
 800c672:	2e00      	cmp	r6, #0
 800c674:	d132      	bne.n	800c6dc <_scanf_chars+0xa8>
 800c676:	e006      	b.n	800c686 <_scanf_chars+0x52>
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d007      	beq.n	800c68c <_scanf_chars+0x58>
 800c67c:	2e00      	cmp	r6, #0
 800c67e:	d12d      	bne.n	800c6dc <_scanf_chars+0xa8>
 800c680:	69a3      	ldr	r3, [r4, #24]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d12a      	bne.n	800c6dc <_scanf_chars+0xa8>
 800c686:	2001      	movs	r0, #1
 800c688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68c:	f000 fab4 	bl	800cbf8 <__locale_ctype_ptr>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	4418      	add	r0, r3
 800c696:	7843      	ldrb	r3, [r0, #1]
 800c698:	071b      	lsls	r3, r3, #28
 800c69a:	d4ef      	bmi.n	800c67c <_scanf_chars+0x48>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	06da      	lsls	r2, r3, #27
 800c6a0:	bf5e      	ittt	pl
 800c6a2:	682b      	ldrpl	r3, [r5, #0]
 800c6a4:	781b      	ldrbpl	r3, [r3, #0]
 800c6a6:	703b      	strbpl	r3, [r7, #0]
 800c6a8:	682a      	ldr	r2, [r5, #0]
 800c6aa:	686b      	ldr	r3, [r5, #4]
 800c6ac:	f102 0201 	add.w	r2, r2, #1
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	68a2      	ldr	r2, [r4, #8]
 800c6b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c6b8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c6bc:	606b      	str	r3, [r5, #4]
 800c6be:	f106 0601 	add.w	r6, r6, #1
 800c6c2:	bf58      	it	pl
 800c6c4:	3701      	addpl	r7, #1
 800c6c6:	60a2      	str	r2, [r4, #8]
 800c6c8:	b142      	cbz	r2, 800c6dc <_scanf_chars+0xa8>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dcc8      	bgt.n	800c660 <_scanf_chars+0x2c>
 800c6ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4798      	blx	r3
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d0c1      	beq.n	800c660 <_scanf_chars+0x2c>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	f013 0310 	ands.w	r3, r3, #16
 800c6e2:	d105      	bne.n	800c6f0 <_scanf_chars+0xbc>
 800c6e4:	68e2      	ldr	r2, [r4, #12]
 800c6e6:	3201      	adds	r2, #1
 800c6e8:	60e2      	str	r2, [r4, #12]
 800c6ea:	69a2      	ldr	r2, [r4, #24]
 800c6ec:	b102      	cbz	r2, 800c6f0 <_scanf_chars+0xbc>
 800c6ee:	703b      	strb	r3, [r7, #0]
 800c6f0:	6923      	ldr	r3, [r4, #16]
 800c6f2:	441e      	add	r6, r3
 800c6f4:	6126      	str	r6, [r4, #16]
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	e7c6      	b.n	800c688 <_scanf_chars+0x54>
	...

0800c6fc <_scanf_i>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	469a      	mov	sl, r3
 800c702:	4b74      	ldr	r3, [pc, #464]	; (800c8d4 <_scanf_i+0x1d8>)
 800c704:	460c      	mov	r4, r1
 800c706:	4683      	mov	fp, r0
 800c708:	4616      	mov	r6, r2
 800c70a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c70e:	b087      	sub	sp, #28
 800c710:	ab03      	add	r3, sp, #12
 800c712:	68a7      	ldr	r7, [r4, #8]
 800c714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c718:	4b6f      	ldr	r3, [pc, #444]	; (800c8d8 <_scanf_i+0x1dc>)
 800c71a:	69a1      	ldr	r1, [r4, #24]
 800c71c:	4a6f      	ldr	r2, [pc, #444]	; (800c8dc <_scanf_i+0x1e0>)
 800c71e:	2903      	cmp	r1, #3
 800c720:	bf08      	it	eq
 800c722:	461a      	moveq	r2, r3
 800c724:	1e7b      	subs	r3, r7, #1
 800c726:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c72a:	bf84      	itt	hi
 800c72c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c730:	60a3      	strhi	r3, [r4, #8]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	9200      	str	r2, [sp, #0]
 800c736:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c73a:	bf88      	it	hi
 800c73c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c740:	f104 091c 	add.w	r9, r4, #28
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bf8c      	ite	hi
 800c748:	197f      	addhi	r7, r7, r5
 800c74a:	2700      	movls	r7, #0
 800c74c:	464b      	mov	r3, r9
 800c74e:	f04f 0800 	mov.w	r8, #0
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	6831      	ldr	r1, [r6, #0]
 800c756:	ab03      	add	r3, sp, #12
 800c758:	2202      	movs	r2, #2
 800c75a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c75e:	7809      	ldrb	r1, [r1, #0]
 800c760:	f7f3 fd66 	bl	8000230 <memchr>
 800c764:	9b01      	ldr	r3, [sp, #4]
 800c766:	b330      	cbz	r0, 800c7b6 <_scanf_i+0xba>
 800c768:	f1b8 0f01 	cmp.w	r8, #1
 800c76c:	d15a      	bne.n	800c824 <_scanf_i+0x128>
 800c76e:	6862      	ldr	r2, [r4, #4]
 800c770:	b92a      	cbnz	r2, 800c77e <_scanf_i+0x82>
 800c772:	6822      	ldr	r2, [r4, #0]
 800c774:	2108      	movs	r1, #8
 800c776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c77a:	6061      	str	r1, [r4, #4]
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c784:	6022      	str	r2, [r4, #0]
 800c786:	68a2      	ldr	r2, [r4, #8]
 800c788:	1e51      	subs	r1, r2, #1
 800c78a:	60a1      	str	r1, [r4, #8]
 800c78c:	b19a      	cbz	r2, 800c7b6 <_scanf_i+0xba>
 800c78e:	6832      	ldr	r2, [r6, #0]
 800c790:	1c51      	adds	r1, r2, #1
 800c792:	6031      	str	r1, [r6, #0]
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	1c5d      	adds	r5, r3, #1
 800c79a:	6873      	ldr	r3, [r6, #4]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	6073      	str	r3, [r6, #4]
 800c7a2:	dc07      	bgt.n	800c7b4 <_scanf_i+0xb8>
 800c7a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4658      	mov	r0, fp
 800c7ac:	4798      	blx	r3
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f040 8086 	bne.w	800c8c0 <_scanf_i+0x1c4>
 800c7b4:	462b      	mov	r3, r5
 800c7b6:	f108 0801 	add.w	r8, r8, #1
 800c7ba:	f1b8 0f03 	cmp.w	r8, #3
 800c7be:	d1c8      	bne.n	800c752 <_scanf_i+0x56>
 800c7c0:	6862      	ldr	r2, [r4, #4]
 800c7c2:	b90a      	cbnz	r2, 800c7c8 <_scanf_i+0xcc>
 800c7c4:	220a      	movs	r2, #10
 800c7c6:	6062      	str	r2, [r4, #4]
 800c7c8:	6862      	ldr	r2, [r4, #4]
 800c7ca:	4945      	ldr	r1, [pc, #276]	; (800c8e0 <_scanf_i+0x1e4>)
 800c7cc:	6960      	ldr	r0, [r4, #20]
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	1a89      	subs	r1, r1, r2
 800c7d2:	f000 f887 	bl	800c8e4 <__sccl>
 800c7d6:	9b01      	ldr	r3, [sp, #4]
 800c7d8:	f04f 0800 	mov.w	r8, #0
 800c7dc:	461d      	mov	r5, r3
 800c7de:	68a3      	ldr	r3, [r4, #8]
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d03a      	beq.n	800c85c <_scanf_i+0x160>
 800c7e6:	6831      	ldr	r1, [r6, #0]
 800c7e8:	6960      	ldr	r0, [r4, #20]
 800c7ea:	f891 c000 	ldrb.w	ip, [r1]
 800c7ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d032      	beq.n	800c85c <_scanf_i+0x160>
 800c7f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c7fa:	d121      	bne.n	800c840 <_scanf_i+0x144>
 800c7fc:	0510      	lsls	r0, r2, #20
 800c7fe:	d51f      	bpl.n	800c840 <_scanf_i+0x144>
 800c800:	f108 0801 	add.w	r8, r8, #1
 800c804:	b117      	cbz	r7, 800c80c <_scanf_i+0x110>
 800c806:	3301      	adds	r3, #1
 800c808:	3f01      	subs	r7, #1
 800c80a:	60a3      	str	r3, [r4, #8]
 800c80c:	6873      	ldr	r3, [r6, #4]
 800c80e:	3b01      	subs	r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	6073      	str	r3, [r6, #4]
 800c814:	dd1b      	ble.n	800c84e <_scanf_i+0x152>
 800c816:	6833      	ldr	r3, [r6, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	6033      	str	r3, [r6, #0]
 800c81c:	68a3      	ldr	r3, [r4, #8]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60a3      	str	r3, [r4, #8]
 800c822:	e7dc      	b.n	800c7de <_scanf_i+0xe2>
 800c824:	f1b8 0f02 	cmp.w	r8, #2
 800c828:	d1ad      	bne.n	800c786 <_scanf_i+0x8a>
 800c82a:	6822      	ldr	r2, [r4, #0]
 800c82c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c830:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c834:	d1bf      	bne.n	800c7b6 <_scanf_i+0xba>
 800c836:	2110      	movs	r1, #16
 800c838:	6061      	str	r1, [r4, #4]
 800c83a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c83e:	e7a1      	b.n	800c784 <_scanf_i+0x88>
 800c840:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c844:	6022      	str	r2, [r4, #0]
 800c846:	780b      	ldrb	r3, [r1, #0]
 800c848:	702b      	strb	r3, [r5, #0]
 800c84a:	3501      	adds	r5, #1
 800c84c:	e7de      	b.n	800c80c <_scanf_i+0x110>
 800c84e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c852:	4631      	mov	r1, r6
 800c854:	4658      	mov	r0, fp
 800c856:	4798      	blx	r3
 800c858:	2800      	cmp	r0, #0
 800c85a:	d0df      	beq.n	800c81c <_scanf_i+0x120>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	05d9      	lsls	r1, r3, #23
 800c860:	d50c      	bpl.n	800c87c <_scanf_i+0x180>
 800c862:	454d      	cmp	r5, r9
 800c864:	d908      	bls.n	800c878 <_scanf_i+0x17c>
 800c866:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c86a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c86e:	4632      	mov	r2, r6
 800c870:	4658      	mov	r0, fp
 800c872:	4798      	blx	r3
 800c874:	1e6f      	subs	r7, r5, #1
 800c876:	463d      	mov	r5, r7
 800c878:	454d      	cmp	r5, r9
 800c87a:	d029      	beq.n	800c8d0 <_scanf_i+0x1d4>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	f012 0210 	ands.w	r2, r2, #16
 800c882:	d113      	bne.n	800c8ac <_scanf_i+0x1b0>
 800c884:	702a      	strb	r2, [r5, #0]
 800c886:	6863      	ldr	r3, [r4, #4]
 800c888:	9e00      	ldr	r6, [sp, #0]
 800c88a:	4649      	mov	r1, r9
 800c88c:	4658      	mov	r0, fp
 800c88e:	47b0      	blx	r6
 800c890:	f8da 3000 	ldr.w	r3, [sl]
 800c894:	6821      	ldr	r1, [r4, #0]
 800c896:	1d1a      	adds	r2, r3, #4
 800c898:	f8ca 2000 	str.w	r2, [sl]
 800c89c:	f011 0f20 	tst.w	r1, #32
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	d010      	beq.n	800c8c6 <_scanf_i+0x1ca>
 800c8a4:	6018      	str	r0, [r3, #0]
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60e3      	str	r3, [r4, #12]
 800c8ac:	eba5 0509 	sub.w	r5, r5, r9
 800c8b0:	44a8      	add	r8, r5
 800c8b2:	6925      	ldr	r5, [r4, #16]
 800c8b4:	4445      	add	r5, r8
 800c8b6:	6125      	str	r5, [r4, #16]
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	b007      	add	sp, #28
 800c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c0:	f04f 0800 	mov.w	r8, #0
 800c8c4:	e7ca      	b.n	800c85c <_scanf_i+0x160>
 800c8c6:	07ca      	lsls	r2, r1, #31
 800c8c8:	bf4c      	ite	mi
 800c8ca:	8018      	strhmi	r0, [r3, #0]
 800c8cc:	6018      	strpl	r0, [r3, #0]
 800c8ce:	e7ea      	b.n	800c8a6 <_scanf_i+0x1aa>
 800c8d0:	2001      	movs	r0, #1
 800c8d2:	e7f2      	b.n	800c8ba <_scanf_i+0x1be>
 800c8d4:	0800d018 	.word	0x0800d018
 800c8d8:	0800ca41 	.word	0x0800ca41
 800c8dc:	0800cb59 	.word	0x0800cb59
 800c8e0:	0800d07f 	.word	0x0800d07f

0800c8e4 <__sccl>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	780b      	ldrb	r3, [r1, #0]
 800c8e8:	2b5e      	cmp	r3, #94	; 0x5e
 800c8ea:	bf13      	iteet	ne
 800c8ec:	1c4a      	addne	r2, r1, #1
 800c8ee:	1c8a      	addeq	r2, r1, #2
 800c8f0:	784b      	ldrbeq	r3, [r1, #1]
 800c8f2:	2100      	movne	r1, #0
 800c8f4:	bf08      	it	eq
 800c8f6:	2101      	moveq	r1, #1
 800c8f8:	1e44      	subs	r4, r0, #1
 800c8fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c8fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c902:	42ac      	cmp	r4, r5
 800c904:	d1fb      	bne.n	800c8fe <__sccl+0x1a>
 800c906:	b913      	cbnz	r3, 800c90e <__sccl+0x2a>
 800c908:	3a01      	subs	r2, #1
 800c90a:	4610      	mov	r0, r2
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	f081 0401 	eor.w	r4, r1, #1
 800c912:	54c4      	strb	r4, [r0, r3]
 800c914:	1c51      	adds	r1, r2, #1
 800c916:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c91a:	2d2d      	cmp	r5, #45	; 0x2d
 800c91c:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800c920:	460a      	mov	r2, r1
 800c922:	d006      	beq.n	800c932 <__sccl+0x4e>
 800c924:	2d5d      	cmp	r5, #93	; 0x5d
 800c926:	d0f0      	beq.n	800c90a <__sccl+0x26>
 800c928:	b90d      	cbnz	r5, 800c92e <__sccl+0x4a>
 800c92a:	4632      	mov	r2, r6
 800c92c:	e7ed      	b.n	800c90a <__sccl+0x26>
 800c92e:	462b      	mov	r3, r5
 800c930:	e7ef      	b.n	800c912 <__sccl+0x2e>
 800c932:	780e      	ldrb	r6, [r1, #0]
 800c934:	2e5d      	cmp	r6, #93	; 0x5d
 800c936:	d0fa      	beq.n	800c92e <__sccl+0x4a>
 800c938:	42b3      	cmp	r3, r6
 800c93a:	dcf8      	bgt.n	800c92e <__sccl+0x4a>
 800c93c:	3301      	adds	r3, #1
 800c93e:	429e      	cmp	r6, r3
 800c940:	54c4      	strb	r4, [r0, r3]
 800c942:	dcfb      	bgt.n	800c93c <__sccl+0x58>
 800c944:	3102      	adds	r1, #2
 800c946:	e7e6      	b.n	800c916 <__sccl+0x32>

0800c948 <_strtol_l.isra.0>:
 800c948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	4692      	mov	sl, r2
 800c952:	461e      	mov	r6, r3
 800c954:	460f      	mov	r7, r1
 800c956:	463d      	mov	r5, r7
 800c958:	9808      	ldr	r0, [sp, #32]
 800c95a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c95e:	f000 f947 	bl	800cbf0 <__locale_ctype_ptr_l>
 800c962:	4420      	add	r0, r4
 800c964:	7843      	ldrb	r3, [r0, #1]
 800c966:	f013 0308 	ands.w	r3, r3, #8
 800c96a:	d132      	bne.n	800c9d2 <_strtol_l.isra.0+0x8a>
 800c96c:	2c2d      	cmp	r4, #45	; 0x2d
 800c96e:	d132      	bne.n	800c9d6 <_strtol_l.isra.0+0x8e>
 800c970:	787c      	ldrb	r4, [r7, #1]
 800c972:	1cbd      	adds	r5, r7, #2
 800c974:	2201      	movs	r2, #1
 800c976:	2e00      	cmp	r6, #0
 800c978:	d05d      	beq.n	800ca36 <_strtol_l.isra.0+0xee>
 800c97a:	2e10      	cmp	r6, #16
 800c97c:	d109      	bne.n	800c992 <_strtol_l.isra.0+0x4a>
 800c97e:	2c30      	cmp	r4, #48	; 0x30
 800c980:	d107      	bne.n	800c992 <_strtol_l.isra.0+0x4a>
 800c982:	782b      	ldrb	r3, [r5, #0]
 800c984:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c988:	2b58      	cmp	r3, #88	; 0x58
 800c98a:	d14f      	bne.n	800ca2c <_strtol_l.isra.0+0xe4>
 800c98c:	786c      	ldrb	r4, [r5, #1]
 800c98e:	2610      	movs	r6, #16
 800c990:	3502      	adds	r5, #2
 800c992:	2a00      	cmp	r2, #0
 800c994:	bf14      	ite	ne
 800c996:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c99a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c99e:	2700      	movs	r7, #0
 800c9a0:	fbb1 fcf6 	udiv	ip, r1, r6
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c9aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c9ae:	2b09      	cmp	r3, #9
 800c9b0:	d817      	bhi.n	800c9e2 <_strtol_l.isra.0+0x9a>
 800c9b2:	461c      	mov	r4, r3
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	dd23      	ble.n	800ca00 <_strtol_l.isra.0+0xb8>
 800c9b8:	1c7b      	adds	r3, r7, #1
 800c9ba:	d007      	beq.n	800c9cc <_strtol_l.isra.0+0x84>
 800c9bc:	4584      	cmp	ip, r0
 800c9be:	d31c      	bcc.n	800c9fa <_strtol_l.isra.0+0xb2>
 800c9c0:	d101      	bne.n	800c9c6 <_strtol_l.isra.0+0x7e>
 800c9c2:	45a6      	cmp	lr, r4
 800c9c4:	db19      	blt.n	800c9fa <_strtol_l.isra.0+0xb2>
 800c9c6:	fb00 4006 	mla	r0, r0, r6, r4
 800c9ca:	2701      	movs	r7, #1
 800c9cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9d0:	e7eb      	b.n	800c9aa <_strtol_l.isra.0+0x62>
 800c9d2:	462f      	mov	r7, r5
 800c9d4:	e7bf      	b.n	800c956 <_strtol_l.isra.0+0xe>
 800c9d6:	2c2b      	cmp	r4, #43	; 0x2b
 800c9d8:	bf04      	itt	eq
 800c9da:	1cbd      	addeq	r5, r7, #2
 800c9dc:	787c      	ldrbeq	r4, [r7, #1]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	e7c9      	b.n	800c976 <_strtol_l.isra.0+0x2e>
 800c9e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c9e6:	2b19      	cmp	r3, #25
 800c9e8:	d801      	bhi.n	800c9ee <_strtol_l.isra.0+0xa6>
 800c9ea:	3c37      	subs	r4, #55	; 0x37
 800c9ec:	e7e2      	b.n	800c9b4 <_strtol_l.isra.0+0x6c>
 800c9ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c9f2:	2b19      	cmp	r3, #25
 800c9f4:	d804      	bhi.n	800ca00 <_strtol_l.isra.0+0xb8>
 800c9f6:	3c57      	subs	r4, #87	; 0x57
 800c9f8:	e7dc      	b.n	800c9b4 <_strtol_l.isra.0+0x6c>
 800c9fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c9fe:	e7e5      	b.n	800c9cc <_strtol_l.isra.0+0x84>
 800ca00:	1c7b      	adds	r3, r7, #1
 800ca02:	d108      	bne.n	800ca16 <_strtol_l.isra.0+0xce>
 800ca04:	2322      	movs	r3, #34	; 0x22
 800ca06:	f8c8 3000 	str.w	r3, [r8]
 800ca0a:	4608      	mov	r0, r1
 800ca0c:	f1ba 0f00 	cmp.w	sl, #0
 800ca10:	d107      	bne.n	800ca22 <_strtol_l.isra.0+0xda>
 800ca12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca16:	b102      	cbz	r2, 800ca1a <_strtol_l.isra.0+0xd2>
 800ca18:	4240      	negs	r0, r0
 800ca1a:	f1ba 0f00 	cmp.w	sl, #0
 800ca1e:	d0f8      	beq.n	800ca12 <_strtol_l.isra.0+0xca>
 800ca20:	b10f      	cbz	r7, 800ca26 <_strtol_l.isra.0+0xde>
 800ca22:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ca26:	f8ca 9000 	str.w	r9, [sl]
 800ca2a:	e7f2      	b.n	800ca12 <_strtol_l.isra.0+0xca>
 800ca2c:	2430      	movs	r4, #48	; 0x30
 800ca2e:	2e00      	cmp	r6, #0
 800ca30:	d1af      	bne.n	800c992 <_strtol_l.isra.0+0x4a>
 800ca32:	2608      	movs	r6, #8
 800ca34:	e7ad      	b.n	800c992 <_strtol_l.isra.0+0x4a>
 800ca36:	2c30      	cmp	r4, #48	; 0x30
 800ca38:	d0a3      	beq.n	800c982 <_strtol_l.isra.0+0x3a>
 800ca3a:	260a      	movs	r6, #10
 800ca3c:	e7a9      	b.n	800c992 <_strtol_l.isra.0+0x4a>
	...

0800ca40 <_strtol_r>:
 800ca40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca42:	4c06      	ldr	r4, [pc, #24]	; (800ca5c <_strtol_r+0x1c>)
 800ca44:	4d06      	ldr	r5, [pc, #24]	; (800ca60 <_strtol_r+0x20>)
 800ca46:	6824      	ldr	r4, [r4, #0]
 800ca48:	6a24      	ldr	r4, [r4, #32]
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	bf08      	it	eq
 800ca4e:	462c      	moveq	r4, r5
 800ca50:	9400      	str	r4, [sp, #0]
 800ca52:	f7ff ff79 	bl	800c948 <_strtol_l.isra.0>
 800ca56:	b003      	add	sp, #12
 800ca58:	bd30      	pop	{r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000180 	.word	0x20000180
 800ca60:	200001e4 	.word	0x200001e4

0800ca64 <_strtoul_l.isra.0>:
 800ca64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca68:	4680      	mov	r8, r0
 800ca6a:	4689      	mov	r9, r1
 800ca6c:	4692      	mov	sl, r2
 800ca6e:	461e      	mov	r6, r3
 800ca70:	460f      	mov	r7, r1
 800ca72:	463d      	mov	r5, r7
 800ca74:	9808      	ldr	r0, [sp, #32]
 800ca76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca7a:	f000 f8b9 	bl	800cbf0 <__locale_ctype_ptr_l>
 800ca7e:	4420      	add	r0, r4
 800ca80:	7843      	ldrb	r3, [r0, #1]
 800ca82:	f013 0308 	ands.w	r3, r3, #8
 800ca86:	d130      	bne.n	800caea <_strtoul_l.isra.0+0x86>
 800ca88:	2c2d      	cmp	r4, #45	; 0x2d
 800ca8a:	d130      	bne.n	800caee <_strtoul_l.isra.0+0x8a>
 800ca8c:	787c      	ldrb	r4, [r7, #1]
 800ca8e:	1cbd      	adds	r5, r7, #2
 800ca90:	2101      	movs	r1, #1
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d05c      	beq.n	800cb50 <_strtoul_l.isra.0+0xec>
 800ca96:	2e10      	cmp	r6, #16
 800ca98:	d109      	bne.n	800caae <_strtoul_l.isra.0+0x4a>
 800ca9a:	2c30      	cmp	r4, #48	; 0x30
 800ca9c:	d107      	bne.n	800caae <_strtoul_l.isra.0+0x4a>
 800ca9e:	782b      	ldrb	r3, [r5, #0]
 800caa0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caa4:	2b58      	cmp	r3, #88	; 0x58
 800caa6:	d14e      	bne.n	800cb46 <_strtoul_l.isra.0+0xe2>
 800caa8:	786c      	ldrb	r4, [r5, #1]
 800caaa:	2610      	movs	r6, #16
 800caac:	3502      	adds	r5, #2
 800caae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cab2:	2300      	movs	r3, #0
 800cab4:	fbb2 f2f6 	udiv	r2, r2, r6
 800cab8:	fb06 fc02 	mul.w	ip, r6, r2
 800cabc:	ea6f 0c0c 	mvn.w	ip, ip
 800cac0:	4618      	mov	r0, r3
 800cac2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cac6:	2f09      	cmp	r7, #9
 800cac8:	d817      	bhi.n	800cafa <_strtoul_l.isra.0+0x96>
 800caca:	463c      	mov	r4, r7
 800cacc:	42a6      	cmp	r6, r4
 800cace:	dd23      	ble.n	800cb18 <_strtoul_l.isra.0+0xb4>
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	db1e      	blt.n	800cb12 <_strtoul_l.isra.0+0xae>
 800cad4:	4282      	cmp	r2, r0
 800cad6:	d31c      	bcc.n	800cb12 <_strtoul_l.isra.0+0xae>
 800cad8:	d101      	bne.n	800cade <_strtoul_l.isra.0+0x7a>
 800cada:	45a4      	cmp	ip, r4
 800cadc:	db19      	blt.n	800cb12 <_strtoul_l.isra.0+0xae>
 800cade:	fb00 4006 	mla	r0, r0, r6, r4
 800cae2:	2301      	movs	r3, #1
 800cae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cae8:	e7eb      	b.n	800cac2 <_strtoul_l.isra.0+0x5e>
 800caea:	462f      	mov	r7, r5
 800caec:	e7c1      	b.n	800ca72 <_strtoul_l.isra.0+0xe>
 800caee:	2c2b      	cmp	r4, #43	; 0x2b
 800caf0:	bf04      	itt	eq
 800caf2:	1cbd      	addeq	r5, r7, #2
 800caf4:	787c      	ldrbeq	r4, [r7, #1]
 800caf6:	4619      	mov	r1, r3
 800caf8:	e7cb      	b.n	800ca92 <_strtoul_l.isra.0+0x2e>
 800cafa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cafe:	2f19      	cmp	r7, #25
 800cb00:	d801      	bhi.n	800cb06 <_strtoul_l.isra.0+0xa2>
 800cb02:	3c37      	subs	r4, #55	; 0x37
 800cb04:	e7e2      	b.n	800cacc <_strtoul_l.isra.0+0x68>
 800cb06:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cb0a:	2f19      	cmp	r7, #25
 800cb0c:	d804      	bhi.n	800cb18 <_strtoul_l.isra.0+0xb4>
 800cb0e:	3c57      	subs	r4, #87	; 0x57
 800cb10:	e7dc      	b.n	800cacc <_strtoul_l.isra.0+0x68>
 800cb12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb16:	e7e5      	b.n	800cae4 <_strtoul_l.isra.0+0x80>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da09      	bge.n	800cb30 <_strtoul_l.isra.0+0xcc>
 800cb1c:	2322      	movs	r3, #34	; 0x22
 800cb1e:	f8c8 3000 	str.w	r3, [r8]
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb26:	f1ba 0f00 	cmp.w	sl, #0
 800cb2a:	d107      	bne.n	800cb3c <_strtoul_l.isra.0+0xd8>
 800cb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb30:	b101      	cbz	r1, 800cb34 <_strtoul_l.isra.0+0xd0>
 800cb32:	4240      	negs	r0, r0
 800cb34:	f1ba 0f00 	cmp.w	sl, #0
 800cb38:	d0f8      	beq.n	800cb2c <_strtoul_l.isra.0+0xc8>
 800cb3a:	b10b      	cbz	r3, 800cb40 <_strtoul_l.isra.0+0xdc>
 800cb3c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cb40:	f8ca 9000 	str.w	r9, [sl]
 800cb44:	e7f2      	b.n	800cb2c <_strtoul_l.isra.0+0xc8>
 800cb46:	2430      	movs	r4, #48	; 0x30
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	d1b0      	bne.n	800caae <_strtoul_l.isra.0+0x4a>
 800cb4c:	2608      	movs	r6, #8
 800cb4e:	e7ae      	b.n	800caae <_strtoul_l.isra.0+0x4a>
 800cb50:	2c30      	cmp	r4, #48	; 0x30
 800cb52:	d0a4      	beq.n	800ca9e <_strtoul_l.isra.0+0x3a>
 800cb54:	260a      	movs	r6, #10
 800cb56:	e7aa      	b.n	800caae <_strtoul_l.isra.0+0x4a>

0800cb58 <_strtoul_r>:
 800cb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb5a:	4c06      	ldr	r4, [pc, #24]	; (800cb74 <_strtoul_r+0x1c>)
 800cb5c:	4d06      	ldr	r5, [pc, #24]	; (800cb78 <_strtoul_r+0x20>)
 800cb5e:	6824      	ldr	r4, [r4, #0]
 800cb60:	6a24      	ldr	r4, [r4, #32]
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	bf08      	it	eq
 800cb66:	462c      	moveq	r4, r5
 800cb68:	9400      	str	r4, [sp, #0]
 800cb6a:	f7ff ff7b 	bl	800ca64 <_strtoul_l.isra.0>
 800cb6e:	b003      	add	sp, #12
 800cb70:	bd30      	pop	{r4, r5, pc}
 800cb72:	bf00      	nop
 800cb74:	20000180 	.word	0x20000180
 800cb78:	200001e4 	.word	0x200001e4

0800cb7c <__submore>:
 800cb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	460c      	mov	r4, r1
 800cb82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb88:	4299      	cmp	r1, r3
 800cb8a:	d11d      	bne.n	800cbc8 <__submore+0x4c>
 800cb8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb90:	f000 f8c4 	bl	800cd1c <_malloc_r>
 800cb94:	b918      	cbnz	r0, 800cb9e <__submore+0x22>
 800cb96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba2:	63a3      	str	r3, [r4, #56]	; 0x38
 800cba4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cba8:	6360      	str	r0, [r4, #52]	; 0x34
 800cbaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cbae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cbb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cbbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cbc2:	6020      	str	r0, [r4, #0]
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e7e8      	b.n	800cb9a <__submore+0x1e>
 800cbc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cbca:	0077      	lsls	r7, r6, #1
 800cbcc:	463a      	mov	r2, r7
 800cbce:	f000 f8ff 	bl	800cdd0 <_realloc_r>
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d0de      	beq.n	800cb96 <__submore+0x1a>
 800cbd8:	eb00 0806 	add.w	r8, r0, r6
 800cbdc:	4601      	mov	r1, r0
 800cbde:	4632      	mov	r2, r6
 800cbe0:	4640      	mov	r0, r8
 800cbe2:	f000 f829 	bl	800cc38 <memcpy>
 800cbe6:	f8c4 8000 	str.w	r8, [r4]
 800cbea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cbee:	e7e9      	b.n	800cbc4 <__submore+0x48>

0800cbf0 <__locale_ctype_ptr_l>:
 800cbf0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <__locale_ctype_ptr>:
 800cbf8:	4b04      	ldr	r3, [pc, #16]	; (800cc0c <__locale_ctype_ptr+0x14>)
 800cbfa:	4a05      	ldr	r2, [pc, #20]	; (800cc10 <__locale_ctype_ptr+0x18>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bf08      	it	eq
 800cc04:	4613      	moveq	r3, r2
 800cc06:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800cc0a:	4770      	bx	lr
 800cc0c:	20000180 	.word	0x20000180
 800cc10:	200001e4 	.word	0x200001e4

0800cc14 <__ascii_mbtowc>:
 800cc14:	b082      	sub	sp, #8
 800cc16:	b901      	cbnz	r1, 800cc1a <__ascii_mbtowc+0x6>
 800cc18:	a901      	add	r1, sp, #4
 800cc1a:	b142      	cbz	r2, 800cc2e <__ascii_mbtowc+0x1a>
 800cc1c:	b14b      	cbz	r3, 800cc32 <__ascii_mbtowc+0x1e>
 800cc1e:	7813      	ldrb	r3, [r2, #0]
 800cc20:	600b      	str	r3, [r1, #0]
 800cc22:	7812      	ldrb	r2, [r2, #0]
 800cc24:	1c10      	adds	r0, r2, #0
 800cc26:	bf18      	it	ne
 800cc28:	2001      	movne	r0, #1
 800cc2a:	b002      	add	sp, #8
 800cc2c:	4770      	bx	lr
 800cc2e:	4610      	mov	r0, r2
 800cc30:	e7fb      	b.n	800cc2a <__ascii_mbtowc+0x16>
 800cc32:	f06f 0001 	mvn.w	r0, #1
 800cc36:	e7f8      	b.n	800cc2a <__ascii_mbtowc+0x16>

0800cc38 <memcpy>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	1e43      	subs	r3, r0, #1
 800cc3c:	440a      	add	r2, r1
 800cc3e:	4291      	cmp	r1, r2
 800cc40:	d100      	bne.n	800cc44 <memcpy+0xc>
 800cc42:	bd10      	pop	{r4, pc}
 800cc44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc4c:	e7f7      	b.n	800cc3e <memcpy+0x6>

0800cc4e <memmove>:
 800cc4e:	4288      	cmp	r0, r1
 800cc50:	b510      	push	{r4, lr}
 800cc52:	eb01 0302 	add.w	r3, r1, r2
 800cc56:	d807      	bhi.n	800cc68 <memmove+0x1a>
 800cc58:	1e42      	subs	r2, r0, #1
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	d00a      	beq.n	800cc74 <memmove+0x26>
 800cc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc62:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cc66:	e7f8      	b.n	800cc5a <memmove+0xc>
 800cc68:	4283      	cmp	r3, r0
 800cc6a:	d9f5      	bls.n	800cc58 <memmove+0xa>
 800cc6c:	1881      	adds	r1, r0, r2
 800cc6e:	1ad2      	subs	r2, r2, r3
 800cc70:	42d3      	cmn	r3, r2
 800cc72:	d100      	bne.n	800cc76 <memmove+0x28>
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cc7e:	e7f7      	b.n	800cc70 <memmove+0x22>

0800cc80 <_free_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4605      	mov	r5, r0
 800cc84:	2900      	cmp	r1, #0
 800cc86:	d045      	beq.n	800cd14 <_free_r+0x94>
 800cc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc8c:	1f0c      	subs	r4, r1, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfb8      	it	lt
 800cc92:	18e4      	addlt	r4, r4, r3
 800cc94:	f000 f8df 	bl	800ce56 <__malloc_lock>
 800cc98:	4a1f      	ldr	r2, [pc, #124]	; (800cd18 <_free_r+0x98>)
 800cc9a:	6813      	ldr	r3, [r2, #0]
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	b933      	cbnz	r3, 800ccae <_free_r+0x2e>
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	6014      	str	r4, [r2, #0]
 800cca4:	4628      	mov	r0, r5
 800cca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccaa:	f000 b8d5 	b.w	800ce58 <__malloc_unlock>
 800ccae:	42a3      	cmp	r3, r4
 800ccb0:	d90c      	bls.n	800cccc <_free_r+0x4c>
 800ccb2:	6821      	ldr	r1, [r4, #0]
 800ccb4:	1862      	adds	r2, r4, r1
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	bf04      	itt	eq
 800ccba:	681a      	ldreq	r2, [r3, #0]
 800ccbc:	685b      	ldreq	r3, [r3, #4]
 800ccbe:	6063      	str	r3, [r4, #4]
 800ccc0:	bf04      	itt	eq
 800ccc2:	1852      	addeq	r2, r2, r1
 800ccc4:	6022      	streq	r2, [r4, #0]
 800ccc6:	6004      	str	r4, [r0, #0]
 800ccc8:	e7ec      	b.n	800cca4 <_free_r+0x24>
 800ccca:	4613      	mov	r3, r2
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	b10a      	cbz	r2, 800ccd4 <_free_r+0x54>
 800ccd0:	42a2      	cmp	r2, r4
 800ccd2:	d9fa      	bls.n	800ccca <_free_r+0x4a>
 800ccd4:	6819      	ldr	r1, [r3, #0]
 800ccd6:	1858      	adds	r0, r3, r1
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d10b      	bne.n	800ccf4 <_free_r+0x74>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	4401      	add	r1, r0
 800cce0:	1858      	adds	r0, r3, r1
 800cce2:	4282      	cmp	r2, r0
 800cce4:	6019      	str	r1, [r3, #0]
 800cce6:	d1dd      	bne.n	800cca4 <_free_r+0x24>
 800cce8:	6810      	ldr	r0, [r2, #0]
 800ccea:	6852      	ldr	r2, [r2, #4]
 800ccec:	605a      	str	r2, [r3, #4]
 800ccee:	4401      	add	r1, r0
 800ccf0:	6019      	str	r1, [r3, #0]
 800ccf2:	e7d7      	b.n	800cca4 <_free_r+0x24>
 800ccf4:	d902      	bls.n	800ccfc <_free_r+0x7c>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	e7d3      	b.n	800cca4 <_free_r+0x24>
 800ccfc:	6820      	ldr	r0, [r4, #0]
 800ccfe:	1821      	adds	r1, r4, r0
 800cd00:	428a      	cmp	r2, r1
 800cd02:	bf04      	itt	eq
 800cd04:	6811      	ldreq	r1, [r2, #0]
 800cd06:	6852      	ldreq	r2, [r2, #4]
 800cd08:	6062      	str	r2, [r4, #4]
 800cd0a:	bf04      	itt	eq
 800cd0c:	1809      	addeq	r1, r1, r0
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	605c      	str	r4, [r3, #4]
 800cd12:	e7c7      	b.n	800cca4 <_free_r+0x24>
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	20000598 	.word	0x20000598

0800cd1c <_malloc_r>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	1ccd      	adds	r5, r1, #3
 800cd20:	f025 0503 	bic.w	r5, r5, #3
 800cd24:	3508      	adds	r5, #8
 800cd26:	2d0c      	cmp	r5, #12
 800cd28:	bf38      	it	cc
 800cd2a:	250c      	movcc	r5, #12
 800cd2c:	2d00      	cmp	r5, #0
 800cd2e:	4606      	mov	r6, r0
 800cd30:	db01      	blt.n	800cd36 <_malloc_r+0x1a>
 800cd32:	42a9      	cmp	r1, r5
 800cd34:	d903      	bls.n	800cd3e <_malloc_r+0x22>
 800cd36:	230c      	movs	r3, #12
 800cd38:	6033      	str	r3, [r6, #0]
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	bd70      	pop	{r4, r5, r6, pc}
 800cd3e:	f000 f88a 	bl	800ce56 <__malloc_lock>
 800cd42:	4a21      	ldr	r2, [pc, #132]	; (800cdc8 <_malloc_r+0xac>)
 800cd44:	6814      	ldr	r4, [r2, #0]
 800cd46:	4621      	mov	r1, r4
 800cd48:	b991      	cbnz	r1, 800cd70 <_malloc_r+0x54>
 800cd4a:	4c20      	ldr	r4, [pc, #128]	; (800cdcc <_malloc_r+0xb0>)
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	b91b      	cbnz	r3, 800cd58 <_malloc_r+0x3c>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f000 f863 	bl	800ce1c <_sbrk_r>
 800cd56:	6020      	str	r0, [r4, #0]
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f000 f85e 	bl	800ce1c <_sbrk_r>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d124      	bne.n	800cdae <_malloc_r+0x92>
 800cd64:	230c      	movs	r3, #12
 800cd66:	6033      	str	r3, [r6, #0]
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f000 f875 	bl	800ce58 <__malloc_unlock>
 800cd6e:	e7e4      	b.n	800cd3a <_malloc_r+0x1e>
 800cd70:	680b      	ldr	r3, [r1, #0]
 800cd72:	1b5b      	subs	r3, r3, r5
 800cd74:	d418      	bmi.n	800cda8 <_malloc_r+0x8c>
 800cd76:	2b0b      	cmp	r3, #11
 800cd78:	d90f      	bls.n	800cd9a <_malloc_r+0x7e>
 800cd7a:	600b      	str	r3, [r1, #0]
 800cd7c:	50cd      	str	r5, [r1, r3]
 800cd7e:	18cc      	adds	r4, r1, r3
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 f869 	bl	800ce58 <__malloc_unlock>
 800cd86:	f104 000b 	add.w	r0, r4, #11
 800cd8a:	1d23      	adds	r3, r4, #4
 800cd8c:	f020 0007 	bic.w	r0, r0, #7
 800cd90:	1ac3      	subs	r3, r0, r3
 800cd92:	d0d3      	beq.n	800cd3c <_malloc_r+0x20>
 800cd94:	425a      	negs	r2, r3
 800cd96:	50e2      	str	r2, [r4, r3]
 800cd98:	e7d0      	b.n	800cd3c <_malloc_r+0x20>
 800cd9a:	428c      	cmp	r4, r1
 800cd9c:	684b      	ldr	r3, [r1, #4]
 800cd9e:	bf16      	itet	ne
 800cda0:	6063      	strne	r3, [r4, #4]
 800cda2:	6013      	streq	r3, [r2, #0]
 800cda4:	460c      	movne	r4, r1
 800cda6:	e7eb      	b.n	800cd80 <_malloc_r+0x64>
 800cda8:	460c      	mov	r4, r1
 800cdaa:	6849      	ldr	r1, [r1, #4]
 800cdac:	e7cc      	b.n	800cd48 <_malloc_r+0x2c>
 800cdae:	1cc4      	adds	r4, r0, #3
 800cdb0:	f024 0403 	bic.w	r4, r4, #3
 800cdb4:	42a0      	cmp	r0, r4
 800cdb6:	d005      	beq.n	800cdc4 <_malloc_r+0xa8>
 800cdb8:	1a21      	subs	r1, r4, r0
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f000 f82e 	bl	800ce1c <_sbrk_r>
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	d0cf      	beq.n	800cd64 <_malloc_r+0x48>
 800cdc4:	6025      	str	r5, [r4, #0]
 800cdc6:	e7db      	b.n	800cd80 <_malloc_r+0x64>
 800cdc8:	20000598 	.word	0x20000598
 800cdcc:	2000059c 	.word	0x2000059c

0800cdd0 <_realloc_r>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	4614      	mov	r4, r2
 800cdd6:	460e      	mov	r6, r1
 800cdd8:	b921      	cbnz	r1, 800cde4 <_realloc_r+0x14>
 800cdda:	4611      	mov	r1, r2
 800cddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cde0:	f7ff bf9c 	b.w	800cd1c <_malloc_r>
 800cde4:	b922      	cbnz	r2, 800cdf0 <_realloc_r+0x20>
 800cde6:	f7ff ff4b 	bl	800cc80 <_free_r>
 800cdea:	4625      	mov	r5, r4
 800cdec:	4628      	mov	r0, r5
 800cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf0:	f000 f833 	bl	800ce5a <_malloc_usable_size_r>
 800cdf4:	42a0      	cmp	r0, r4
 800cdf6:	d20f      	bcs.n	800ce18 <_realloc_r+0x48>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	f7ff ff8e 	bl	800cd1c <_malloc_r>
 800ce00:	4605      	mov	r5, r0
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0f2      	beq.n	800cdec <_realloc_r+0x1c>
 800ce06:	4631      	mov	r1, r6
 800ce08:	4622      	mov	r2, r4
 800ce0a:	f7ff ff15 	bl	800cc38 <memcpy>
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff ff35 	bl	800cc80 <_free_r>
 800ce16:	e7e9      	b.n	800cdec <_realloc_r+0x1c>
 800ce18:	4635      	mov	r5, r6
 800ce1a:	e7e7      	b.n	800cdec <_realloc_r+0x1c>

0800ce1c <_sbrk_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4c06      	ldr	r4, [pc, #24]	; (800ce38 <_sbrk_r+0x1c>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4605      	mov	r5, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	6023      	str	r3, [r4, #0]
 800ce28:	f000 f820 	bl	800ce6c <_sbrk>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_sbrk_r+0x1a>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_sbrk_r+0x1a>
 800ce34:	602b      	str	r3, [r5, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	20001aa4 	.word	0x20001aa4

0800ce3c <__ascii_wctomb>:
 800ce3c:	b149      	cbz	r1, 800ce52 <__ascii_wctomb+0x16>
 800ce3e:	2aff      	cmp	r2, #255	; 0xff
 800ce40:	bf85      	ittet	hi
 800ce42:	238a      	movhi	r3, #138	; 0x8a
 800ce44:	6003      	strhi	r3, [r0, #0]
 800ce46:	700a      	strbls	r2, [r1, #0]
 800ce48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ce4c:	bf98      	it	ls
 800ce4e:	2001      	movls	r0, #1
 800ce50:	4770      	bx	lr
 800ce52:	4608      	mov	r0, r1
 800ce54:	4770      	bx	lr

0800ce56 <__malloc_lock>:
 800ce56:	4770      	bx	lr

0800ce58 <__malloc_unlock>:
 800ce58:	4770      	bx	lr

0800ce5a <_malloc_usable_size_r>:
 800ce5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5e:	1f18      	subs	r0, r3, #4
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfbc      	itt	lt
 800ce64:	580b      	ldrlt	r3, [r1, r0]
 800ce66:	18c0      	addlt	r0, r0, r3
 800ce68:	4770      	bx	lr
	...

0800ce6c <_sbrk>:
 800ce6c:	4b04      	ldr	r3, [pc, #16]	; (800ce80 <_sbrk+0x14>)
 800ce6e:	6819      	ldr	r1, [r3, #0]
 800ce70:	4602      	mov	r2, r0
 800ce72:	b909      	cbnz	r1, 800ce78 <_sbrk+0xc>
 800ce74:	4903      	ldr	r1, [pc, #12]	; (800ce84 <_sbrk+0x18>)
 800ce76:	6019      	str	r1, [r3, #0]
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	4402      	add	r2, r0
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	4770      	bx	lr
 800ce80:	200005a0 	.word	0x200005a0
 800ce84:	20001aa8 	.word	0x20001aa8

0800ce88 <_init>:
 800ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8a:	bf00      	nop
 800ce8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8e:	bc08      	pop	{r3}
 800ce90:	469e      	mov	lr, r3
 800ce92:	4770      	bx	lr

0800ce94 <_fini>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	bf00      	nop
 800ce98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9a:	bc08      	pop	{r3}
 800ce9c:	469e      	mov	lr, r3
 800ce9e:	4770      	bx	lr
